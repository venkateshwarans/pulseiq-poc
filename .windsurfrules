# General Code Style & Formatting
- Follow the Airbnb Style Guide for code formatting.
- Use PascalCase for React component file names (e.g., UserCard.tsx, not user-card.tsx).
- Prefer named exports for components.

# Project Structure & Architecture
- Follow Next.js patterns and use the App Router.
- Correctly determine when to use server vs. client components in Next.js.

# Styling & UI
- Use Tailwind CSS for styling.
- Use Shadcn UI for components.

# Data Fetching & Forms
- Use TanStack Query (react-query) for frontend data fetching.
- Use React Hook Form for form handling.
- Use Zod for validation.

# State Management & Logic
- Use React Context for state management.

# Backend & Database
Use Prisma for database access.


# General Code Style & Formatting
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Follow Expo's official documentation for setting up and configuring projects.

# Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

# TypeScript Best Practices
- Use TypeScript for all code; prefer interfaces over types.
- Avoid any and enums; use explicit types and maps instead.
- Use functional components with TypeScript interfaces.
- Enable strict mode in TypeScript for better type safety.

# Syntax & Formatting
- Use the function keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Prettier for consistent code formatting.

# Styling & UI
- Use Expo's built-in components for common UI patterns and layouts.
- Implement responsive design with Flexbox and useWindowDimensions.
- Use styled-components or Tailwind CSS for styling.
- Implement dark mode support using Expo's useColorScheme.
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Use react-native-reanimated and react-native-gesture-handler for performant animations and gestures.


# External Documentation
- [Next.js Documentation](https://nextjs.org/docs) - Official Next.js documentation for routing, API routes, and deployment
- [OpenAI API Reference](https://platform.openai.com/docs/api-reference) - API reference for OpenAI's models and endpoints
- [Zod Documentation](https://zod.dev/) - Documentation for Zod schema validation library
- [React Documentation](https://react.dev/reference/react) - Official React documentation for hooks and components


# External Documentation

## Frontend
- [React Documentation](https://react.dev/reference/react)
- [@crayonai/react-ui Documentation](https://docs.crayonai.dev/react-ui)

## Backend
- [OpenAI API Reference](https://platform.openai.com/docs/api-reference)

## Data Validation
- [Zod Documentation](https://zod.dev/)


Directory structure:
└── react-ui/
    ├── README.md
    ├── cp-css.js
    ├── package.json
    ├── tsconfig.json
    ├── src/
    │   ├── cssUtils.scss
    │   ├── index.ts
    │   ├── types.d.ts
    │   ├── components/
    │   │   ├── index.scss
    │   │   ├── Accordion/
    │   │   │   ├── accordion.scss
    │   │   │   ├── Accordion.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── accordion.stories.tsx
    │   │   ├── Button/
    │   │   │   ├── button.scss
    │   │   │   ├── Button.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── Button.stories.tsx
    │   │   ├── Buttons/
    │   │   │   ├── buttons.scss
    │   │   │   ├── Buttons.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── buttons.stories.tsx
    │   │   ├── Calendar/
    │   │   │   ├── calendar.scss
    │   │   │   ├── Calendar.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── components/
    │   │   │   │   ├── calendarHelperComponents.scss
    │   │   │   │   └── helperComponents.tsx
    │   │   │   ├── stories/
    │   │   │   │   └── Calendar.stories.tsx
    │   │   │   └── utils/
    │   │   │       ├── calendarBaseStyle.scss
    │   │   │       ├── helperFn.tsx
    │   │   │       └── styles.tsx
    │   │   ├── Callout/
    │   │   │   ├── callout.scss
    │   │   │   ├── Callout.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── callout.stories.tsx
    │   │   ├── Card/
    │   │   │   ├── card.scss
    │   │   │   ├── Card.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── card.stories.tsx
    │   │   ├── CardHeader/
    │   │   │   ├── cardHeader.scss
    │   │   │   ├── CardHeader.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── cardHeader.stories.tsx
    │   │   ├── Carousel/
    │   │   │   ├── carousel.scss
    │   │   │   ├── Carousel.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── carousel.stories.tsx
    │   │   ├── Charts/
    │   │   │   ├── cartesianGrid.tsx
    │   │   │   ├── charts.scss
    │   │   │   ├── Charts.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── AreaChart/
    │   │   │   │   ├── AreaChart.tsx
    │   │   │   │   ├── index.ts
    │   │   │   │   └── stories/
    │   │   │   │       └── areaChart.stories.tsx
    │   │   │   ├── BarChart/
    │   │   │   │   ├── BarChart.tsx
    │   │   │   │   ├── index.ts
    │   │   │   │   └── stories/
    │   │   │   │       └── barChart.stories.tsx
    │   │   │   ├── LineChart/
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── LineChart.tsx
    │   │   │   │   └── stories/
    │   │   │   │       └── lineChart.stories.tsx
    │   │   │   ├── PieChart/
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── PieChart.tsx
    │   │   │   │   └── stories/
    │   │   │   │       └── pieChart.stories.tsx
    │   │   │   ├── RadarChart/
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── RadarChart.tsx
    │   │   │   │   └── stories/
    │   │   │   │       └── raderChart.stories.tsx
    │   │   │   ├── RadialChart/
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── RadialChart.tsx
    │   │   │   │   └── stories/
    │   │   │   │       └── radialChart.stories.tsx
    │   │   │   └── utils/
    │   │   │       └── PalletUtils.ts
    │   │   ├── CheckBoxGroup/
    │   │   │   ├── checkBoxGroup.scss
    │   │   │   ├── CheckBoxGroup.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── CheckBoxGroup.stories.tsx
    │   │   ├── CheckBoxItem/
    │   │   │   ├── checkBoxItem.scss
    │   │   │   ├── CheckBoxItem.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── CheckBoxItem.stories.tsx
    │   │   ├── CodeBlock/
    │   │   │   ├── codeBlock.scss
    │   │   │   ├── CodeBlock.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── CodeBlock.stories.tsx
    │   │   ├── CopilotShell/
    │   │   │   ├── Container.tsx
    │   │   │   ├── copilotShell.scss
    │   │   │   ├── dependencies.ts
    │   │   │   ├── header.scss
    │   │   │   ├── Header.tsx
    │   │   │   ├── index.ts
    │   │   │   ├── thread.scss
    │   │   │   ├── Thread.tsx
    │   │   │   └── stories/
    │   │   │       ├── Shell.stories.tsx
    │   │   │       └── style.module.scss
    │   │   ├── CrayonChat/
    │   │   │   ├── ComposedCopilot.tsx
    │   │   │   ├── ComposedStandalone.tsx
    │   │   │   ├── crayonChat.scss
    │   │   │   ├── CrayonChat.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── CrayonChat.stories.tsx
    │   │   ├── DatePicker/
    │   │   │   ├── datePicker.scss
    │   │   │   ├── DatePicker.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── helpers/
    │   │   │   │   ├── components/
    │   │   │   │   │   ├── datePickerRenderer.scss
    │   │   │   │   │   ├── DatePickerRenderer.tsx
    │   │   │   │   │   ├── floatingDatePickerRenderer.scss
    │   │   │   │   │   ├── FloatingDatePickerRenderer.tsx
    │   │   │   │   │   ├── helperComponents.scss
    │   │   │   │   │   └── HelperComponents.tsx
    │   │   │   │   ├── context/
    │   │   │   │   │   └── DatePickerContext.tsx
    │   │   │   │   └── utils/
    │   │   │   │       ├── datePickerBaseStyle.scss
    │   │   │   │       ├── helperFn.tsx
    │   │   │   │       └── styles.tsx
    │   │   │   └── stories/
    │   │   │       └── DatePicker.stories.tsx
    │   │   ├── FollowUpBlock/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── followUpBlock.scss
    │   │   │   ├── FollowUpBlock.tsx
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── FollowUpBlock.stories.tsx
    │   │   ├── FollowUpItem/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── followUpItem.scss
    │   │   │   ├── FollowUpItem.tsx
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── FollowUpItem.stories.tsx
    │   │   ├── FormControl/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── formControl.scss
    │   │   │   ├── FormControl.tsx
    │   │   │   ├── index.ts
    │   │   │   ├── Hint/
    │   │   │   │   ├── hint.scss
    │   │   │   │   ├── Hint.tsx
    │   │   │   │   └── index.ts
    │   │   │   └── stories/
    │   │   │       └── FormControl.stories.tsx
    │   │   ├── IconButton/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── iconButton.scss
    │   │   │   ├── IconButton.tsx
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── iconButton.stories.tsx
    │   │   ├── Image/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── image.scss
    │   │   │   ├── Image.tsx
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── Image.stories.tsx
    │   │   ├── ImageGallery/
    │   │   │   ├── GalleryModal.tsx
    │   │   │   ├── imageGallery.scss
    │   │   │   ├── ImageGallery.tsx
    │   │   │   ├── index.ts
    │   │   │   └── stories/
    │   │   │       └── imsgeGallery.stories.tsx
    │   │   ├── Input/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── input.scss
    │   │   │   ├── Input.tsx
    │   │   │   └── stories/
    │   │   │       └── Input.stories.tsx
    │   │   ├── Label/
    │   │   │   ├── index.ts
    │   │   │   ├── label.scss
    │   │   │   └── Label.tsx
    │   │   ├── ListBlock/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── listBlock.scss
    │   │   │   ├── ListBlock.tsx
    │   │   │   └── stories/
    │   │   │       └── ListBlock.stories.tsx
    │   │   ├── ListItem/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── listItem.scss
    │   │   │   ├── ListItem.tsx
    │   │   │   └── stories/
    │   │   │       └── ListItem.stories.tsx
    │   │   ├── MarkDownRenderer/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── markDownRenderer.scss
    │   │   │   ├── MarkDownRenderer.tsx
    │   │   │   └── stories/
    │   │   │       └── MarkDownRenderer.stories.tsx
    │   │   ├── MessageLoading/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── messageLoading.scss
    │   │   │   ├── MessageLoading.tsx
    │   │   │   └── stories/
    │   │   │       └── MessageLoading.stories.tsx
    │   │   ├── RadioGroup/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── radioGroup.scss
    │   │   │   ├── RadioGroup.tsx
    │   │   │   └── stories/
    │   │   │       └── RadioGroup.stories.tsx
    │   │   ├── RadioItem/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── radioItem.scss
    │   │   │   ├── RadioItem.tsx
    │   │   │   └── stories/
    │   │   │       └── RadioItem.stories.tsx
    │   │   ├── Select/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── select.scss
    │   │   │   ├── Select.tsx
    │   │   │   └── stories/
    │   │   │       └── select.stories.tsx
    │   │   ├── Shell/
    │   │   │   ├── Container.tsx
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── mobileHeader.scss
    │   │   │   ├── MobileHeader.tsx
    │   │   │   ├── NewChatButton.tsx
    │   │   │   ├── shell.scss
    │   │   │   ├── sidebar.scss
    │   │   │   ├── Sidebar.tsx
    │   │   │   ├── store.tsx
    │   │   │   ├── thread.scss
    │   │   │   ├── Thread.tsx
    │   │   │   ├── threadlist.scss
    │   │   │   ├── ThreadList.tsx
    │   │   │   └── stories/
    │   │   │       └── Shell.stories.tsx
    │   │   ├── Slider/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── slider.scss
    │   │   │   ├── Slider.tsx
    │   │   │   └── stories/
    │   │   │       └── slider.stories.tsx
    │   │   ├── Steps/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── steps.scss
    │   │   │   ├── Steps.tsx
    │   │   │   └── stories/
    │   │   │       └── steps.stories.tsx
    │   │   ├── SwitchGroup/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── switchGroup.scss
    │   │   │   ├── SwitchGroup.tsx
    │   │   │   └── stories/
    │   │   │       └── SwitchGroup.stories.tsx
    │   │   ├── SwitchItem/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── switchItem.scss
    │   │   │   ├── SwitchItem.tsx
    │   │   │   └── stories/
    │   │   │       └── SwitchItem.stories.tsx
    │   │   ├── Table/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── table.scss
    │   │   │   ├── Table.tsx
    │   │   │   └── stories/
    │   │   │       └── Table.stories.tsx
    │   │   ├── Tabs/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── tabs.scss
    │   │   │   ├── Tabs.tsx
    │   │   │   └── stories/
    │   │   │       └── tabs.stories.tsx
    │   │   ├── Tag/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── tag.scss
    │   │   │   ├── Tag.tsx
    │   │   │   └── stories/
    │   │   │       └── Tag.stories.tsx
    │   │   ├── TagBlock/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── tagBlock.scss
    │   │   │   ├── TagBlock.tsx
    │   │   │   └── stories/
    │   │   │       └── TagBlock.stories.tsx
    │   │   ├── TextArea/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── textArea.scss
    │   │   │   ├── TextArea.tsx
    │   │   │   └── stories/
    │   │   │       └── TextArea.stories.tsx
    │   │   ├── TextContent/
    │   │   │   ├── dependencies.ts
    │   │   │   ├── index.ts
    │   │   │   ├── textContent.scss
    │   │   │   ├── TextContent.tsx
    │   │   │   └── stories/
    │   │   │       └── TextContent.stories.tsx
    │   │   └── ThemeProvider/
    │   │       ├── index.ts
    │   │       ├── ThemeProvider.tsx
    │   │       └── types.ts
    │   ├── context/
    │   │   └── LayoutContext.tsx
    │   ├── hooks/
    │   │   ├── useComposerState.ts
    │   │   ├── useElementSize.ts
    │   │   ├── useMultipleRefs.ts
    │   │   └── useScrollToBottom.ts
    │   ├── internalUtils/
    │   │   └── ref.ts
    │   ├── lib/
    │   │   └── tailwind/
    │   │       ├── generateTailwindPlugin.ts
    │   │       ├── pluginTemplate.txt
    │   │       └── utils.ts
    │   ├── scripts/
    │   │   └── scss-import.js
    │   ├── types/
    │   │   └── postcss-js.d.ts
    │   └── utils/
    │       ├── DatePickerUtils.ts
    │       └── index.ts
    └── .storybook/
        ├── main.ts
        ├── manager.css
        ├── manager.ts
        ├── preview.tsx
        └── theme.ts




(Files content cropped to 300k characters, download full ingest to see more)
================================================
FILE: js/packages/react-ui/README.md
================================================
## UI Components



================================================
FILE: js/packages/react-ui/cp-css.js
================================================
import fs from "fs";
import { camelCase } from "lodash-es";
import path from "path";

const dirname = path.dirname(new URL(import.meta.url).pathname);

// Create directories if they don't exist
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

// Copy CSS files from src to dist
function copyCssFiles() {
  const srcDir = path.join(dirname, "dist", "components");
  const distDir = path.join(dirname, "dist", "styles");

  // Ensure the dist/styles directory exists
  ensureDirectoryExists(distDir);

  // Read all component directories
  const components = fs.readdirSync(srcDir);

  components.forEach((component) => {
    const componentSrcPath = path.join(srcDir, component);
    const componentStylesheetName = `${camelCase(component)}.css`;

    // Skip if not a directory
    if (!fs.statSync(componentSrcPath).isDirectory()) {
      return;
    }

    const stylePath = path.join(componentSrcPath, componentStylesheetName);
    const distFile = path.join(distDir, componentStylesheetName);
    if (fs.existsSync(stylePath)) {
      fs.copyFileSync(stylePath, distFile);
    } else {
      console.warn(`No stylesheet found for ${component}`);
    }
  });

  const indexCSSContent = fs.readFileSync(path.join(srcDir, "index.css"), "utf8");
  fs.writeFileSync(path.join(distDir, "index.css"), indexCSSContent);
}

try {
  copyCssFiles();
  console.log("CSS files copied successfully!");
} catch (error) {
  console.error("Error copying CSS files:", error);
  process.exit(1);
}



================================================
FILE: js/packages/react-ui/package.json
================================================
{
  "type": "module",
  "name": "@crayonai/react-ui",
  "license": "MIT",
  "version": "0.7.1",
  "description": "Component library for Generative UI SDK",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./dist/index.js"
    },
    "./styles/*": {
      "default": "./dist/styles/*"
    },
    "./*": {
      "types": "./dist/components/*/index.d.ts",
      "default": "./dist/components/*/index.js"
    },
    "./tailwind": {
      "types": "./dist/lib/tailwind/tailwind.d.ts",
      "default": "./dist/lib/tailwind/tailwind.js"
    }
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "generate-tailwind-plugin": "npx tsx src/lib/tailwind/generateTailwindPlugin.ts && pnpm build:plugin",
    "cleanup": "rm -rf src/lib/tailwind/tailwind.ts",
    "copy-css": "node cp-css.js",
    "generate-scss-index": "node src/scripts/scss-import.js",
    "build": "rm -rf dist && pnpm build:scss && pnpm build:tsc && pnpm generate-tailwind-plugin && pnpm cleanup && pnpm run copy-css",
    "build:tsc": "tsc -p .",
    "build:scss": "sass src:dist --style compressed --no-source-map",
    "build:plugin": "tsc src/lib/tailwind/tailwind --outDir dist/lib/tailwind --module esnext --allowSyntheticDefaultImports --moduleResolution bundler --declaration",
    "storybook": "storybook dev -p 6006",
    "build:storybook": "storybook build -o ../../../docs/static/ui",
    "watch": "concurrently \"pnpm run build:tsc --watch\" \"pnpm run build:scss --watch\"",
    "lint:check": "eslint ./src",
    "lint:fix": "eslint ./src --fix",
    "format:fix": "prettier --write ./src",
    "format:check": "prettier --check ./src",
    "prepare": "pnpm run build",
    "ci": "pnpm run lint:check && pnpm run format:check"
  },
  "peerDependencies": {
    "@crayonai/react-core": "workspace:*",
    "@crayonai/stream": "workspace:*",
    "react": ">=18.0.0",
    "react-dom": ">=18.0.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss": "^3.0.0",
    "tailwindcss-animate": "^1.0.7",
    "tiny-invariant": "^1.3.3",
    "zustand": "^5.0.2"
  },
  "dependencies": {
    "@floating-ui/react-dom": "^2.1.2",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-select": "^2.1.5",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@storybook/addon-styling-webpack": "^1.0.1",
    "@storybook/core-events": "^8.5.3",
    "@storybook/manager-api": "^8.5.3",
    "@storybook/theming": "^8.5.3",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lodash-es": "^4.17.21",
    "lucide-react": "^0.469.0",
    "react-day-picker": "^9.5.1",
    "react-markdown": "^10.1.0",
    "react-syntax-highlighter": "^15.6.1",
    "recharts": "^2.15.1",
    "rehype-katex": "^7.0.1",
    "remark-breaks": "^4.0.0",
    "remark-emoji": "^5.0.1",
    "remark-gfm": "^4.0.1",
    "remark-math": "^6.0.0",
    "sass": "^1.83.4"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^3.2.4",
    "@storybook/addon-essentials": "^8.5.3",
    "@storybook/addon-interactions": "^8.5.3",
    "@storybook/addon-onboarding": "^8.5.3",
    "@storybook/addon-themes": "^8.5.3",
    "@storybook/blocks": "^8.5.3",
    "@storybook/react": "^8.5.3",
    "@storybook/react-vite": "^8.5.3",
    "@storybook/test": "^8.5.3",
    "@types/lodash-es": "^4.17.12",
    "@types/node": "^22.12.0",
    "@types/react": ">=18.0.0",
    "@types/react-dom": "^19.0.3",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@typescript-eslint/eslint-plugin": "^8.18.0",
    "eslint": "^9.17.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "eslint-plugin-storybook": "^0.11.1",
    "eslint-plugin-unused-imports": "^3.1.0",
    "postcss": "^8.5.1",
    "postcss-js": "^4.0.1",
    "postcss-remove-duplicate-values": "^1.0.0",
    "prettier-plugin-organize-imports": "^3.2.4",
    "prop-types": "^15.8.1",
    "storybook": "^8.5.3",
    "tsx": "^4.19.2",
    "vite": "^5.0.0"
  },
  "keywords": [],
  "author": "engineering@thesys.dev",
  "eslintConfig": {
    "extends": [
      "plugin:storybook/recommended"
    ]
  }
}



================================================
FILE: js/packages/react-ui/tsconfig.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "../../tsconfig.json",
  "include": ["src/**/*"],
  "compilerOptions": {
    "moduleResolution": "bundler",
    "module": "ESNext",
    "outDir": "./dist",
    "rootDir": "./src",
    "types": ["./src/types.d.ts", "node"]
  }
}



================================================
FILE: js/packages/react-ui/src/cssUtils.scss
================================================
@use "sass:map";

// Crayon Background Colors

$bg-fill: var(--crayon-background-fills);
$bg-brand-el: var(--crayon-brand-el-fills);
$bg-brand-el-hover: var(--crayon-brand-el-hover-fills);
$bg-container: var(--crayon-container-fills);
$bg-container-hover: var(--crayon-container-hover-fills);
$bg-overlay: var(--crayon-overlay-fills);
$bg-sunk: var(--crayon-sunk-fills);
$bg-danger: var(--crayon-danger-fills);
$bg-success: var(--crayon-success-fills);
$bg-info: var(--crayon-info-fills);
$bg-elevated: var(--crayon-elevated-fills);

// Crayon Stroke Colors

$stroke-default: var(--crayon-stroke-default);
$stroke-interactive-el: var(--crayon-stroke-interactive-el);
$stroke-interactive-el-hover: var(--crayon-stroke-interactive-el-hover);
$stroke-interactive-el-selected: var(--crayon-stroke-interactive-el-selected);

// Crayon Text Colors

$brand-text: var(--crayon-brand-text);
$brand-secondary-text: var(--crayon-brand-secondary-text);
$primary-text: var(--crayon-primary-text);
$secondary-text: var(--crayon-secondary-text);
$disabled-text: var(--crayon-disabled-text);
$danger-text: var(--crayon-danger-text);
$success-text: var(--crayon-success-text);
$link-text: var(--crayon-link-text);
$info-text: var(--crayon-info-text);

// Crayon Spacing

$spacing-0: var(--crayon-spacing-0);
$spacing-3xs: var(--crayon-spacing-3xs);
$spacing-2xs: var(--crayon-spacing-2xs);
$spacing-xs: var(--crayon-spacing-xs);
$spacing-s: var(--crayon-spacing-s);
$spacing-m: var(--crayon-spacing-m);
$spacing-l: var(--crayon-spacing-l);
$spacing-xl: var(--crayon-spacing-xl);
$spacing-2xl: var(--crayon-spacing-2xl);
$spacing-3xl: var(--crayon-spacing-3xl);

// Crayon Radius

$rounded-0: var(--crayon-rounded-0);
$rounded-3xs: var(--crayon-rounded-3xs);
$rounded-2xs: var(--crayon-rounded-2xs);
$rounded-xs: var(--crayon-rounded-xs);
$rounded-s: var(--crayon-rounded-s);
$rounded-m: var(--crayon-rounded-m);
$rounded-l: var(--crayon-rounded-l);
$rounded-xl: var(--crayon-rounded-xl);
$rounded-2xl: var(--crayon-rounded-2xl);
$rounded-3xl: var(--crayon-rounded-3xl);
$rounded-full: var(--crayon-rounded-full);

// Crayon Shadows

$shadow-s: var(--crayon-shadow-s);
$shadow-m: var(--crayon-shadow-m);
$shadow-l: var(--crayon-shadow-l);
$shadow-xl: var(--crayon-shadow-xl);
$shadow-2xl: var(--crayon-shadow-2xl);
$shadow-3xl: var(--crayon-shadow-3xl);

// Crayon Chat Colors

$chat-container-bg: var(--crayon-chat-container-bg);
$chat-assistant-response-bg: var(--crayon-chat-assistant-response-bg);
$chat-assistant-response-text: var(--crayon-chat-assistant-response-text);
$chat-user-response-bg: var(--crayon-chat-user-response-bg);
$chat-user-response-text: var(--crayon-chat-user-response-text);

@function typography($font-name) {
  @return (font: var(--#{$font-name}), letter-spacing: var(--#{$font-name}-letter-spacing));
}

$typography: (
  body: (
    default: typography(crayon-font-body),
    link: typography(crayon-font-body-link),
    heavy: typography(crayon-font-body-heavy),
    medium: typography(crayon-font-body-medium),
    small: typography(crayon-font-body-small),
    small-heavy: typography(crayon-font-body-small-heavy),
  ),
  label: (
    default: typography(crayon-font-label),
    heavy: typography(crayon-font-label-heavy),
    small: typography(crayon-font-label-small),
    small-heavy: typography(crayon-font-label-small-heavy),
    extra-small: typography(crayon-font-label-extra-small),
    extra-small-heavy: typography(crayon-font-label-extra-small-heavy),
    large: typography(crayon-font-label-large),
    large-heavy: typography(crayon-font-label-large-heavy),
    medium: typography(crayon-font-label-medium),
    medium-heavy: typography(crayon-font-label-medium-heavy),
  ),
  heading: (
    large: typography(crayon-font-heading-large),
    medium: typography(crayon-font-heading-medium),
    small: typography(crayon-font-heading-small),
  ),
  primary: (
    default: typography(crayon-font-primary),
  ),
  title: (
    default: typography(crayon-font-title),
    medium: typography(crayon-font-title-medium),
    small: typography(crayon-font-title-small),
  ),
);

@mixin typography($font-name, $font-variant) {
  font: map.get($typography, $font-name, $font-variant, font);
  letter-spacing: map.get($typography, $font-name, $font-variant, letter-spacing);
}

@mixin button-reset {
  padding: 0;
  border: 0;
  background: transparent;
}



================================================
FILE: js/packages/react-ui/src/index.ts
================================================
export * from "./components/Accordion";
export * from "./components/Button";
export * from "./components/Buttons";
export * from "./components/Calendar";
export * from "./components/Callout";
export * from "./components/Card";
export * from "./components/CardHeader";
export * from "./components/Carousel";
export * from "./components/Charts";
export * from "./components/CheckBoxGroup";
export * from "./components/CheckBoxItem";
export * from "./components/CodeBlock";
export * as CopilotShell from "./components/CopilotShell";
export * from "./components/CrayonChat";
export * from "./components/DatePicker";
export * from "./components/FollowUpBlock";
export * from "./components/FollowUpItem";
export * from "./components/FormControl";
export * from "./components/IconButton";
export * from "./components/Image";
export * from "./components/ImageGallery";
export * from "./components/Input";
export * from "./components/Label";
export * from "./components/ListBlock";
export * from "./components/ListItem";
export * from "./components/MarkDownRenderer";
export * from "./components/MessageLoading";
export * from "./components/RadioGroup";
export * from "./components/RadioItem";
export * from "./components/Select";
export * as Shell from "./components/Shell";
export * from "./components/Slider";
export * from "./components/Steps";
export * from "./components/SwitchGroup";
export * from "./components/SwitchItem";
export * from "./components/Table";
export * from "./components/Tabs";
export * from "./components/Tag";
export * from "./components/TagBlock";
export * from "./components/TextArea";
export * from "./components/TextContent";
export { Theme, ThemeProvider } from "./components/ThemeProvider";

// this is the context providers that are used in the shell
export * from "./context/LayoutContext";



================================================
FILE: js/packages/react-ui/src/types.d.ts
================================================
declare module "*.jpeg" {
  const value: string;
  export default value;
}



================================================
FILE: js/packages/react-ui/src/components/index.scss
================================================
@forward "./Accordion/accordion.scss";
@forward "./Button/button.scss";
@forward "./Buttons/buttons.scss";
@forward "./Calendar/calendar.scss";
@forward "./Callout/callout.scss";
@forward "./Card/card.scss";
@forward "./CardHeader/cardHeader.scss";
@forward "./Carousel/carousel.scss";
@forward "./Charts/charts.scss";
@forward "./CheckBoxGroup/checkBoxGroup.scss";
@forward "./CheckBoxItem/checkBoxItem.scss";
@forward "./CodeBlock/codeBlock.scss";
@forward "./CopilotShell/copilotShell.scss";
@forward "./CrayonChat/crayonChat.scss";
@forward "./DatePicker/datePicker.scss";
@forward "./FollowUpBlock/followUpBlock.scss";
@forward "./FollowUpItem/followUpItem.scss";
@forward "./FormControl/formControl.scss";
@forward "./IconButton/iconButton.scss";
@forward "./Image/image.scss";
@forward "./ImageGallery/imageGallery.scss";
@forward "./Input/input.scss";
@forward "./Label/label.scss";
@forward "./ListBlock/listBlock.scss";
@forward "./ListItem/listItem.scss";
@forward "./MarkDownRenderer/markDownRenderer.scss";
@forward "./MessageLoading/messageLoading.scss";
@forward "./RadioGroup/radioGroup.scss";
@forward "./RadioItem/radioItem.scss";
@forward "./Select/select.scss";
@forward "./Shell/shell.scss";
@forward "./Slider/slider.scss";
@forward "./Steps/steps.scss";
@forward "./SwitchGroup/switchGroup.scss";
@forward "./SwitchItem/switchItem.scss";
@forward "./Table/table.scss";
@forward "./Tabs/tabs.scss";
@forward "./Tag/tag.scss";
@forward "./TagBlock/tagBlock.scss";
@forward "./TextArea/textArea.scss";
@forward "./TextContent/textContent.scss";



================================================
FILE: js/packages/react-ui/src/components/Accordion/accordion.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-accordion {
  box-sizing: border-box;
  border-radius: 6px;
  box-shadow: cssUtils.$shadow-m;
  border: 1px solid cssUtils.$stroke-default;

  &-item {
    box-sizing: border-box;
    overflow: hidden;
    border-bottom: 1px solid cssUtils.$stroke-default;

    &-card {
      .crayon-accordion-content {
        &-wrapper {
          padding: cssUtils.$spacing-l;
          gap: cssUtils.$spacing-l;
        }
      }
    }

    &-sunk {
      .crayon-accordion-trigger {
        background-color: cssUtils.$bg-sunk;
      }

      .crayon-accordion-content {
        background-color: cssUtils.$bg-sunk;

        &-wrapper {
          padding: cssUtils.$spacing-l;
          gap: cssUtils.$spacing-l;
        }
      }
    }
    &:first-child {
      margin-top: 0;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
    }
    &:last-child {
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
      border-bottom: none;
    }
    &:focus-within {
      position: relative;
      z-index: 1;
    }
  }
  &-header {
    display: flex;
    margin-block-start: 0;
    margin-block-end: 0;
    margin-inline-start: 0;
    margin-inline-end: 0;
  }
  &-trigger {
    border: none;
    box-sizing: border-box;
    @include cssUtils.typography("body", "default");
    background-color: transparent;
    padding: cssUtils.$spacing-s;
    width: 100%;
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: cssUtils.$primary-text;
    box-shadow: cssUtils.$shadow-m;

    &-content {
      display: flex;
      align-items: center;
      color: cssUtils.$primary-text;
      gap: cssUtils.$spacing-xs;
      &-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 14px;
        width: 14px;
      }
    }

    &-icon {
      color: cssUtils.$primary-text;
      @include cssUtils.typography("primary", "default");
      height: 14px;
      width: 14px;
      transition: transform 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
    &[data-state="open"] {
      .crayon-accordion-trigger-icon {
        transform: rotate(180deg);
      }
    }
  }
  &-content {
    overflow: hidden;
    color: cssUtils.$primary-text;
    @include cssUtils.typography("body", "default");

    &[data-state="open"] {
      animation: slideDown 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
    &[data-state="closed"] {
      animation: slideUp 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
    &-wrapper {
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      padding: cssUtils.$spacing-l;
      gap: cssUtils.$spacing-l;
    }
  }
}

@keyframes slideDown {
  from {
    height: 0;
  }
  to {
    height: var(--radix-accordion-content-height);
  }
}

@keyframes slideUp {
  from {
    height: var(--radix-accordion-content-height);
  }
  to {
    height: 0;
  }
}



================================================
FILE: js/packages/react-ui/src/components/Accordion/Accordion.tsx
================================================
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import clsx from "clsx";
import { ChevronDownIcon } from "lucide-react";
import React, { forwardRef } from "react";

export type AccordionProps =
  | AccordionPrimitive.AccordionSingleProps
  | AccordionPrimitive.AccordionMultipleProps;

export const Accordion = forwardRef<
  React.ComponentRef<typeof AccordionPrimitive.Root>,
  AccordionProps
>(({ className, style, ...props }, ref) => (
  <AccordionPrimitive.Root
    ref={ref}
    className={clsx("crayon-accordion", className)}
    style={style}
    {...props}
  />
));

type AccordionItemVariant = "card" | "sunk";
export interface AccordionItemProps
  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {
  className?: string;
  style?: React.CSSProperties;
  value: string;
  variant?: AccordionItemVariant;
}

const variantMap: Record<AccordionItemVariant, string> = {
  card: "crayon-accordion-item-card",
  sunk: "crayon-accordion-item-sunk",
};

export const AccordionItem = forwardRef<
  React.ComponentRef<typeof AccordionPrimitive.Item>,
  AccordionItemProps
>(({ className, style, value, variant = "card", ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={clsx("crayon-accordion-item", variantMap[variant], className)}
    style={style}
    value={value}
    {...props}
  />
));

export interface AccordionTriggerProps
  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> {
  className?: string;
  style?: React.CSSProperties;
  icon?: React.ReactNode;
  text: React.ReactNode;
}
export const AccordionTrigger = forwardRef<
  React.ComponentRef<typeof AccordionPrimitive.Trigger>,
  AccordionTriggerProps
>(({ className, style, text, icon, ...props }, ref) => (
  <AccordionPrimitive.Header className={clsx("crayon-accordion-header")}>
    <AccordionPrimitive.Trigger
      ref={ref}
      className={clsx("crayon-accordion-trigger", className)}
      style={style}
      {...props}
    >
      <div className="crayon-accordion-trigger-content">
        {icon && <span className="crayon-accordion-trigger-content-icon">{icon}</span>}
        {text}
      </div>
      <ChevronDownIcon className="crayon-accordion-trigger-icon" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));

export interface AccordionContentProps
  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> {
  className?: string;
  style?: React.CSSProperties;
  children?: React.ReactNode;
}
export const AccordionContent = forwardRef<
  React.ComponentRef<typeof AccordionPrimitive.Content>,
  AccordionContentProps
>(({ className, style, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={clsx("crayon-accordion-content", className)}
    style={style}
    {...props}
  >
    <div className="crayon-accordion-content-wrapper">{children}</div>
  </AccordionPrimitive.Content>
));



================================================
FILE: js/packages/react-ui/src/components/Accordion/dependencies.ts
================================================
const dependencies = ["Accordion"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Accordion/index.ts
================================================
export * from "./Accordion";



================================================
FILE: js/packages/react-ui/src/components/Accordion/stories/accordion.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Bird, Dog, Fish } from "lucide-react";
import { CardHeader } from "../../CardHeader";
import { IconButton } from "../../IconButton";
import { Image } from "../../Image";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "../Accordion";

interface AccordionStoryProps {
  type: "single" | "multiple";
  collapsible?: boolean;
  defaultValue?: string;
  variant?: "card" | "sunk";
  showIcons?: boolean;
}

const meta: Meta<AccordionStoryProps> = {
  title: "Components/Accordion",
  component: Accordion as any,
  tags: ["autodocs", "!dev"],
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "```tsx\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  decorators: [
    (Story) => (
      <div style={{ width: "400px" }}>
        <Story />
      </div>
    ),
  ],
  argTypes: {
    type: {
      control: "radio",
      options: ["single", "multiple"],
      description: "The type of accordion behavior - single item open or multiple items",
      defaultValue: "single",
      table: {
        category: "Behavior",
      },
    },
    collapsible: {
      control: "boolean",
      description: "Whether the accordion items can be collapsed (only available for single type)",
      defaultValue: true,
      if: { arg: "type", eq: "single" },
      table: {
        category: "Behavior",
      },
    },
    defaultValue: {
      description: 'The default opened item value (only for type="single")',
      control: false,
      table: {
        category: "Behavior",
      },
    },
    variant: {
      control: "radio",
      options: ["card", "sunk"],
      description: "The visual style variant of the accordion",
      defaultValue: "card",
      table: {
        category: "Appearance",
      },
    },
    showIcons: {
      control: "boolean",
      description: "Whether to show icons in the accordion triggers",
      defaultValue: false,
      table: {
        category: "Appearance",
      },
    },
  },
};

export default meta;
type Story = StoryObj<AccordionStoryProps>;

const cityItems = [
  {
    value: "city-1",
    title: "New York",
    subtitle: "The Big Apple",
    description: "Iconic skyline and urban culture",
    image:
      "https://images.pexels.com/photos/466685/pexels-photo-466685.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
  {
    value: "city-2",
    title: "Tokyo",
    subtitle: "Modern Metropolis",
    description: "Blend of tradition and technology",
    image:
      "https://images.pexels.com/photos/2506923/pexels-photo-2506923.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
  {
    value: "city-3",
    title: "Paris",
    subtitle: "City of Light",
    description: "Romance and architecture",
    image:
      "https://images.unsplash.com/photo-1499856871958-5b9627545d1a?q=80&w=3820&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
];

const landscapeItems = [
  {
    value: "landscape-1",
    title: "Mountains",
    subtitle: "Alpine Views",
    description: "Majestic mountain ranges",
    image:
      "https://images.pexels.com/photos/1761279/pexels-photo-1761279.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
  {
    value: "landscape-2",
    title: "Beaches",
    subtitle: "Coastal Beauty",
    description: "Pristine shorelines",
    image:
      "https://images.pexels.com/photos/1032650/pexels-photo-1032650.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
  {
    value: "landscape-3",
    title: "Forests",
    subtitle: "Woodland Wonder",
    description: "Dense forest landscapes",
    image:
      "https://images.pexels.com/photos/240040/pexels-photo-240040.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
];

const animalItems = [
  {
    value: "animal-1",
    title: "Big Cats",
    icon: <Dog />,
    subtitle: "Majestic Felines",
    description: "Lions, tigers, and leopards",
    image:
      "https://images.pexels.com/photos/145939/pexels-photo-145939.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
  {
    value: "animal-2",
    title: "Marine Life",
    icon: <Fish />,
    subtitle: "Ocean Dwellers",
    description: "Underwater creatures",
    image:
      "https://plus.unsplash.com/premium_photo-1661835524331-cbba987ba74c?q=80&w=3878&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    value: "animal-3",
    title: "Birds",
    icon: <Bird />,
    subtitle: "Aerial Beauty",
    description: "Colorful avian species",
    image:
      "https://images.pexels.com/photos/326900/pexels-photo-326900.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
  },
];

export const SingleAccordion: Story = {
  args: {
    type: "single",
    collapsible: true,
    variant: "card",
    showIcons: true,
  },
  parameters: {
    docs: {
      description: {
        story: "An accordion showcasing different cities and their urban landscapes.",
      },
    },
  },
  render: (args) => (
    <Accordion type={args.type} collapsible={args.collapsible}>
      {cityItems.map((item) => (
        <AccordionItem key={item.value} value={item.value} variant={args.variant}>
          <AccordionTrigger text={item.title} />
          <AccordionContent>
            <CardHeader title={item.subtitle} subtitle={item.description} />
            <Image src={item.image} alt={item.title} scale="fill" />
          </AccordionContent>
        </AccordionItem>
      ))}
    </Accordion>
  ),
};

export const MultipleAccordion: Story = {
  args: {
    type: "multiple",
    variant: "card",
    showIcons: true,
  },
  parameters: {
    docs: {
      description: {
        story: "An example of an Accordion that allows multiple items to be open simultaneously.",
      },
    },
  },
  render: (args) => (
    <Accordion type="multiple">
      {landscapeItems.map((item) => (
        <AccordionItem key={item.value} value={item.value} variant={args.variant}>
          <AccordionTrigger text={item.title} />
          <AccordionContent>
            <CardHeader title={item.subtitle} subtitle={item.description} />
            <Image src={item.image} alt={item.title} scale="fill" />
          </AccordionContent>
        </AccordionItem>
      ))}
    </Accordion>
  ),
};

export const WithIconsAccordion: Story = {
  args: {
    type: "single",
    collapsible: true,
    variant: "card",
    showIcons: true,
  },
  parameters: {
    docs: {
      description: {
        story: "An accordion displaying different categories of animals and wildlife.",
      },
    },
  },
  render: (args) => (
    <Accordion type={args.type} collapsible={args.collapsible}>
      {animalItems.map((item) => (
        <AccordionItem key={item.value} value={item.value} variant={args.variant}>
          <AccordionTrigger text={item.title} icon={item.icon} />
          <AccordionContent>
            <CardHeader
              title={item.subtitle}
              subtitle={item.description}
              actions={[<IconButton variant="tertiary" size="small" icon={item.icon} />]}
            />
            <Image src={item.image} alt={item.title} scale="fill" />
          </AccordionContent>
        </AccordionItem>
      ))}
    </Accordion>
  ),
};



================================================
FILE: js/packages/react-ui/src/components/Button/button.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-button-base {
  box-sizing: border-box;
  @include cssUtils.typography(body, default);
  padding: cssUtils.$spacing-m;
  border-radius: cssUtils.$rounded-m;
  border: 1px solid transparent;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  gap: cssUtils.$spacing-2xs;
  align-items: center;
  & svg {
    height: 1rem;
    width: 1rem;
  }

  // Primary variant
  &-primary {
    background-color: cssUtils.$bg-brand-el;
    color: cssUtils.$brand-text;
    &:hover {
      background-color: cssUtils.$bg-brand-el-hover;
    }
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
  // Secondary variant
  &-secondary {
    background-color: cssUtils.$bg-container;
    color: cssUtils.$primary-text;
    border-color: cssUtils.$stroke-default;
    &:hover {
      background-color: cssUtils.$bg-container-hover;
    }
    &:disabled {
      color: cssUtils.$disabled-text;
      border-color: cssUtils.$stroke-default;
      cursor: not-allowed;
    }
  }
  // Tertiary variant
  &-tertiary {
    background-color: transparent;
    color: cssUtils.$primary-text;
    &:hover {
      background-color: cssUtils.$bg-container-hover;
    }
    &:disabled {
      color: cssUtils.$disabled-text;
      cursor: not-allowed;
    }
  }

  // Sizes
  &-small {
    padding: cssUtils.$spacing-2xs cssUtils.$spacing-xs;
  }

  &-medium {
    padding: cssUtils.$spacing-xs cssUtils.$spacing-m;
  }

  &-large {
    padding: cssUtils.$spacing-s cssUtils.$spacing-m;
  }
}



================================================
FILE: js/packages/react-ui/src/components/Button/Button.tsx
================================================
import clsx from "clsx";
import { forwardRef, ReactNode } from "react";

type ButtonVariant = "primary" | "secondary" | "tertiary";
type ButtonSize = "small" | "medium" | "large";

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
  iconLeft?: ReactNode;
  iconRight?: ReactNode;
}

const variantMap: Record<ButtonVariant, string> = {
  primary: "crayon-button-base-primary",
  secondary: "crayon-button-base-secondary",
  tertiary: "crayon-button-base-tertiary",
};

const sizeMap: Record<ButtonSize, string> = {
  small: "crayon-button-base-small",
  medium: "crayon-button-base-medium",
  large: "crayon-button-base-large",
};

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    { children, variant = "primary", size = "medium", iconLeft, iconRight, className, ...props },
    ref,
  ) => {
    return (
      <button
        ref={ref}
        className={clsx("crayon-button-base", variantMap[variant], sizeMap[size], className)}
        {...props}
      >
        {iconLeft}
        {children}
        {iconRight}
      </button>
    );
  },
);

Button.displayName = "Button";



================================================
FILE: js/packages/react-ui/src/components/Button/dependencies.ts
================================================
const dependencies = ["Button"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Button/index.ts
================================================
export * from "./Button";



================================================
FILE: js/packages/react-ui/src/components/Button/stories/Button.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { ArrowRight, Download } from "lucide-react";
import { Button } from "../Button";

type Story = StoryObj<typeof Button>;

// Basic button stories
export const Primary: Story = {
  args: {
    children: "Primary Button",
    variant: "primary",
    size: "medium",
    disabled: false,
  },
  render: (args) => (
    <Button variant={args.variant} size={args.size} disabled={args.disabled}>
      {args.children}
    </Button>
  ),
};

export const Secondary: Story = {
  args: {
    children: "Secondary",
    variant: "secondary",
  },
};

export const Tertiary: Story = {
  name: "Tertiary (Ghost)",
  args: {
    children: "Tertiary",
    variant: "tertiary",
  },
};

// With icons
export const WithLeftIcon: Story = {
  args: {
    children: "Download",
    variant: "primary",
    iconLeft: <Download size={18} />,
  },
  render: (args) => (
    <Button
      variant={args.variant}
      size={args.size}
      disabled={args.disabled}
      iconLeft={args.iconLeft}
    >
      {args.children}
    </Button>
  ),
};

export const WithRightIcon: Story = {
  args: {
    children: "Next",
    variant: "primary",
    iconRight: <ArrowRight size={18} />,
  },
  render: (args) => (
    <Button
      variant={args.variant}
      size={args.size}
      disabled={args.disabled}
      iconRight={args.iconRight}
    >
      {args.children}
    </Button>
  ),
};

const meta: Meta<typeof Button> = {
  title: "Components/Button",
  component: Button,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { Button } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    variant: {
      control: "radio",
      options: ["primary", "secondary", "tertiary"],
      table: {
        category: "Appearance",
      },
    },
    size: {
      control: "radio",
      options: ["small", "medium", "large"],
      table: {
        category: "Appearance",
      },
    },
    disabled: {
      control: "boolean",
      table: {
        category: "State",
      },
    },
    iconLeft: {
      control: false,
      description: "Any react icon component",
      table: {
        category: "Icons",
      },
    },
    iconRight: {
      control: false,
      description: "Any react icon component",
      table: {
        category: "Icons",
      },
    },
  },
  tags: ["autodocs", "!dev"],
};

export default meta;



================================================
FILE: js/packages/react-ui/src/components/Buttons/buttons.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-buttons {
  display: flex;
  width: 100%;
  gap: cssUtils.$spacing-m;
  box-sizing: border-box;

  &-horizontal {
    flex-direction: row;
    flex-wrap: wrap;
  }

  &-vertical {
    flex-direction: column;
  }
}



================================================
FILE: js/packages/react-ui/src/components/Buttons/Buttons.tsx
================================================
import clsx from "clsx";
import { CSSProperties, forwardRef, HTMLAttributes, ReactElement } from "react";
import { ButtonProps } from "../Button";
import { IconButtonProps } from "../IconButton";

type ButtonsVariant = "vertical" | "horizontal";

export interface ButtonsProps extends HTMLAttributes<HTMLDivElement> {
  variant?: ButtonsVariant;
  children:
    | ReactElement<ButtonProps | IconButtonProps>
    | ReactElement<ButtonProps | IconButtonProps>[];
  className?: string;
  style?: CSSProperties;
}

const variantMap: Record<ButtonsVariant, string> = {
  vertical: "crayon-buttons-vertical",
  horizontal: "crayon-buttons-horizontal",
};

export const Buttons = forwardRef<HTMLDivElement, ButtonsProps>((props, ref) => {
  const { className, style, variant = "horizontal", children, ...rest } = props;
  return (
    <div
      ref={ref}
      className={clsx("crayon-buttons", variantMap[variant], className)}
      style={style}
      {...rest}
    >
      {children}
    </div>
  );
});

Buttons.displayName = "Buttons";



================================================
FILE: js/packages/react-ui/src/components/Buttons/dependencies.ts
================================================
const dependencies = ["Buttons"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Buttons/index.ts
================================================
export * from "./Buttons";



================================================
FILE: js/packages/react-ui/src/components/Buttons/stories/buttons.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { ArrowLeft } from "lucide-react";
import { Button } from "../../Button";
import { IconButton } from "../../IconButton";
import { Buttons } from "../Buttons";

const meta: Meta<typeof Buttons> = {
  title: "Components/Buttons",
  component: Buttons,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { Buttons } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  decorators: [
    (Story) => (
      <div style={{ width: "350px" }}>
        <Story />
      </div>
    ),
  ],
  argTypes: {
    variant: {
      control: "radio",
      options: ["horizontal", "vertical"],
      table: {
        category: "Appearance",
        type: { summary: "'horizontal' | 'vertical'" },
        defaultValue: { summary: "'horizontal'" },
      },
    },
    children: {
      control: false,
      description: "The child elements of the footer that accept Button and IconButton components",
      table: {
        category: "Content",
        type: {
          summary:
            "ReactNode[]<ButtonProps | IconButtonProps> | ReactNode<ButtonProps | IconButtonProps>",
        },
      },
    },
    className: {
      control: false,
      description: "Additional CSS class name for custom styling",
      table: {
        category: "Styling",
        type: { summary: "string" },
      },
    },
    style: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: { summary: "CSSProperties" },
      },
    },
  },
  tags: ["!dev", "autodocs"],
};

export default meta;
type Story = StoryObj<typeof Buttons>;

// Basic footer stories
export const ButtonsStory: Story = {
  args: {
    variant: "horizontal",
  },
  render: (args) => (
    <Buttons variant={args.variant}>
      <Button>Cancel</Button>
      <Button>Save</Button>
      <IconButton icon={<ArrowLeft size={16} />} />
    </Buttons>
  ),
};



================================================
FILE: js/packages/react-ui/src/components/Calendar/calendar.scss
================================================
@use "../../cssUtils" as cssUtils;
@forward "./components/calendarHelperComponents.scss";
@forward "./utils/calendarBaseStyle.scss";



================================================
FILE: js/packages/react-ui/src/components/Calendar/Calendar.tsx
================================================
import clsx from "clsx";
import React, { forwardRef, useRef } from "react";
import { DayPicker } from "react-day-picker";
import { useLayoutContext } from "../../context/LayoutContext";
import { useMultipleRefs } from "../../hooks/useMultipleRefs";
import { MonthsDropdown, YearsDropdown } from "./components/helperComponents";
import { getDayPickerStyles } from "./utils/styles";
export type CalendarProps = React.ComponentProps<typeof DayPicker>;

export const Calendar = forwardRef<HTMLDivElement, CalendarProps>(
  ({ className, classNames, ...props }, ref) => {
    const { layout } = useLayoutContext();
    const { DateSingleClasses, DateRangeClasses } = getDayPickerStyles(layout);
    const containerRef = useRef<HTMLDivElement>(null);
    const assignRef = useMultipleRefs(ref, containerRef);

    const commonProps = {
      captionLayout: "dropdown" as const,
      components: {
        MonthsDropdown: (props: any) => (
          <MonthsDropdown {...props} container={containerRef.current} />
        ),
        YearsDropdown: (props: any) => (
          <YearsDropdown {...props} container={containerRef.current} />
        ),
      },
    };

    return (
      <div ref={assignRef} className={clsx("crayon-calendar-container", className)}>
        <DayPicker
          {...commonProps}
          {...props}
          classNames={{
            ...(props.mode === "single" || props.mode === "multiple"
              ? DateSingleClasses
              : DateRangeClasses),
            ...classNames,
          }}
        />
      </div>
    );
  },
);



================================================
FILE: js/packages/react-ui/src/components/Calendar/dependencies.ts
================================================
import IconButtonDeps from "../IconButton/dependencies";
import SelectDeps from "../Select/dependencies";

const dependencies = ["Calendar", ...IconButtonDeps, ...SelectDeps];

export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Calendar/index.ts
================================================
export * from "./Calendar";



================================================
FILE: js/packages/react-ui/src/components/Calendar/components/calendarHelperComponents.scss
================================================
@use "../../../cssUtils" as cssUtils;

.crayon-calendar-select-content-months {
  padding: cssUtils.$spacing-2xs 0;
  background-color: cssUtils.$bg-container;
  box-shadow: none;
}

.crayon-calendar-select-content-years {
  max-height: 295px;
  min-width: 362px;
  padding: cssUtils.$spacing-2xs 0;
  background-color: cssUtils.$bg-container;
  box-shadow: none;
  .crayon-calendar-select-viewport {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 4px;

    &-mobile {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .crayon-calendar-select-item {
    display: flex;
    align-items: center;
    justify-content: center;
    align-self: center;
    justify-self: center;
    border-radius: cssUtils.$rounded-s;
    padding: cssUtils.$spacing-s;

    &:hover {
      background-color: cssUtils.$bg-container-hover;
    }
  }
}



================================================
FILE: js/packages/react-ui/src/components/Calendar/components/helperComponents.tsx
================================================
import * as SelectPrimitive from "@radix-ui/react-select";
import clsx from "clsx";
import debounce from "lodash-es/debounce";
import { DetailedHTMLProps, forwardRef, SelectHTMLAttributes, useEffect, useState } from "react";
import { ClassNames, CustomComponents, DropdownOption } from "react-day-picker";
import "react-day-picker/style.css";
import { Select, SelectItem, SelectTrigger, SelectValue } from "../../Select";
import { getMonthName, getMonthNumber } from "../utils/helperFn";

// this component is overriding the default SelectContent component to allow for a container prop we do not wish to give to the user
const SelectContent = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> & {
    container?: HTMLDivElement | null;
    viewportClassName?: string;
  }
>(({ className, children, position = "popper", viewportClassName, container, ...props }, ref) => (
  <SelectPrimitive.Portal container={container || document.body}>
    <SelectPrimitive.Content
      ref={ref}
      className={clsx("crayon-select-content", className)}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={clsx("crayon-select-viewport", viewportClassName)}
        data-position={position}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));

export const MonthsDropdown = (
  props: {
    classNames: ClassNames;
    components: CustomComponents;
    options?: DropdownOption[];
  } & Omit<
    DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>,
    "children"
  > & {
      container?: HTMLDivElement | null;
    },
) => {
  const {
    className,
    disabled,
    onChange,
    options,
    value,
    key,
    "aria-label": ariaLabel,
    container,
  } = props;

  const [containerWidth, setContainerWidth] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);

  useEffect(() => {
    if (!container) return;

    const targetElement = container.children[0]?.children[0];
    if (!targetElement) return;

    const resizeObserver = new ResizeObserver(
      debounce((entries) => {
        const { width, height } = entries[0]?.contentRect || {};
        setContainerWidth(width || 0);
        setContainerHeight(height || 0);
      }, 100),
    );

    resizeObserver.observe(targetElement);

    return () => {
      resizeObserver.disconnect();
    };
  }, [container]);

  return (
    <Select
      onValueChange={(value) =>
        onChange?.({
          target: { value: getMonthNumber(value) },
        } as any)
      }
      value={getMonthName(Number(value))}
      disabled={disabled}
      key={key}
      aria-label={ariaLabel}
    >
      <SelectTrigger className={className}>
        <SelectValue placeholder={"Select a month"} />
      </SelectTrigger>
      <SelectContent
        container={container}
        className="crayon-calendar-select-content-months"
        sideOffset={12}
        alignOffset={0}
        style={{
          maxHeight: `${containerHeight - 45}px`,
          minWidth: `${containerWidth}px`,
          border: "none",
        }}
      >
        {options?.map((option) => (
          <SelectItem
            key={option.value}
            value={getMonthName(option.value)}
            disabled={option.disabled}
          >
            {option.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};

export const YearsDropdown = (
  props: {
    classNames: ClassNames;
    components: CustomComponents;
    options?: DropdownOption[];
  } & Omit<
    DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>,
    "children"
  > & {
      container?: HTMLDivElement | null;
      botType: "mobile" | "fullscreen" | "tray" | "copilot";
    },
) => {
  const {
    className,
    disabled,
    onChange,
    options,
    value,
    key,
    "aria-label": ariaLabel,
    container,
    botType,
  } = props;

  const [containerWidth, setContainerWidth] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);

  useEffect(() => {
    if (!container) return;

    const targetElement = container.children[0]?.children[0];
    if (!targetElement) return;

    const resizeObserver = new ResizeObserver(
      debounce((entries) => {
        const { width, height } = entries[0]?.contentRect || {};
        setContainerWidth(width || 0);
        setContainerHeight(height || 0);
      }, 100),
    );

    resizeObserver.observe(targetElement);

    return () => {
      resizeObserver.disconnect();
    };
  }, [container]);

  return (
    <Select
      onValueChange={(value) =>
        onChange?.({
          target: { value: Number(value) },
        } as any)
      }
      value={String(value)}
      disabled={disabled}
      key={key}
      aria-label={ariaLabel}
    >
      <SelectTrigger className={className}>
        <SelectValue placeholder={"Select a month"} />
      </SelectTrigger>
      <SelectContent
        container={container}
        className="crayon-calendar-select-content-years"
        viewportClassName={clsx(
          "crayon-calendar-select-viewport",
          botType === "mobile" && "crayon-calendar-select-viewport-mobile",
        )}
        sideOffset={12}
        alignOffset={-95}
        style={{
          minHeight: `${containerHeight - 45}px`,
          maxHeight: `${containerHeight - 45}px`,
          minWidth: `${containerWidth + 10}px`,
          maxWidth: `${containerWidth + 10}px`,
          border: "none",
        }}
      >
        {options?.map((option) => (
          <SelectItem
            key={option.value}
            value={String(option.value)}
            disabled={option.disabled}
            showTick={false}
            className="crayon-calendar-select-item"
          >
            {option.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Calendar/stories/Calendar.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Calendar } from "../Calendar";

const meta: Meta<typeof Calendar> = {
  title: "Components/Calendar",
  component: Calendar,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: `
A flexible \`calendar\` component built on top of [react-day-picker](https://react-day-picker.js.org/).

\`\`\`tsx
import { Calendar } from '@crayon-ui/react-ui';
\`\`\`
`,
      },
    },
  },
  decorators: [
    (Story) => (
      <div
        style={{
          width: "350px",
        }}
      >
        <Story />
      </div>
    ),
  ],
  argTypes: {
    mode: {
      description: "Selection mode for the calendar",
      control: {
        type: "radio",
      },
      options: ["single", "multiple", "range"],
      defaultValue: "single",
      table: {
        defaultValue: { summary: "single" },
      },
    },
  },
  tags: ["autodocs", "!dev"],
};

export default meta;
type Story = StoryObj<typeof Calendar>;

export const SingleDate: Story = {
  args: {
    mode: "single",
  },
};

export const MultipleDate: Story = {
  args: {
    mode: "multiple",
    selected: [new Date(), new Date(Date.now() + 86400000)], // Today and tomorrow
  },
};

export const DateRange: Story = {
  args: {
    mode: "range",
    selected: {
      from: new Date(),
      to: new Date(Date.now() + 86400000 * 7), // Today to 7 days later
    },
  },
};

export const Disabled: Story = {
  args: {
    mode: "single",
    disabled: true,
  },
};

export const WithDisabledDays: Story = {
  args: {
    mode: "single",
    disabled: [
      { from: new Date(), to: new Date(Date.now() + 86400000 * 3) }, // Disable next 3 days
    ],
  },
};



================================================
FILE: js/packages/react-ui/src/components/Calendar/utils/calendarBaseStyle.scss
================================================
@use "../../../cssUtils" as cssUtils;

/* Base styles for all calendar components range or single */
/* ------------------------------------------------------------ */

.crayon-calendar-root {
  @include cssUtils.typography(primary, default);
  background-color: cssUtils.$bg-container;
  padding: cssUtils.$spacing-l;
  width: fit-content;
  height: fit-content;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-radius: cssUtils.$rounded-xl;
  border: 1px solid cssUtils.$stroke-default;
  width: 100%;
}

.crayon-calendar-nav {
  &-mobile {
    gap: cssUtils.$spacing-s;
  }
  &-fullscreen {
    gap: cssUtils.$spacing-m;
  }
  &-tray {
    gap: cssUtils.$spacing-m;
  }
  &-copilot {
    gap: cssUtils.$spacing-m;
  }
}

.crayon-calendar-dropdowns {
  &-mobile {
    gap: cssUtils.$spacing-2xs;
  }
  &-fullscreen {
    gap: cssUtils.$spacing-s;
  }
  &-tray {
    gap: cssUtils.$spacing-s;
  }
  &-copilot {
    gap: cssUtils.$spacing-s;
  }
  &-copilot {
    gap: cssUtils.$spacing-s;
  }
}

.crayon-calendar-month-grid {
  table-layout: fixed;
  width: 100%;
  border-collapse: collapse;
  max-width: 308px;
}

.crayon-calendar-button-next {
  display: none;
}

.crayon-calendar-button-previous {
  display: none;
}

.crayon-calendar-today {
  &[data-today]:not([aria-selected]) {
    background-color: cssUtils.$bg-sunk;
    border-radius: cssUtils.$rounded-m;
  }
}

.crayon-calendar-disabled {
  cursor: not-allowed;
  color: cssUtils.$disabled-text;
}

.crayon-calendar-weekdays {
  color: cssUtils.$primary-text;
}

.crayon-calendar-chevron {
  fill: cssUtils.$bg-brand-el;
}

.crayon-calendar-month {
  color: cssUtils.$primary-text;
}

.crayon-calendar-month-dropdown {
  cursor: pointer;
}

.crayon-calendar-year-dropdown {
  cursor: pointer;
}

.crayon-calendar-footer {
  color: cssUtils.$primary-text;
  @include cssUtils.typography(primary, default);
}

/* Base styles for all calendar components single */
/* ------------------------------------------------------------ */

.crayon-calendar-single-day-button {
  cursor: pointer;
  background: transparent;
  border: 1px solid transparent;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  aspect-ratio: 1/1;
}

.crayon-calendar-single-day {
  width: 100%;
  height: 100%;
  aspect-ratio: 1/1;
}

.crayon-calendar-single-day-selected {
  background: cssUtils.$bg-brand-el;
  color: cssUtils.$brand-text;
  border-radius: cssUtils.$rounded-m;
}

/* Base styles for all calendar components range */
/* ------------------------------------------------------------ */

.crayon-calendar-range-start {
  color: cssUtils.$brand-text;
  background: cssUtils.$bg-brand-el;
  border-top-left-radius: cssUtils.$rounded-m;
  border-bottom-left-radius: cssUtils.$rounded-m;
}

.crayon-calendar-range-middle {
  background: cssUtils.$bg-sunk;
}

.crayon-calendar-range-end {
  color: cssUtils.$brand-text;
  background: cssUtils.$bg-brand-el;
  border-top-right-radius: cssUtils.$rounded-m;
  border-bottom-right-radius: cssUtils.$rounded-m;
}

.crayon-calendar-range-day-button {
  cursor: pointer;
  background: transparent;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid transparent;
  width: 100%;
  height: 100%;
  aspect-ratio: 1/1;
}

.crayon-calendar-range-day {
  width: 100%;
  height: 100%;
  min-height: 100%;
  min-width: 100%;
  aspect-ratio: 1/1;
}



================================================
FILE: js/packages/react-ui/src/components/Calendar/utils/helperFn.tsx
================================================
export const getMonthName = (monthNumber: number): string => {
  switch (monthNumber) {
    case 0:
      return "January";
    case 1:
      return "February";
    case 2:
      return "March";
    case 3:
      return "April";
    case 4:
      return "May";
    case 5:
      return "June";
    case 6:
      return "July";
    case 7:
      return "August";
    case 8:
      return "September";
    case 9:
      return "October";
    case 10:
      return "November";
    case 11:
      return "December";
    default:
      return "Invalid Month";
  }
};

export const getMonthNumber = (monthName: string): number => {
  switch (monthName) {
    case "January":
      return 0;
    case "February":
      return 1;
    case "March":
      return 2;
    case "April":
      return 3;
    case "May":
      return 4;
    case "June":
      return 5;
    case "July":
      return 6;
    case "August":
      return 7;
    case "September":
      return 8;
    case "October":
      return 9;
    case "November":
      return 10;
    case "December":
      return 11;
    default:
      return -1;
  }
};



================================================
FILE: js/packages/react-ui/src/components/Calendar/utils/styles.tsx
================================================
import { ClassNames, getDefaultClassNames } from "react-day-picker";

type BotType = "mobile" | "fullscreen" | "tray" | "copilot";
export const getDayPickerStyles = (botType: BotType) => {
  const defaultClassNames = getDefaultClassNames();

  const botTypeMapNav: Record<BotType, string> = {
    mobile: "crayon-calendar-nav-mobile",
    fullscreen: "crayon-calendar-nav-fullscreen",
    tray: "crayon-calendar-nav-tray",
    copilot: "crayon-calendar-nav-copilot",
  };

  const botTypeMapDropdowns: Record<BotType, string> = {
    mobile: "crayon-calendar-dropdowns-mobile",
    fullscreen: "crayon-calendar-dropdowns-fullscreen",
    tray: "crayon-calendar-dropdowns-tray",
    copilot: "crayon-calendar-dropdowns-copilot",
  };

  const commonClassNames: Partial<ClassNames> = {
    root: `${defaultClassNames.root} crayon-calendar-root`,
    nav: `${defaultClassNames.nav} ${botTypeMapNav[botType]}`,
    dropdowns: `${defaultClassNames.dropdowns} ${botTypeMapDropdowns[botType]}`,
    month_grid: `crayon-calendar-month-grid`,
    button_next: `crayon-calendar-button-next `,
    button_previous: `crayon-calendar-button-previous `,
    today: `crayon-calendar-today`,
    disabled: `crayon-calendar-disabled`,
    weekdays: `crayon-calendar-weekdays`,
    chevron: `crayon-calendar-chevron`,
    month: `crayon-calendar-month`,
    months_dropdown: `crayon-calendar-months-dropdown`,
    years_dropdown: `crayon-calendar-years-dropdown`,
    footer: `crayon-calendar-footer`,
  };

  const DateSingleClasses: Partial<ClassNames> = {
    ...commonClassNames,
    day_button: "crayon-calendar-single-day-button",
    day: "crayon-calendar-single-day",
    selected: "crayon-calendar-single-day-selected",
  };

  const DateRangeClasses: Partial<ClassNames> = {
    ...commonClassNames,
    selected: "",
    range_start: "crayon-calendar-range-start",
    range_middle: "crayon-calendar-range-middle",
    range_end: "crayon-calendar-range-end",
    day_button: "crayon-calendar-range-day-button",
    day: "crayon-calendar-range-day",
  };

  return {
    DateSingleClasses,
    DateRangeClasses,
  };
};



================================================
FILE: js/packages/react-ui/src/components/Callout/callout.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-callout {
  width: 100%;
  display: flex;
  flex-direction: row;
  gap: cssUtils.$spacing-xs;
  padding: cssUtils.$spacing-m;
  border-radius: cssUtils.$rounded-xl;
  box-sizing: border-box;
  &-neutral {
    background-color: cssUtils.$bg-container-hover;
    border: 1px solid cssUtils.$stroke-default;
    color: cssUtils.$primary-text;
    .crayon-callout-content-title {
      color: cssUtils.$primary-text;
    }
  }

  &-info {
    background-color: cssUtils.$bg-info;
    border: 1px solid cssUtils.$stroke-default;
    color: cssUtils.$info-text;
    .crayon-callout-content-title {
      color: cssUtils.$info-text;
    }
  }

  &-warning {
    background-color: cssUtils.$bg-danger;
    border: 1px solid cssUtils.$stroke-default;
    color: cssUtils.$danger-text;
    .crayon-callout-content-title {
      color: cssUtils.$danger-text;
    }
  }

  &-success {
    background-color: cssUtils.$bg-success;
    border: 1px solid cssUtils.$stroke-default;
    color: cssUtils.$success-text;
    .crayon-callout-content-title {
      color: cssUtils.$success-text;
    }
  }

  &-icon {
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: cssUtils.$spacing-3xs;
  }

  &-icon-inner {
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &-content {
    display: flex;
    flex-direction: column;
    gap: cssUtils.$spacing-2xs;
    &-title {
      @include cssUtils.typography(title, default);
      color: cssUtils.$primary-text;
    }

    &-description {
      @include cssUtils.typography(body, default);
      color: cssUtils.$secondary-text;
    }
  }
}



================================================
FILE: js/packages/react-ui/src/components/Callout/Callout.tsx
================================================
import clsx from "clsx";
import React from "react";

type CalloutVariant = "neutral" | "info" | "warning" | "success";

export interface CalloutProps extends Omit<React.HTMLAttributes<HTMLDivElement>, "title"> {
  variant?: CalloutVariant;
  title?: React.ReactNode;
  icon?: React.ReactNode;
  description?: React.ReactNode;
}

const variantMap: Record<CalloutVariant, string> = {
  neutral: "crayon-callout-neutral",
  info: "crayon-callout-info",
  warning: "crayon-callout-warning",
  success: "crayon-callout-success",
};

export const Callout = React.forwardRef<HTMLDivElement, CalloutProps>((props, ref) => {
  const { className, variant = "neutral", title, icon, description, ...rest } = props;

  return (
    <div ref={ref} className={clsx("crayon-callout", variantMap[variant], className)} {...rest}>
      {icon && (
        <div className="crayon-callout-icon">
          <span className="crayon-callout-icon-inner">{icon}</span>
        </div>
      )}
      <div className="crayon-callout-content">
        {title && <span className="crayon-callout-content-title">{title}</span>}
        {description && <span className="crayon-callout-content-description">{description}</span>}
      </div>
    </div>
  );
});



================================================
FILE: js/packages/react-ui/src/components/Callout/dependencies.ts
================================================
const dependencies = ["Callout"];

export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Callout/index.ts
================================================
export * from "./Callout";



================================================
FILE: js/packages/react-ui/src/components/Callout/stories/callout.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Info } from "lucide-react";
import { Callout, CalloutProps } from "../Callout";

const meta: Meta<CalloutProps> = {
  title: "Components/Callout",
  component: Callout,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { Callout } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],
  argTypes: {
    variant: {
      control: "select",
      options: ["neutral", "info", "warning", "success"],
      description: "The visual style variant of the callout",
      table: {
        category: "Appearance",
        type: { summary: "CalloutVariant" },
        defaultValue: { summary: "neutral" },
      },
    },
    title: {
      control: "text",
      description: "The title of the callout",
      table: {
        category: "Content",
        defaultValue: { summary: "Important Information" },
        type: { summary: "React.ReactNode" },
      },
    },
    description: {
      control: "text",
      description: "The description text of the callout",
      table: {
        category: "Content",
        defaultValue: { summary: "This is a neutral callout with some important information." },
        type: { summary: "React.ReactNode" },
      },
    },
    icon: {
      control: false,
      description: "Optional icon to display in the callout",
      table: {
        category: "Content",
        type: { summary: "React.ReactNode" },
      },
    },
  },
} satisfies Meta<typeof Callout>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    title: "Important Information",
    description: "This is a neutral callout with some important information.",
    variant: "neutral",
    icon: <Info width={24} height={24} />,
  },
};



================================================
FILE: js/packages/react-ui/src/components/Card/card.scss
================================================
@use "../../cssUtils.scss" as cssUtils;

.crayon-card {
  display: flex;
  flex-direction: column;
  gap: cssUtils.$spacing-l;
  border: 1px solid transparent;
  box-sizing: border-box;
  color: cssUtils.$primary-text;
  @include cssUtils.typography(body, default);

  // override theme variables so that other crayon components don't depend on chat colors
  // this solves the case where the crayon-card component is used without the crayon-shell-container
  --crayon-primary-text: #{cssUtils.$chat-assistant-response-text};
  --crayon-container-fills: #{cssUtils.$chat-assistant-response-bg};

  &-card {
    padding: cssUtils.$spacing-l;
    border-radius: cssUtils.$rounded-3xl;
    border-color: cssUtils.$stroke-default;
    background-color: cssUtils.$bg-container;
    box-shadow: none;
  }

  &-clear {
    padding: 0px cssUtils.$spacing-l;
    border-radius: cssUtils.$rounded-3xl;
    background-color: transparent;
    box-shadow: none;
  }

  &-sunk {
    padding: cssUtils.$spacing-l;
    border-radius: cssUtils.$rounded-3xl;
    background-color: cssUtils.$bg-sunk;
    border-color: cssUtils.$stroke-default;
    box-shadow: cssUtils.$shadow-m;
  }

  &-standard {
    width: 80%;
  }

  &-full {
    width: 100%;
  }
}



================================================
FILE: js/packages/react-ui/src/components/Card/Card.tsx
================================================
import clsx from "clsx";
import React from "react";

type CardVariant = "clear" | "card" | "sunk";
type CardWidth = "standard" | "full";

export interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: CardVariant;
  width?: CardWidth;
}

const variantMap: Record<CardVariant, string> = {
  clear: "crayon-card-clear",
  card: "crayon-card-card",
  sunk: "crayon-card-sunk",
};

const widthMap: Record<CardWidth, string> = {
  standard: "crayon-card-standard",
  full: "crayon-card-full",
};

export const Card = React.forwardRef<HTMLDivElement, CardProps>((props, ref) => {
  const { className, children, variant = "card", width = "standard", ...rest } = props;

  return (
    <div
      ref={ref}
      className={clsx("crayon-card", className, variantMap[variant], widthMap[width])}
      {...rest}
    >
      {children}
    </div>
  );
});

Card.displayName = "Card";



================================================
FILE: js/packages/react-ui/src/components/Card/dependencies.ts
================================================
const dependencies = ["Card"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Card/index.ts
================================================
export * from "./Card";



================================================
FILE: js/packages/react-ui/src/components/Card/stories/card.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { CardHeader } from "../../CardHeader";
import { FormControl } from "../../FormControl";
import { Input } from "../../Input";
import { Label } from "../../Label";
import { Card } from "../Card";

const meta: Meta<typeof Card> = {
  title: "Components/Card",
  component: Card,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { Card } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    width: {
      control: "radio",
      options: ["standard", "full"],
      description: "Controls the width of the card component",
      table: {
        category: "Appearance",
        defaultValue: { summary: "standard" },
      },
    },
    variant: {
      control: "radio",
      options: ["card", "clear", "sunk"],
      description: "Determines the visual style of the card",

      table: {
        defaultValue: { summary: "card" },
        category: "Appearance",
      },
    },
  },
  tags: ["autodocs", "!dev"],
};

export default meta;
type Story = StoryObj<typeof Card>;

// Basic button stories
export const CardStory: Story = {
  args: {
    width: "standard",
    variant: "card",
  },
  render: (args) => (
    <div style={{ width: "500px" }}>
      <Card variant={args.variant} width={args.width}>
        <CardHeader title="Card Title" subtitle="Card Description" actions={[]} />
        <FormControl>
          <Label htmlFor="username">Username</Label>
          <Input id="username" placeholder="Enter username" />
        </FormControl>
      </Card>
    </div>
  ),
};



================================================
FILE: js/packages/react-ui/src/components/CardHeader/cardHeader.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-header {
  display: flex;
  flex-direction: column;
  gap: cssUtils.$spacing-2xs;
  overflow-wrap: break-word;

  &-top {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;

    &-left {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: cssUtils.$spacing-2xs;
      color: cssUtils.$primary-text;
      @include cssUtils.typography(title, default);

      &-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 16px;
        width: 16px;
      }
    }

    &-right {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: cssUtils.$spacing-2xs;
    }
  }

  &-bottom {
    color: cssUtils.$secondary-text;
    @include cssUtils.typography(body, default);
  }
}



================================================
FILE: js/packages/react-ui/src/components/CardHeader/CardHeader.tsx
================================================
import clsx from "clsx";
import { cloneElement, CSSProperties, forwardRef, ReactElement, ReactNode } from "react";
import { ButtonProps } from "../Button";
import { IconButtonProps } from "../IconButton";

export interface CardHeaderProps {
  icon?: ReactNode;
  title?: ReactNode;
  subtitle?: ReactNode;
  actions?:
    | ReactElement<ButtonProps | IconButtonProps>
    | ReactElement<ButtonProps | IconButtonProps>[];
  className?: string;
  styles?: CSSProperties;
}

export const CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>((props, ref) => {
  const { icon, title, subtitle, actions, className, styles, ...rest } = props;
  return (
    <div ref={ref} className={clsx("crayon-header", className)} style={styles} {...rest}>
      <div className="crayon-header-top">
        <div className="crayon-header-top-left">
          {icon && <span className="crayon-header-top-left-icon">{icon}</span>}
          {title}
        </div>
        <div className="crayon-header-top-right">
          {Array.isArray(actions)
            ? actions.map((action, index) => cloneElement(action, { key: index }))
            : actions}
        </div>
      </div>
      <div className="crayon-header-bottom">{subtitle}</div>
    </div>
  );
});

CardHeader.displayName = "CardHeader";



================================================
FILE: js/packages/react-ui/src/components/CardHeader/dependencies.ts
================================================
const dependencies = ["CardHeader"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/CardHeader/index.ts
================================================
export * from "./CardHeader";



================================================
FILE: js/packages/react-ui/src/components/CardHeader/stories/cardHeader.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { ArrowRight, Download } from "lucide-react";
import { IconButton } from "../../IconButton";
import { CardHeader } from "../CardHeader";

const meta: Meta<typeof CardHeader> = {
  title: "Components/CardHeader",
  component: CardHeader,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { CardHeader } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  decorators: [
    (Story) => (
      <div style={{ width: "350px" }}>
        <Story />
      </div>
    ),
  ],
  argTypes: {
    icon: {
      control: false,
      description: "The icon to display in the header beside the title",
      table: {
        category: "Content",
        type: { summary: "ReactNode" },
      },
    },
    title: {
      control: "text",
      description: "The title to display in the header",
      table: {
        category: "Content",
        type: { summary: "ReactNode" },
      },
    },
    subtitle: {
      control: "text",
      description: "The subtitle to display in the header",
      table: {
        category: "Content",
        type: { summary: "ReactNode" },
      },
    },
    actions: {
      control: false,
      description: "The actions to display in the header",
      table: {
        category: "Content",
        type: { summary: "ReactElement<ButtonProps | IconButtonProps>[]" },
      },
    },
    className: {
      control: false,
      description: "The class name to apply to the header",
      table: {
        category: "Styling",
        type: { summary: "string" },
      },
    },
    styles: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: { summary: "CSSProperties" },
      },
    },
  },
  tags: ["autodocs", "!dev"],
};

export default meta;
type Story = StoryObj<typeof CardHeader>;

// Basic button stories
export const HeaderStory: Story = {
  args: {
    icon: <ArrowRight />,
    title: "Thesys Crayon",
    subtitle: "Crayon UI is a set of React components.",
    actions: [<IconButton variant="tertiary" size="small" icon={<Download />} />],
  },
  render: (args) => <CardHeader {...args} />,
};

export const HeaderStoryWithMultipleActions: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "Passing multiple actions to the header. The actions are displayed in the right corner of the header.",
      },
    },
  },
  args: {
    icon: <ArrowRight />,
    title: "Thesys Crayon",
    subtitle: "Crayon UI is a set of React components.",
    actions: [
      <IconButton variant="tertiary" size="small" icon={<Download />} />,
      <IconButton variant="tertiary" size="small" icon={<Download />} />,
    ],
  },
  render: (args) => <CardHeader {...args} />,
};



================================================
FILE: js/packages/react-ui/src/components/Carousel/carousel.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-carousel {
  position: relative;
  display: flex;

  &-content {
    position: relative;
    display: flex;
    flex-direction: row;
    gap: cssUtils.$spacing-m;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    -ms-overflow-x: hidden;
    scrollbar-width: none;

    &-wrapper {
      display: flex;
      gap: cssUtils.$spacing-m;
    }

    &::-webkit-scrollbar {
      display: none;
    }

    & > * {
      box-sizing: border-box;
      scroll-snap-align: start;
    }
  }

  &-item {
    @include cssUtils.typography(body, default);
    display: flex;
    flex-direction: column;
    gap: cssUtils.$spacing-s;
    min-width: 200px;
    max-width: 200px;
    border-radius: cssUtils.$rounded-m;
    background-color: cssUtils.$bg-container;
    padding: cssUtils.$spacing-m;
    border: 1px solid cssUtils.$stroke-default;
  }

  &-button {
    position: absolute;
    top: 50%;
    z-index: 10;
    transform: translateY(-50%);

    &-left {
      left: 0;
    }

    &-right {
      right: 0;
    }
  }
}



================================================
FILE: js/packages/react-ui/src/components/Carousel/Carousel.tsx
================================================
import clsx from "clsx";
import { createContext, forwardRef, useContext, useEffect, useRef, useState } from "react";
import { IconButton } from "../IconButton";

interface CarouselContextType {
  scrollDivRef: React.RefObject<HTMLDivElement | null>;
  scroll: (direction: "left" | "right") => void;
  itemsToScroll: number;
  noSnap?: boolean;
  showButtons?: boolean;
}

const CarouselContext = createContext<CarouselContextType | null>(null);

const useCarousel = () => {
  const context = useContext(CarouselContext);
  if (!context) throw new Error("useCarousel must be used within a Carousel");
  return context;
};

export interface CarouselProps extends React.HTMLAttributes<HTMLDivElement> {
  itemsToScroll?: number;
  noSnap?: boolean;
  showButtons?: boolean;
}

export const Carousel = forwardRef<HTMLDivElement, CarouselProps>(
  ({ itemsToScroll = 1, noSnap, showButtons = true, className, children, ...props }, ref) => {
    const scrollDivRef = useRef<HTMLDivElement>(null);

    const scroll = (direction: "left" | "right") => {
      if (scrollDivRef.current) {
        const container = scrollDivRef.current;
        let children = Array.from(container.children);

        const spacingEl = children.splice(0, 1)[0] as HTMLElement;

        if (noSnap) {
          children = Array.from(children[0]!.children);
        }

        const visibleIndex = children.findIndex((child) => {
          const rect = child.getBoundingClientRect();
          return rect.left >= container.getBoundingClientRect().left;
        });

        const targetIndex =
          direction === "left"
            ? Math.max(0, visibleIndex - itemsToScroll)
            : Math.min(children.length - 1, visibleIndex + itemsToScroll);

        const targetElement = (
          targetIndex === 0 ? spacingEl : children[targetIndex]
        ) as HTMLElement;

        if (targetElement) {
          container.scrollTo({
            left: targetElement.offsetLeft,
            behavior: "smooth",
          });
        }
      }
    };

    return (
      <CarouselContext.Provider
        value={{ scrollDivRef, scroll, itemsToScroll, noSnap, showButtons }}
      >
        <div className={clsx("crayon-carousel", className)} ref={ref} {...props}>
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);

export const CarouselContent = forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, children, ...props }, _ref) => {
    const { scrollDivRef, noSnap } = useCarousel();

    const content = noSnap ? (
      <div className="crayon-carousel-content-wrapper">{children}</div>
    ) : (
      children
    );

    return (
      <div ref={scrollDivRef} className={clsx("crayon-carousel-content", className)} {...props}>
        <div />
        {content}
      </div>
    );
  },
);

export const CarouselItem = forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, children, ...props }, ref) => (
    <div ref={ref} className={clsx("crayon-carousel-item", className)} {...props}>
      {children}
    </div>
  ),
);

export const CarouselPrevious = forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof IconButton>
>(({ className, style, ...props }, ref) => {
  const { scrollDivRef, scroll, showButtons } = useCarousel();
  const [show, setShow] = useState(true);

  useEffect(() => {
    if (!scrollDivRef.current) return;

    const container = scrollDivRef.current;
    const shouldShow = () => container.scrollLeft > 0;

    setShow(shouldShow());

    const handleScroll = () => {
      setShow(shouldShow());
    };

    const resizeObserver = new ResizeObserver(handleScroll);
    resizeObserver.observe(container);

    container.addEventListener("scroll", handleScroll);

    return () => {
      container.removeEventListener("scroll", handleScroll);
      resizeObserver.disconnect();
    };
  }, [scrollDivRef]);

  if (!show || !showButtons) return null;

  return (
    <div className={clsx("crayon-carousel-button crayon-carousel-button-left", className)}>
      <IconButton
        ref={ref}
        shape="circle"
        variant="secondary"
        size="small"
        onClick={() => scroll("left")}
        style={style}
        {...props}
      />
    </div>
  );
});

export const CarouselNext = forwardRef<HTMLButtonElement, React.ComponentProps<typeof IconButton>>(
  ({ className, style, ...props }, ref) => {
    const { scrollDivRef, scroll, showButtons } = useCarousel();
    const [show, setShow] = useState(true);

    useEffect(() => {
      if (!scrollDivRef.current) return;

      const container = scrollDivRef.current;
      const shouldShow = () => container.scrollLeft + container.offsetWidth < container.scrollWidth;

      setShow(shouldShow());

      const handleScroll = () => {
        setShow(shouldShow());
      };

      const resizeObserver = new ResizeObserver(handleScroll);
      resizeObserver.observe(container);

      container.addEventListener("scroll", handleScroll);

      return () => {
        container.removeEventListener("scroll", handleScroll);
        resizeObserver.disconnect();
      };
    }, [scrollDivRef]);

    if (!show || !showButtons) return null;

    return (
      <div className={clsx("crayon-carousel-button crayon-carousel-button-right", className)}>
        <IconButton
          ref={ref}
          shape="circle"
          variant="secondary"
          size="small"
          onClick={() => scroll("right")}
          style={style}
          {...props}
        />
      </div>
    );
  },
);



================================================
FILE: js/packages/react-ui/src/components/Carousel/dependencies.ts
================================================
const dependencies = ["Carousel"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Carousel/index.ts
================================================
export * from "./Carousel";



================================================
FILE: js/packages/react-ui/src/components/Carousel/stories/carousel.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import {
  Building2,
  Camera,
  ChevronLeft,
  ChevronRight,
  Cpu,
  Dog,
  Music,
  Palette,
  Plane,
  Shirt,
  Trophy,
  UtensilsCrossed,
} from "lucide-react";
import { CardHeader } from "../../CardHeader";
import { IconButton } from "../../IconButton";
import { Image } from "../../Image";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "../Carousel";
import "../carousel.scss";

const meta: Meta<typeof Carousel> = {
  title: "Components/Carousel",
  component: Carousel,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "```tsx\nimport { Carousel,CarouselContent,CarouselItem,CarouselNext,CarouselPrevious } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  decorators: [
    (Story) => (
      <div style={{ width: "100%", maxWidth: "28rem" }}>
        <Story />
      </div>
    ),
  ],
  argTypes: {
    itemsToScroll: {
      control: "number",
      description: "Number of items to scroll when clicking navigation buttons",
      table: {
        category: "Behavior",
        type: { summary: "number" },
        defaultValue: { summary: "1" },
      },
    },
    noSnap: {
      control: "boolean",
      description: "Whether to disable snap scrolling",
      table: {
        category: "Behavior",
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
      },
    },
    showButtons: {
      control: "boolean",
      description: "Whether to show the navigation buttons",
      table: {
        category: "Appearance",
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
      },
    },
    children: {
      control: false,
      description: "The carousel content and navigation buttons",
      table: {
        category: "Content",
        type: { summary: "ReactNode" },
      },
    },
    className: {
      control: false,
      description: "Additional CSS class name for custom styling",
      table: {
        category: "Styling",
        type: { summary: "string" },
      },
    },
    style: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: { summary: "CSSProperties" },
      },
    },
  },
  tags: ["autodocs", "!dev"],
};

export default meta;
type Story = StoryObj<typeof Carousel>;

const items = [
  {
    title: "Nature",
    subtitle: "Beautiful landscapes",
    icon: <Camera />,
    imageUrl:
      "https://plus.unsplash.com/premium_photo-1719943510748-4b4354fbcf56?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Architecture",
    subtitle: "Modern buildings",
    icon: <Building2 />,
    imageUrl:
      "https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Technology",
    subtitle: "Digital innovation",
    icon: <Cpu />,
    imageUrl:
      "https://plus.unsplash.com/premium_photo-1663050756824-165ee7eafdac?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Art",
    subtitle: "Creative expressions",
    icon: <Palette />,
    imageUrl:
      "https://images.unsplash.com/photo-1550532422-378e93ec379c?q=80&w=3024&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Travel",
    subtitle: "World exploration",
    icon: <Plane />,
    imageUrl:
      "https://images.unsplash.com/photo-1504598318550-17eba1008a68?q=80&w=2848&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Food",
    subtitle: "Culinary delights",
    icon: <UtensilsCrossed />,
    imageUrl:
      "https://plus.unsplash.com/premium_photo-1673108852141-e8c3c22a4a22?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Sports",
    subtitle: "Athletic moments",
    icon: <Trophy />,
    imageUrl:
      "https://images.unsplash.com/photo-1471295253337-3ceaaedca402?q=80&w=2992&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Wildlife",
    subtitle: "Animal kingdom",
    icon: <Dog />,
    imageUrl:
      "https://images.unsplash.com/photo-1600521605615-a8d3a23d8262?q=80&w=3874&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Fashion",
    subtitle: "Style trends",
    icon: <Shirt />,
    imageUrl:
      "https://images.unsplash.com/photo-1521335629791-ce4aec67dd15?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    title: "Music",
    subtitle: "Sonic experiences",
    icon: <Music />,
    imageUrl:
      "https://images.unsplash.com/photo-1511379938547-c1f69419868d?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
];

export const Default: Story = {
  args: {
    itemsToScroll: 1,
    noSnap: false,
    showButtons: true,
  },
  parameters: {
    docs: {
      description: {
        story: "Default carousel configuration with single item scrolling and navigation buttons.",
      },
    },
  },
  render: ({ itemsToScroll, noSnap, showButtons }) => {
    const repeatedItems = Array.from({ length: items.length }, (_, index) => ({
      ...items[index % items.length],
      id: `item-${index + 1}`,
    }));

    return (
      <Carousel itemsToScroll={itemsToScroll} noSnap={noSnap} showButtons={showButtons}>
        <CarouselContent>
          {repeatedItems.map((item) => (
            <CarouselItem key={item.id}>
              <CardHeader
                title={item.title}
                subtitle={item.subtitle}
                actions={[<IconButton variant="tertiary" size="small" icon={item.icon} />]}
              />
              <Image src={item.imageUrl ?? ""} alt={`${item.title} image`} scale="fill" />
            </CarouselItem>
          ))}
        </CarouselContent>
        <CarouselPrevious icon={<ChevronLeft />} />
        <CarouselNext icon={<ChevronRight />} />
      </Carousel>
    );
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/cartesianGrid.tsx
================================================
import { CartesianGrid } from "recharts";

export const cartesianGrid = () => (
  <CartesianGrid
    vertical={false}
    fillOpacity={1}
    strokeOpacity={1}
    strokeWidth={2}
    strokeDasharray="6"
    strokeLinecap="round"
    strokeLinejoin="round"
    stroke="currentColor"
    className="crayon-chart-cartesian-grid"
  />
);



================================================
FILE: js/packages/react-ui/src/components/Charts/charts.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-chart {
  // Container styles
  &-container {
    display: flex;
    aspect-ratio: 1/1;
    justify-content: center;
    font-size: 12px;
    line-height: 16px;

    // Text and fills
    .recharts-cartesian-axis-tick text {
      fill: cssUtils.$primary-text;
    }

    .recharts-radial-bar-background-sector {
      fill: cssUtils.$bg-fill;
    }

    .recharts-rectangle.recharts-tooltip-cursor {
      fill: cssUtils.$bg-fill;
    }

    // Strokes and borders
    .recharts-cartesian-grid line[stroke="#ccc"],
    .recharts-curve.recharts-tooltip-cursor,
    .recharts-polar-grid[stroke="#ccc"],
    .recharts-reference-line[stroke="#ccc"] {
      stroke: cssUtils.$stroke-default;
    }

    // Transparency settings
    .recharts-dot[stroke="#fff"],
    .recharts-sector[stroke="#fff"] {
      stroke: transparent;
    }

    // Outline resets
    .recharts-layer,
    .recharts-sector,
    .recharts-surface {
      outline: none;
    }
  }

  // Tooltip styles
  &-tooltip {
    display: grid;
    align-items: start;
    min-width: 128px;
    gap: cssUtils.$spacing-xs;
    padding: cssUtils.$spacing-xs;
    color: cssUtils.$primary-text;
    @include cssUtils.typography(label, default);
    border-radius: cssUtils.$rounded-s;
    border: 1px solid cssUtils.$stroke-default;
    background-color: cssUtils.$bg-container;
    box-shadow: cssUtils.$shadow-s;
    text-transform: capitalize;

    &-label {
      @include cssUtils.typography(label, default);
    }

    &-label-heavy {
      @include cssUtils.typography(label, heavy);
    }

    &-content {
      display: grid;
      align-items: start;
      min-width: 128px;
      gap: cssUtils.$spacing-xs;
      padding: cssUtils.$spacing-xs;
      color: cssUtils.$primary-text;
      @include cssUtils.typography(label, default);
      border-radius: cssUtils.$rounded-s;
      border: 1px solid cssUtils.$stroke-default;
      background-color: cssUtils.$bg-container;
      box-shadow: cssUtils.$shadow-s;
      text-transform: capitalize;

      &-item {
        display: flex;
        width: 100%;
        flex-wrap: wrap;
        gap: cssUtils.$spacing-xs;
        align-items: stretch;
        &--dot {
          align-items: center;
        }

        svg {
          height: 10px;
          width: 10px;
          color: cssUtils.$primary-text;
        }
      }
      & &-indicator {
        flex-shrink: 0;
        border-radius: cssUtils.$rounded-3xs;

        &--dot {
          height: 10px;
          width: 10px;
          background-color: var(--color-bg);
          border-color: var(--color-border);
        }

        &--line {
          width: 4px;
          height: 100%;
          background-color: var(--color-bg);
          border-color: var(--color-border);
        }

        &--dashed {
          width: 0;
          border: 1.5px dashed var(--color-border);
          background-color: transparent;
        }

        &--nested-dashed {
          margin: cssUtils.$spacing-3xs 0;
        }
      }

      &-value-wrapper {
        display: flex;
        flex: 1;
        justify-content: space-between;
        line-height: 1;

        &--nested {
          align-items: flex-end;
        }

        &--standard {
          align-items: center;
        }
      }

      &-label {
        display: grid;
        gap: cssUtils.$spacing-xs;
        color: cssUtils.$primary-text;
        @include cssUtils.typography(label, default);
      }

      &-value {
        font-variant-numeric: tabular-nums;
        color: cssUtils.$primary-text;
        @include cssUtils.typography(label, default);

        &--percentage {
          padding-left: cssUtils.$spacing-s;
        }
      }
    }
  }

  // Legend styles
  &-legend {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
    text-transform: capitalize;
    flex-wrap: wrap;

    &--top {
      padding-bottom: cssUtils.$spacing-s;
    }

    &--bottom {
      padding-top: cssUtils.$spacing-m;
    }

    &-item {
      display: flex;
      align-items: center;
      gap: cssUtils.$spacing-xs;

      svg {
        height: 12px;
        width: 12px;
        color: cssUtils.$primary-text;
      }

      &-indicator {
        height: 8px;
        width: 8px;
        flex-shrink: 0;
        border-radius: cssUtils.$rounded-3xs;
        background-color: var(--color-bg);
      }

      &-label {
        @include cssUtils.typography(label, heavy);
        max-width: 64px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        color: cssUtils.$primary-text;
      }
    }
  }
}

.crayon-chart-cartesian-grid {
  stroke: cssUtils.$stroke-default;
}

.crayon-chart-polar-grid {
  stroke: cssUtils.$stroke-default;
}

.crayon-chart-label-list {
  fill: cssUtils.$secondary-text;
}

//Pie Chart styles

.crayon-pie-chart {
  &-container {
    margin-left: auto;
    margin-right: auto;

    &-fullscreen {
      min-height: 400px;
      width: 100%;
    }

    &-mobile {
      min-height: 300px;
      width: 100%;
    }

    &-tray {
      min-height: 350px;
      width: 100%;
    }

    &-copilot {
      min-height: 350px;
      width: 100%;
    }
  }
}

.crayon-pie-chart-label {
  fill: cssUtils.$secondary-text;
  padding: 0;
}

.crayon-chart-axis-label {
  fill: cssUtils.$primary-text;
  @include cssUtils.typography(label, default);
  text-anchor: middle;
}



================================================
FILE: js/packages/react-ui/src/components/Charts/Charts.tsx
================================================
import clsx from "clsx";
import { uniqueId } from "lodash-es";
import { ComponentProps, createContext, forwardRef, useContext, useId, useMemo } from "react";
import * as RechartsPrimitive from "recharts";

/**
 * @module Charts
 * A collection of chart components built on top of Recharts with enhanced styling and theming capabilities.
 */

/**
 * Available themes for chart customization
 * @constant
 * @type {Record<'light' | 'dark', string>}
 */
const THEMES = { light: "", dark: ".dark" } as const;

/**
 * Configuration type for chart elements
 */
export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

/**
 * Context props for chart configuration
 */
type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = createContext<ChartContextProps | null>(null);

/**
 * Hook to access chart context
 * @throws Error if used outside of ChartContainer
 */
function useChart() {
  const context = useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

export function keyTransform(key: string) {
  return key.replaceAll(/\s/g, "-");
}

/**
 * Component that generates theme-specific styles for chart elements
 */
const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
    ${prefix} [data-chart=${id}] {
    ${colorConfig
      .map(([key, itemConfig]) => {
        const transformedKey = keyTransform(key);
        const color =
          itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;
        return color ? `  --color-${transformedKey}: ${color};` : null;
      })
      .filter(Boolean)
      .join("\n")}
    }
    `,
          )
          .join("\n"),
      }}
    />
  );
};

/**
 * Container component for charts that provides configuration context and styling
 */
const ChartContainer = forwardRef<
  HTMLDivElement,
  ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={clsx("crayon-chart-container", className)}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

/**
 * Re-exported Tooltip component from Recharts
 */
const ChartTooltip = RechartsPrimitive.Tooltip;

/**
 * Custom tooltip content component with enhanced styling and formatting
 */
const ChartTooltipContent = forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
      showPercentage?: boolean;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
      showPercentage = false,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey ?? item?.dataKey ?? item?.name ?? "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string" ? config[label]?.label || label : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={clsx("crayon-chart-tooltip-label-heavy", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={clsx("crayon-chart-tooltip-label", labelClassName)}>{value}</div>;
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div ref={ref} className={clsx("crayon-chart-tooltip", className)}>
        {!nestLabel && tooltipLabel}
        <div className="crayon-chart-tooltip-content">
          {payload.map((item, index) => {
            const key = `${nameKey ?? item.name ?? item.dataKey ?? "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = (color ?? item.payload.fill) || item.color;

            return (
              <div
                key={item.dataKey}
                className={clsx(
                  "crayon-chart-tooltip-content-item",
                  indicator === "dot" && "crayon-chart-tooltip-content-item--dot",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={clsx(
                            "crayon-chart-tooltip-content-indicator",
                            `crayon-chart-tooltip-content-indicator--${indicator}`,
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={clsx(
                        "crayon-chart-tooltip-content-value-wrapper",
                        nestLabel
                          ? "crayon-chart-tooltip-content-value-wrapper--nested"
                          : "crayon-chart-tooltip-content-value-wrapper--standard",
                      )}
                    >
                      <div className="crayon-chart-tooltip-content-label">
                        {nestLabel && tooltipLabel}
                        <span>{itemConfig?.label || item.name}</span>
                      </div>
                      {item.value !== undefined && (
                        <span
                          className={clsx(
                            "crayon-chart-tooltip-content-value",
                            showPercentage && "percentage",
                          )}
                        >
                          {item.value.toLocaleString()}
                          {showPercentage ? "%" : ""}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

/**
 * Re-exported Legend component from Recharts
 */
const ChartLegend = RechartsPrimitive.Legend;

/**
 * Custom legend content component with enhanced styling
 */
const ChartLegendContent = forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
  const { config } = useChart();

  const payloadWithKeys = useMemo(
    () =>
      payload?.map((item) => ({
        ...item,
        uniqueKey: uniqueId(`chart-legend-${item.dataKey || item.value || ""}-`),
      })),
    [payload],
  );

  if (!payload?.length) {
    return null;
  }

  return (
    <div
      ref={ref}
      className={clsx("crayon-chart-legend", `crayon-chart-legend--${verticalAlign}`, className)}
    >
      {payloadWithKeys?.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`;
        const itemConfig = getPayloadConfigFromPayload(config, item, key);

        return (
          <div key={item.uniqueKey} className="crayon-chart-legend-item">
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="crayon-chart-legend-item-indicator"
                style={{ backgroundColor: item.color }}
              />
            )}
            <span className="crayon-chart-legend-item-label">{itemConfig?.label}</span>
          </div>
        );
      })}
    </div>
  );
});
ChartLegendContent.displayName = "ChartLegend";

/**
 * Helper function to extract configuration for a chart element from a payload
 */
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload && typeof payload.payload === "object" && payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (key in payload && typeof payload[key as keyof typeof payload] === "string") {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;
  }

  return configLabelKey in config ? config[configLabelKey] : config[key];
}

export {
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
  ChartTooltip,
  ChartTooltipContent,
};



================================================
FILE: js/packages/react-ui/src/components/Charts/dependencies.ts
================================================
const dependencies = ["Charts"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Charts/index.ts
================================================
export * from "./AreaChart";
export * from "./BarChart";
export * from "./LineChart";
export * from "./PieChart";
export * from "./RadarChart";
export * from "./RadialChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/AreaChart/AreaChart.tsx
================================================
import React from "react";
import { Area, LabelList, AreaChart as RechartsAreaChart, XAxis, YAxis } from "recharts";
import { useLayoutContext } from "../../../context/LayoutContext";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
  keyTransform,
} from "../Charts";
import { cartesianGrid } from "../cartesianGrid";
import { getDistributedColors, getPalette } from "../utils/PalletUtils";

export type AreaChartData = Array<Record<string, string | number>>;

export interface AreaChartProps<T extends AreaChartData> {
  data: T;
  categoryKey: keyof T[number];
  theme?: "ocean" | "orchid" | "emerald" | "sunset" | "spectrum" | "vivid";
  variant?: "linear" | "natural" | "step";
  grid?: boolean;
  label?: boolean;
  legend?: boolean;
  opacity?: number;
  icons?: Partial<Record<keyof T[number], React.ComponentType>>;
  isAnimationActive?: boolean;
  showYAxis?: boolean;
  xAxisLabel?: React.ReactNode;
  yAxisLabel?: React.ReactNode;
}

export const AreaChart = <T extends AreaChartData>({
  data,
  categoryKey,
  theme = "ocean",
  variant = "natural",
  grid = true,
  label = true,
  legend = true,
  opacity = 0.5,
  icons = {},
  isAnimationActive = true,
  showYAxis = false,
  xAxisLabel,
  yAxisLabel,
}: AreaChartProps<T>) => {
  // excluding the categoryKey
  const dataKeys = Object.keys(data[0] || {}).filter((key) => key !== categoryKey);

  const palette = getPalette(theme);
  const colors = getDistributedColors(palette, dataKeys.length);
  const { layout } = useLayoutContext();

  // Create Config
  const chartConfig: ChartConfig = dataKeys.reduce(
    (config, key, index) => ({
      ...config,
      [key]: {
        label: key,
        icon: icons[key],
        color: colors[index],
      },
    }),
    {},
  );

  const getTickFormatter = (data: T) => {
    const dataLength = data.length;
    const maxLengthMap = {
      mobile: {
        default: 5,
        10: 4,
        11: 4,
      },
      tray: {
        default: 5,
        8: 4,
        9: 4,
        10: 4,
        11: 4,
      },
      copilot: {
        default: 5,
        8: 4,
        9: 4,
        10: 4,
        11: 4,
      },
      fullscreen: {
        default: 5,
        11: 4,
      },
    };

    const layoutConfig =
      maxLengthMap[layout as keyof typeof maxLengthMap] || maxLengthMap.fullscreen;

    const maxLength =
      dataLength >= 11
        ? 4
        : layoutConfig[dataLength as keyof typeof layoutConfig] || layoutConfig.default;

    return (value: string) => {
      if (value.length > maxLength) {
        return `${value.slice(0, maxLength)}...`;
      }
      return value;
    };
  };
  const getAxisAngle = (data: T) => {
    const angleConfig = {
      mobile: {
        default: 0,
        ranges: [
          { min: 6, max: 9, angle: -45 },
          { min: 10, max: 10, angle: -60 },
          { min: 11, max: Infinity, angle: -75 },
        ],
      },
      tray: {
        default: 0,
        ranges: [{ min: 8, max: Infinity, angle: -45 }],
      },
      copilot: {
        default: 0,
        ranges: [{ min: 8, max: Infinity, angle: -45 }],
      },
      fullscreen: {
        default: 0,
        ranges: [{ min: 12, max: Infinity, angle: -45 }],
      },
    };

    const layoutConfig = angleConfig[layout as keyof typeof angleConfig] || angleConfig.fullscreen;
    const dataLength = data.length;

    const matchRange = layoutConfig.ranges.find(
      (range) => dataLength >= range.min && dataLength <= range.max,
    );

    return matchRange?.angle ?? layoutConfig.default;
  };
  const getTickMargin = (data: T) => {
    return data.length <= 6 ? 10 : 15;
  };

  return (
    <ChartContainer config={chartConfig}>
      <RechartsAreaChart
        accessibilityLayer
        data={data}
        margin={{
          top: label ? 20 : 10,
          left: showYAxis ? 0 : 12,
          right: 12,
        }}
      >
        {grid && cartesianGrid()}
        <XAxis
          dataKey={categoryKey as string}
          tickLine={false}
          tickMargin={getTickMargin(data)}
          axisLine={false}
          angle={getAxisAngle(data)}
          textAnchor="middle"
          tickFormatter={getTickFormatter(data)}
          interval="preserveStartEnd"
          label={{
            value: xAxisLabel,
            position: "insideBottom",
            offset: -10,
            className: "crayon-chart-axis-label",
          }}
        />
        {showYAxis && (
          <YAxis
            label={{
              value: yAxisLabel,
              position: "insideLeft",
              angle: -90,
              className: "crayon-chart-axis-label",
            }}
          />
        )}

        <ChartTooltip content={<ChartTooltipContent indicator="dot" />} />
        {dataKeys.map((key) => {
          const transformedKey = keyTransform(key);
          const color = `var(--color-${transformedKey})`;
          if (label) {
            return (
              <Area
                key={key}
                dataKey={key}
                type={variant}
                stroke={color}
                fill={color}
                fillOpacity={opacity}
                stackId="a"
                dot={{
                  fill: color,
                }}
                activeDot={{
                  r: 6,
                }}
                isAnimationActive={isAnimationActive}
              >
                {label && (
                  <LabelList
                    position="top"
                    offset={12}
                    className="crayon-chart-label-list"
                    fontSize={12}
                  />
                )}
              </Area>
            );
          }
          return (
            <Area
              key={key}
              dataKey={key}
              type={variant}
              stroke={color}
              fill={color}
              fillOpacity={opacity}
              stackId="a"
              dot={{
                fill: color,
              }}
              activeDot={{
                r: 6,
              }}
            />
          );
        })}
        {legend && <ChartLegend content={<ChartLegendContent />} />}
      </RechartsAreaChart>
    </ChartContainer>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Charts/AreaChart/index.ts
================================================
export * from "./AreaChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/AreaChart/stories/areaChart.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Monitor, TabletSmartphone } from "lucide-react";
import { Card } from "../../../Card";
import { AreaChart, AreaChartProps } from "../AreaChart";

const areaChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

const icons = {
  desktop: Monitor,
  mobile: TabletSmartphone,
} as const;

const meta: Meta<AreaChartProps<typeof areaChartData>> = {
  title: "Components/Charts/AreaChart",
  component: AreaChart,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { AreaChart } from '@crayon-ui/react-ui/Charts/AreaChart';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],
  argTypes: {
    data: {
      description:
        "An array of data objects where each object represents a data point. Each object should have a category field (e.g., month) and one or more numeric values for the areas to be plotted.",
      control: false,
      table: {
        type: { summary: "Array<Record<string, string | number>>" },
        defaultValue: { summary: "[]" },
        category: "Data",
      },
    },
    categoryKey: {
      description:
        "The key from your data object to be used as the x-axis categories (e.g., 'month', 'year', 'date')",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
    theme: {
      description:
        "The color palette theme for the chart. Each theme provides a different set of colors for the areas.",
      control: "select",
      options: ["ocean", "orchid", "emerald", "sunset", "spectrum", "vivid"],
      table: {
        defaultValue: { summary: "ocean" },
        category: "Appearance",
      },
    },
    icons: {
      description:
        "An object that maps data keys to icon components. These icons will appear in the legend next to their corresponding data series.",
      control: false,
      table: {
        type: { summary: "Record<string, React.ComponentType>" },
        defaultValue: { summary: "{}" },
        category: "Appearance",
      },
    },
    variant: {
      description:
        "The interpolation method used to create the area curves. 'linear' creates straight lines between points, 'natural' creates smooth curves, and 'step' creates a stepped area.",
      control: "radio",
      options: ["linear", "natural", "step"],
      table: {
        defaultValue: { summary: "natural" },
        category: "Appearance",
      },
    },
    opacity: {
      description:
        "The opacity of the filled area beneath each line (0 = fully transparent, 1 = fully opaque)",
      control: false,
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "0.5" },
        category: "Appearance",
      },
    },
    grid: {
      description: "Whether to display the background grid lines in the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    label: {
      description: "Whether to display data point labels above each point on the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    legend: {
      description:
        "Whether to display the chart legend showing the data series names and their corresponding colors/icons",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    isAnimationActive: {
      description: "Whether to animate the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    showYAxis: {
      description: "Whether to display the y-axis",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
        category: "Display",
      },
    },
    xAxisLabel: {
      description: "The label for the x-axis",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
    yAxisLabel: {
      description: "The label for the y-axis",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
  },
} satisfies Meta<typeof AreaChart>;

export default meta;
type Story = StoryObj<typeof meta>;

export const AreaChartStory: Story = {
  name: "Area Chart",
  args: {
    data: areaChartData,
    categoryKey: "month",
    theme: "ocean",
    variant: "linear",
    opacity: 0.5,
    grid: true,
    legend: true,
    label: true,
    isAnimationActive: true,
    showYAxis: false,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <AreaChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
const areaChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

<Card style={{ width: "500px" }}>
  <AreaChart
    data={areaChartData}
    categoryKey="month"
    width={460}
    height={300}
    theme="ocean"
    variant="linear"
    opacity={0.5}
    grid={true}
    legend={true}
    label={true}
    isAnimationActive
  />
</Card>`,
      },
    },
  },
};

export const AreaChartStoryWithIcons: Story = {
  name: "Area Chart with Icons",
  args: {
    ...AreaChartStory.args,
    icons: icons,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <AreaChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
  import { Monitor, TabletSmartphone } from "lucide-react";
  
  const areaChartData = [
    { month: "January", desktop: 150, mobile: 90 },
    { month: "February", desktop: 280, mobile: 180 },
    { month: "March", desktop: 220, mobile: 140 },
    { month: "April", desktop: 180, mobile: 160 },
    { month: "May", desktop: 250, mobile: 120 },
    { month: "June", desktop: 300, mobile: 180 },
  ];
  
  const icons = {
    desktop: Monitor,
    mobile: TabletSmartphone,
  };
  
  <Card style={{ width: "500px" }}>
    <AreaChart
      data={areaChartData}
      categoryKey="month"
      theme="ocean"
      variant="linear"
      opacity={0.5}
      grid={true}
      legend={true}
      label={true}
      icons={icons}
      isAnimationActive
    />
  </Card>`,
      },
    },
  },
};

export const AreaChartStoryWithYAxis: Story = {
  name: "Area Chart with Y-Axis and Axis Labels",
  args: {
    ...AreaChartStory.args,
    showYAxis: true,
    xAxisLabel: "Time Period",
    yAxisLabel: "Number of Users",
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <AreaChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
  import { Monitor, TabletSmartphone } from "lucide-react";
  
  const areaChartData = [
    { month: "January", desktop: 150, mobile: 90 },
    { month: "February", desktop: 280, mobile: 180 },
    { month: "March", desktop: 220, mobile: 140 },
    { month: "April", desktop: 180, mobile: 160 },
    { month: "May", desktop: 250, mobile: 120 },
    { month: "June", desktop: 300, mobile: 180 },
  ];
  
  <Card style={{ width: "500px" }}>
    <AreaChart
      data={areaChartData}
      categoryKey="month"
      theme="ocean"
      variant="linear"
      opacity={0.5}
      grid={true}
      legend={true}
      label={true}
      isAnimationActive
      showYAxis
      xAxisLabel="Time Period"
      yAxisLabel="Number of Users"
    />
  </Card>`,
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/BarChart/BarChart.tsx
================================================
import React from "react";
import { Bar, LabelList, BarChart as RechartsBarChart, XAxis, YAxis } from "recharts";
import { useLayoutContext } from "../../../context/LayoutContext";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
  keyTransform,
} from "../Charts";
import { cartesianGrid } from "../cartesianGrid";
import { getDistributedColors, getPalette } from "../utils/PalletUtils";

export type BarChartData = Array<Record<string, string | number>>;

export interface BarChartProps<T extends BarChartData> {
  data: T;
  categoryKey: keyof T[number];
  theme?: "ocean" | "orchid" | "emerald" | "sunset" | "spectrum" | "vivid";
  variant?: "grouped" | "stacked";
  grid?: boolean;
  label?: boolean;
  legend?: boolean;
  radius?: number;
  icons?: Partial<Record<keyof T[number], React.ComponentType>>;
  isAnimationActive?: boolean;
  showYAxis?: boolean;
  xAxisLabel?: React.ReactNode;
  yAxisLabel?: React.ReactNode;
}

export const BarChart = <T extends BarChartData>({
  data,
  categoryKey,
  theme = "ocean",
  variant = "grouped",
  grid = true,
  label = true,
  legend = true,
  icons = {},
  radius = 4,
  isAnimationActive = true,
  showYAxis = false,
  xAxisLabel,
  yAxisLabel,
}: BarChartProps<T>) => {
  // excluding the categoryKey
  const dataKeys = Object.keys(data[0] || {}).filter((key) => key !== categoryKey);

  const palette = getPalette(theme);
  const colors = getDistributedColors(palette, dataKeys.length);
  const { layout } = useLayoutContext();

  // Create Config
  const chartConfig: ChartConfig = dataKeys.reduce(
    (config, key, index) => ({
      ...config,
      [key]: {
        label: key,
        icon: icons[key],
        color: colors[index],
      },
    }),
    {},
  );

  const getTickFormatter = (data: T) => {
    const dataLength = data.length;
    const maxLengthMap = {
      mobile: {
        default: 5,
        10: 4,
        11: 4,
      },
      tray: {
        default: 5,
        8: 4,
        9: 4,
        10: 4,
        11: 4,
      },
      copilot: {
        default: 5,
        8: 4,
        9: 4,
        10: 4,
        11: 4,
      },
      fullscreen: {
        default: 5,
        11: 4,
      },
    };

    const layoutConfig =
      maxLengthMap[layout as keyof typeof maxLengthMap] || maxLengthMap.fullscreen;

    const maxLength =
      dataLength >= 11
        ? 4
        : layoutConfig[dataLength as keyof typeof layoutConfig] || layoutConfig.default;

    return (value: string) => {
      if (value.length > maxLength) {
        return `${value.slice(0, maxLength)}...`;
      }
      return value;
    };
  };
  const getAxisAngle = (data: T) => {
    const angleConfig = {
      mobile: {
        default: 0,
        ranges: [
          { min: 6, max: 9, angle: -45 },
          { min: 10, max: 10, angle: -60 },
          { min: 11, max: Infinity, angle: -75 },
        ],
      },
      tray: {
        default: 0,
        ranges: [{ min: 8, max: Infinity, angle: -45 }],
      },
      copilot: {
        default: 0,
        ranges: [{ min: 8, max: Infinity, angle: -45 }],
      },
      fullscreen: {
        default: 0,
        ranges: [{ min: 12, max: Infinity, angle: -45 }],
      },
    };

    const layoutConfig = angleConfig[layout as keyof typeof angleConfig] || angleConfig.fullscreen;
    const dataLength = data.length;

    const matchRange = layoutConfig.ranges.find(
      (range) => dataLength >= range.min && dataLength <= range.max,
    );

    return matchRange?.angle ?? layoutConfig.default;
  };
  const getTickMargin = (data: T) => {
    return data.length <= 6 ? 10 : 15;
  };

  return (
    <ChartContainer config={chartConfig}>
      <RechartsBarChart
        accessibilityLayer
        data={data}
        margin={{
          top: label ? 30 : 20,
        }}
      >
        {grid && cartesianGrid()}
        <XAxis
          dataKey={categoryKey as string}
          tickLine={false}
          tickMargin={getTickMargin(data)}
          axisLine={false}
          angle={getAxisAngle(data)}
          textAnchor="middle"
          tickFormatter={getTickFormatter(data)}
          interval="preserveStartEnd"
          label={{
            value: xAxisLabel,
            position: "insideBottom",
            offset: -10,
            className: "crayon-chart-axis-label",
          }}
        />
        {showYAxis && (
          <YAxis
            label={{
              value: yAxisLabel,
              position: "insideLeft",
              angle: -90,
              className: "crayon-chart-axis-label",
            }}
          />
        )}
        <ChartTooltip content={<ChartTooltipContent />} />
        {dataKeys.map((key) => {
          const transformedKey = keyTransform(key);
          const color = `var(--color-${transformedKey})`;
          if (label) {
            return (
              <Bar
                key={key}
                dataKey={key}
                fill={color}
                radius={radius}
                stackId={variant === "stacked" ? "a" : undefined}
                isAnimationActive={isAnimationActive}
              >
                {label && (
                  <LabelList
                    position="top"
                    offset={12}
                    className="crayon-chart-label-list"
                    fontSize={12}
                  />
                )}
              </Bar>
            );
          }
          return (
            <Bar
              key={key}
              dataKey={key}
              fill={color}
              radius={radius}
              stackId={variant === "stacked" ? "a" : undefined}
              isAnimationActive={isAnimationActive}
            />
          );
        })}
        {legend && <ChartLegend content={<ChartLegendContent />} />}
      </RechartsBarChart>
    </ChartContainer>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Charts/BarChart/index.ts
================================================
export * from "./BarChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/BarChart/stories/barChart.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Monitor, TabletSmartphone } from "lucide-react";
import { Card } from "../../../Card";
import { BarChart, BarChartProps } from "../BarChart";

const barChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

const icons = {
  desktop: Monitor,
  mobile: TabletSmartphone,
} as const;

const meta: Meta<BarChartProps<typeof barChartData>> = {
  title: "Components/Charts/BarChart",
  component: BarChart,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { BarChart } from '@crayon-ui/react-ui/Charts/BarChart';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],
  argTypes: {
    data: {
      description:
        "An array of data objects where each object represents a data point. Each object should have a category field (e.g., month) and one or more numeric values for the areas to be plotted.",
      control: false,
      table: {
        type: { summary: "Array<Record<string, string | number>>" },
        defaultValue: { summary: "[]" },
        category: "Data",
      },
    },
    categoryKey: {
      description:
        "The key from your data object to be used as the x-axis categories (e.g., 'month', 'year', 'date')",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
    theme: {
      description:
        "The color palette theme for the chart. Each theme provides a different set of colors for the areas.",
      control: "select",
      options: ["ocean", "orchid", "emerald", "sunset", "spectrum", "vivid"],
      table: {
        defaultValue: { summary: "ocean" },
        category: "Appearance",
      },
    },
    icons: {
      description:
        "An object that maps data keys to icon components. These icons will appear in the legend next to their corresponding data series.",
      control: false,
      table: {
        type: { summary: "Record<string, React.ComponentType>" },
        defaultValue: { summary: "{}" },
        category: "Appearance",
      },
    },
    variant: {
      description:
        "The style of the bar chart. 'grouped' shows bars side by side, while 'stacked' shows bars stacked on top of each other.",
      control: "radio",
      options: ["grouped", "stacked"],
      table: {
        defaultValue: { summary: "grouped" },
        category: "Appearance",
      },
    },
    radius: {
      description: "The radius of the rounded corners of the bars",
      control: false,
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "4" },
        category: "Appearance",
      },
    },
    grid: {
      description: "Whether to display the background grid lines in the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    label: {
      description: "Whether to display data point labels above each point on the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    legend: {
      description:
        "Whether to display the chart legend showing the data series names and their corresponding colors/icons",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    isAnimationActive: {
      description: "Whether to animate the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    showYAxis: {
      description: "Whether to display the y-axis",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
        category: "Display",
      },
    },
    xAxisLabel: {
      description: "The label for the x-axis",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
    yAxisLabel: {
      description: "The label for the y-axis",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
  },
} satisfies Meta<typeof BarChart>;

export default meta;
type Story = StoryObj<typeof meta>;

export const BarChartStory: Story = {
  name: "Bar Chart",
  args: {
    data: barChartData,
    categoryKey: "month",
    theme: "ocean",
    variant: "grouped",
    radius: 4,
    grid: true,
    label: true,
    legend: true,
    isAnimationActive: true,
    showYAxis: false,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <BarChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
const barChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];
        
<Card
  style={{
    width: '500px'
  }}
>
  <BarChart
    categoryKey="month"
    data={barChartData}
    grid
    label
    legend
    radius={4}
    theme="sunset"
    variant="grouped"
    isAnimationActive
  />
</Card>
`,
      },
    },
  },
};

export const BarChartStoryWithIcons: Story = {
  name: "Bar Chart with Icons",
  args: {
    ...BarChartStory.args,
    icons: icons,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <BarChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
  import { Monitor, TabletSmartphone } from "lucide-react";

    const barChartData = [
      { month: "January", desktop: 150, mobile: 90 },
      { month: "February", desktop: 280, mobile: 180 },
      { month: "March", desktop: 220, mobile: 140 },
      { month: "April", desktop: 180, mobile: 160 },
      { month: "May", desktop: 250, mobile: 120 },
      { month: "June", desktop: 300, mobile: 180 },
    ];
    
    const icons = {
      desktop: Monitor,
      mobile: TabletSmartphone,
    };
            
    <Card style={{ width: "500px" }}>
      <BarChart
        categoryKey="month"
        data={barChartData}
        grid
        label
        legend
        radius={4}
        theme="sunset"
        variant="grouped"
        icons={icons}
        isAnimationActive
      />
    </Card>
    `,
      },
    },
  },
};

export const BarChartStoryWithYAxis: Story = {
  name: "Bar Chart with Y-Axis and Axis Labels",
  args: {
    ...BarChartStory.args,
    showYAxis: true,
    xAxisLabel: "Time Period",
    yAxisLabel: "Number of Users",
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <BarChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
  import { Monitor, TabletSmartphone } from "lucide-react";

    const barChartData = [
      { month: "January", desktop: 150, mobile: 90 },
      { month: "February", desktop: 280, mobile: 180 },
      { month: "March", desktop: 220, mobile: 140 },
      { month: "April", desktop: 180, mobile: 160 },
      { month: "May", desktop: 250, mobile: 120 },
      { month: "June", desktop: 300, mobile: 180 },
    ];

    <Card style={{ width: "500px" }}>
      <BarChart
        categoryKey="month"
        data={barChartData}
        grid
        label
        legend
        radius={4}
        theme="sunset"
        variant="grouped"
        isAnimationActive
        showYAxis
        xAxisLabel="Time Period"
        yAxisLabel="Number of Users"
      />
    </Card>
    `,
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/LineChart/index.ts
================================================
export * from "./LineChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/LineChart/LineChart.tsx
================================================
import React from "react";
import { LabelList, Line, LineChart as RechartsLineChart, XAxis, YAxis } from "recharts";
import { useLayoutContext } from "../../../context/LayoutContext";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
  keyTransform,
} from "../Charts";
import { cartesianGrid } from "../cartesianGrid";
import { getDistributedColors, getPalette } from "../utils/PalletUtils";

export type LineChartData = Array<Record<string, string | number>>;

export interface LineChartProps<T extends LineChartData> {
  data: T;
  categoryKey: keyof T[number];
  theme?: "ocean" | "orchid" | "emerald" | "sunset" | "spectrum" | "vivid";
  variant?: "linear" | "natural" | "step";
  grid?: boolean;
  label?: boolean;
  legend?: boolean;
  strokeWidth?: number;
  icons?: Partial<Record<keyof T[number], React.ComponentType>>;
  isAnimationActive?: boolean;
  showYAxis?: boolean;
  xAxisLabel?: React.ReactNode;
  yAxisLabel?: React.ReactNode;
}

export const LineChart = <T extends LineChartData>({
  data,
  categoryKey,
  theme = "ocean",
  variant = "natural",
  grid = true,
  label = true,
  legend = true,
  strokeWidth = 2,
  icons = {},
  isAnimationActive = true,
  showYAxis = false,
  xAxisLabel,
  yAxisLabel,
}: LineChartProps<T>) => {
  // excluding the categoryKey
  const dataKeys = Object.keys(data[0] || {}).filter((key) => key !== categoryKey);

  const palette = getPalette(theme);
  const colors = getDistributedColors(palette, dataKeys.length);
  const { layout } = useLayoutContext();

  // Create Config
  const chartConfig: ChartConfig = dataKeys.reduce(
    (config, key, index) => ({
      ...config,
      [key]: {
        label: key,
        icon: icons[key],
        color: colors[index],
      },
    }),
    {},
  );

  const getTickFormatter = (data: T) => {
    const dataLength = data.length;
    const maxLengthMap = {
      mobile: {
        default: 5,
        10: 4,
        11: 4,
      },
      tray: {
        default: 5,
        8: 4,
        9: 4,
        10: 4,
        11: 4,
      },
      copilot: {
        default: 5,
        8: 4,
        9: 4,
        10: 4,
        11: 4,
      },
      fullscreen: {
        default: 5,
        11: 4,
      },
    };

    const layoutConfig =
      maxLengthMap[layout as keyof typeof maxLengthMap] || maxLengthMap.fullscreen;

    const maxLength =
      dataLength >= 11
        ? 4
        : layoutConfig[dataLength as keyof typeof layoutConfig] || layoutConfig.default;

    return (value: string) => {
      if (value.length > maxLength) {
        return `${value.slice(0, maxLength)}...`;
      }
      return value;
    };
  };
  const getAxisAngle = (data: T) => {
    const angleConfig = {
      mobile: {
        default: 0,
        ranges: [
          { min: 6, max: 9, angle: -45 },
          { min: 10, max: 10, angle: -60 },
          { min: 11, max: Infinity, angle: -75 },
        ],
      },
      tray: {
        default: 0,
        ranges: [{ min: 8, max: Infinity, angle: -45 }],
      },
      copilot: {
        default: 0,
        ranges: [{ min: 8, max: Infinity, angle: -45 }],
      },
      fullscreen: {
        default: 0,
        ranges: [{ min: 12, max: Infinity, angle: -45 }],
      },
    };

    const layoutConfig = angleConfig[layout as keyof typeof angleConfig] || angleConfig.fullscreen;
    const dataLength = data.length;

    const matchRange = layoutConfig.ranges.find(
      (range) => dataLength >= range.min && dataLength <= range.max,
    );

    return matchRange?.angle ?? layoutConfig.default;
  };
  const getTickMargin = (data: T) => {
    return data.length <= 6 ? 10 : 15;
  };

  return (
    <ChartContainer config={chartConfig}>
      <RechartsLineChart
        accessibilityLayer
        data={data}
        margin={{
          top: label ? 30 : 10,
          bottom: legend ? 0 : 10,
          left: 12,
          right: 12,
        }}
      >
        {grid && cartesianGrid()}
        <XAxis
          dataKey={categoryKey as string}
          tickLine={false}
          tickMargin={getTickMargin(data)}
          axisLine={false}
          angle={getAxisAngle(data)}
          textAnchor="middle"
          tickFormatter={getTickFormatter(data)}
          interval="preserveStartEnd"
          label={{
            value: xAxisLabel,
            position: "insideBottom",
            offset: -10,
            className: "crayon-chart-axis-label",
          }}
        />
        {showYAxis && (
          <YAxis
            label={{
              value: yAxisLabel,
              position: "insideLeft",
              angle: -90,
              className: "crayon-chart-axis-label",
            }}
          />
        )}
        <ChartTooltip content={<ChartTooltipContent indicator="dot" />} />
        {dataKeys.map((key) => {
          const transformedKey = keyTransform(key);
          const color = `var(--color-${transformedKey})`;
          if (label) {
            return (
              <Line
                key={key}
                dataKey={key}
                type={variant}
                stroke={color}
                fill={color}
                strokeWidth={strokeWidth}
                dot={{
                  fill: color,
                }}
                activeDot={{
                  r: 6,
                }}
                isAnimationActive={isAnimationActive}
              >
                {label && (
                  <LabelList
                    position="top"
                    offset={12}
                    className="crayon-chart-label-list"
                    fontSize={12}
                  />
                )}
              </Line>
            );
          }
          return (
            <Line
              key={key}
              dataKey={key}
              type={variant}
              stroke={color}
              fill={color}
              strokeWidth={strokeWidth}
              dot={{
                fill: color,
              }}
              isAnimationActive={isAnimationActive}
            />
          );
        })}
        {legend && <ChartLegend content={<ChartLegendContent />} />}
      </RechartsLineChart>
    </ChartContainer>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Charts/LineChart/stories/lineChart.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Monitor, TabletSmartphone } from "lucide-react";
import { Card } from "../../../Card";
import { LineChart, LineChartProps } from "../LineChart";

const lineChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

const icons = {
  desktop: Monitor,
  mobile: TabletSmartphone,
} as const;

const meta: Meta<LineChartProps<typeof lineChartData>> = {
  title: "Components/Charts/LineChart",
  component: LineChart,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { LineChart } from '@crayon-ui/react-ui/Charts/LineChart';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],

  argTypes: {
    data: {
      description:
        "An array of data objects where each object represents a data point. Each object should have a category field (e.g., month) and one or more numeric values for the areas to be plotted.",
      control: false,
      table: {
        type: { summary: "Array<Record<string, string | number>>" },
        defaultValue: { summary: "[]" },
        category: "Data",
      },
    },
    categoryKey: {
      description:
        "The key from your data object to be used as the x-axis categories (e.g., 'month', 'year', 'date')",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
    theme: {
      description:
        "The color palette theme for the chart. Each theme provides a different set of colors for the areas.",
      control: "select",
      options: ["ocean", "orchid", "emerald", "sunset", "spectrum", "vivid"],
      table: {
        defaultValue: { summary: "ocean" },
        category: "Appearance",
      },
    },
    icons: {
      description:
        "An object that maps data keys to icon components. These icons will appear in the legend next to their corresponding data series.",
      control: false,
      table: {
        type: { summary: "Record<string, React.ComponentType>" },
        defaultValue: { summary: "{}" },
        category: "Appearance",
      },
    },
    variant: {
      description:
        "The interpolation method used to create the line curves. 'linear' creates straight lines between points, 'natural' creates smooth curves, and 'step' creates a stepped line.",
      control: "radio",
      options: ["linear", "natural", "step"],
      table: {
        defaultValue: { summary: "natural" },
        category: "Appearance",
      },
    },
    strokeWidth: {
      description: "The width of the line stroke",
      control: false,
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "2" },
        category: "Appearance",
      },
    },
    grid: {
      description: "Whether to display the background grid lines in the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    label: {
      description: "Whether to display data point labels above each point on the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    legend: {
      description:
        "Whether to display the chart legend showing the data series names and their corresponding colors/icons",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    isAnimationActive: {
      description: "Whether to animate the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    showYAxis: {
      description: "Whether to display the y-axis",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
        category: "Display",
      },
    },
    xAxisLabel: {
      description: "The label for the x-axis",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
    yAxisLabel: {
      description: "The label for the y-axis",
      control: false,
      table: {
        type: { summary: "string" },
        defaultValue: { summary: "string" },
        category: "Data",
      },
    },
  },
} satisfies Meta<typeof LineChart>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LineChartStory: Story = {
  name: "Line Chart",
  args: {
    data: lineChartData,
    categoryKey: "month",
    theme: "ocean",
    variant: "natural",
    strokeWidth: 2,
    grid: true,
    label: true,
    legend: true,
    isAnimationActive: true,
    showYAxis: false,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <LineChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
const lineChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];
<Card
  style={{
    width: '500px'
  }}
>
  <LineChart
    categoryKey="month"
    data={lineChartData}
    grid
    label
    legend
    strokeWidth={2}
    theme="ocean"
    variant="natural"
    isAnimationActive
  />
</Card>
`,
      },
    },
  },
};

export const LineChartStoryWithIcons: Story = {
  name: "Line Chart with Icons",
  args: {
    ...LineChartStory.args,
    icons: icons,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <LineChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
        import { Monitor, TabletSmartphone } from "lucide-react";

  const lineChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

const icons = {
  desktop: Monitor,
  mobile: TabletSmartphone,
};

<Card
  style={{
    width: '500px'
  }}
>
  <LineChart
    categoryKey="month"
    data={lineChartData}
    grid
    label
    legend
    strokeWidth={2}
    theme="ocean"
    variant="natural"
    icons={icons}
    isAnimationActive
  />
</Card>
        `,
      },
    },
  },
};

export const LineChartStoryWithYAxis: Story = {
  name: "Line Chart with Y-Axis and Axis Labels",
  args: {
    ...LineChartStory.args,
    showYAxis: true,
    xAxisLabel: "Time Period",
    yAxisLabel: "Number of Users",
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <LineChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
        import { Monitor, TabletSmartphone } from "lucide-react";

  const lineChartData = [
  { month: "January", desktop: 150, mobile: 90 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

<Card
  style={{
    width: '500px'
  }}
>
  <LineChart
    categoryKey="month"
    data={lineChartData}
    grid
    label
    legend
    strokeWidth={2}
    theme="ocean"
    variant="natural"
    isAnimationActive
    showYAxis
    xAxisLabel: "Time Period",
    yAxisLabel: "Number of Users",
  />
</Card>
        `,
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/PieChart/index.ts
================================================
export * from "./PieChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/PieChart/PieChart.tsx
================================================
import clsx from "clsx";
import { debounce } from "lodash-es";
import { useEffect, useRef, useState } from "react";
import { Cell, Pie, PieChart as RechartsPieChart } from "recharts";
import { useLayoutContext } from "../../../context/LayoutContext";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
} from "../Charts";
import { getDistributedColors, getPalette } from "../utils/PalletUtils";

export type PieChartData = Array<Record<string, string | number>>;

export interface PieChartProps<T extends PieChartData> {
  data: T;
  categoryKey: keyof T[number];
  dataKey: keyof T[number];
  theme?: "ocean" | "orchid" | "emerald" | "sunset" | "spectrum" | "vivid";
  variant?: "pie" | "donut";
  format?: "percentage" | "number";
  legend?: boolean;
  label?: boolean;
  isAnimationActive?: boolean;
}

const layoutMap: Record<string, string> = {
  mobile: "crayon-pie-chart-container-mobile",
  fullscreen: "crayon-pie-chart-container-fullscreen",
  tray: "crayon-pie-chart-container-tray",
  copilot: "crayon-pie-chart-container-copilot",
};

// Helper function to calculate percentage
const calculatePercentage = (value: number, total: number): number => {
  if (total === 0) {
    return 0;
  }
  return Number(((value / total) * 100).toFixed(2));
};

export const PieChart = <T extends PieChartData>({
  data,
  categoryKey,
  dataKey,
  theme = "ocean",
  variant = "pie",
  format = "number",
  legend = true,
  label = true,
  isAnimationActive = true,
}: PieChartProps<T>) => {
  const { layout } = useLayoutContext();
  const [calculatedOuterRadius, setCalculatedOuterRadius] = useState(120);
  const [calculatedInnerRadius, setCalculatedInnerRadius] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);

  // Calculate dynamic radius based on layout
  useEffect(() => {
    if (!containerRef.current) return;

    const resizeObserver = new ResizeObserver(
      debounce((entries: any) => {
        const { width } = entries[0].contentRect;

        // Calculate outer radius
        let newOuterRadius = 120; // default
        if (layout === "mobile") {
          newOuterRadius = label ? (width > 300 ? 85 : 75) : width > 300 ? 95 : 80;
        } else if (layout === "fullscreen") {
          newOuterRadius = 120;
        } else if (layout === "tray" || layout === "copilot") {
          newOuterRadius = 90;
        }

        // Calculate inner radius for donut
        let newInnerRadius = 0;
        if (variant === "donut") {
          if (layout === "mobile") {
            newInnerRadius = label ? (width > 300 ? 50 : 30) : width > 300 ? 60 : 50;
          } else {
            newInnerRadius = 60;
          }
        }

        setCalculatedOuterRadius(newOuterRadius);
        setCalculatedInnerRadius(newInnerRadius);
      }, 100),
    );

    resizeObserver.observe(containerRef.current);
    return () => resizeObserver.disconnect();
  }, [layout, label, variant]);

  // Calculate total for percentage calculations
  const total = data.reduce((sum, item) => sum + Number(item[dataKey]), 0);

  // Transform data with percentages
  const transformedData = data.map((item) => ({
    ...item,
    percentage: calculatePercentage(Number(item[dataKey as string]), total),
    originalValue: item[dataKey as string],
  }));

  // Get color palette and distribute colors
  const palette = getPalette(theme);
  const colors = getDistributedColors(palette, data.length);

  // Create chart configuration
  const chartConfig = data.reduce<ChartConfig>(
    (config, item, index) => ({
      ...config,
      [String(item[categoryKey])]: {
        label: String(item[categoryKey as string]),
        color: colors[index],
      },
    }),
    {},
  );

  // Custom label renderer
  const renderCustomLabel = ({ payload, cx, cy, x, y, textAnchor, dominantBaseline }: any) => {
    if (payload.percentage <= 10) return null;
    const displayValue = format === "percentage" ? payload.percentage : payload[dataKey];
    const formattedValue =
      String(displayValue).length > 7 ? `${String(displayValue).slice(0, 7)}...` : displayValue;

    return (
      <g>
        <text
          cx={cx}
          cy={cy}
          x={x}
          y={y}
          textAnchor={textAnchor}
          dominantBaseline={dominantBaseline}
          className="crayon-pie-chart-label"
        >
          {formattedValue}
          {format === "percentage" ? "%" : ""}
        </text>
      </g>
    );
  };

  return (
    <ChartContainer
      ref={containerRef}
      config={chartConfig}
      className={clsx("crayon-pie-chart-container", layoutMap[layout])}
    >
      <RechartsPieChart>
        <ChartTooltip content={<ChartTooltipContent showPercentage={format === "percentage"} />} />
        {legend && <ChartLegend content={<ChartLegendContent nameKey={String(categoryKey)} />} />}
        <Pie
          data={transformedData}
          dataKey={format === "percentage" ? "percentage" : String(dataKey)}
          nameKey={String(categoryKey)}
          labelLine={false}
          outerRadius={calculatedOuterRadius}
          innerRadius={calculatedInnerRadius}
          label={label ? renderCustomLabel : false}
          isAnimationActive={isAnimationActive}
        >
          {Object.entries(chartConfig).map(([key, config]) => (
            <Cell key={key} fill={config.color} />
          ))}
        </Pie>
      </RechartsPieChart>
    </ChartContainer>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Charts/PieChart/stories/pieChart.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Card } from "../../../Card";
import { PieChart, PieChartProps } from "../PieChart";

const pieChartData = [
  { month: "January", value: 4250 },
  { month: "February", value: 3820 },
  { month: "March", value: 4680 },
  { month: "April", value: 4120 },
  { month: "May", value: 5340 },
  { month: "June", value: 6250 },
  { month: "July", value: 5890 },
];

const meta: Meta<PieChartProps<typeof pieChartData>> = {
  title: "Components/Charts/PieChart",
  component: PieChart,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { PieChart } from '@crayon-ui/react-ui/Charts/PieChart';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],

  argTypes: {
    data: {
      description:
        "An array of data objects where each object represents a data point. Each object should have a category field (e.g., month) and one or more numeric values for the areas to be plotted.",
      control: false,
      table: {
        type: { summary: "Array<Record<string, string | number>>" },
        defaultValue: { summary: "[]" },
        category: "Data",
      },
    },
    categoryKey: {
      description:
        "The key from your data object to be used as the segment labels (e.g., 'month', 'category', 'name')",
      control: false,
      table: {
        type: { summary: "string" },
        category: "Data",
      },
    },
    dataKey: {
      description:
        "The key from your data object to be used as the values that determine the slice sizes (e.g., 'value', 'count', 'amount')",
      control: false,
      table: {
        type: { summary: "string" },
        category: "Data",
      },
    },
    theme: {
      description:
        "The color palette theme for the chart. Each theme provides a different set of colors for the areas.",
      control: "select",
      options: ["ocean", "orchid", "emerald", "sunset", "spectrum", "vivid"],
      table: {
        defaultValue: { summary: "ocean" },
        category: "Appearance",
      },
    },
    variant: {
      description:
        "The style of the pie chart. 'pie' shows a pie chart, while 'donut' shows a donut chart.",
      control: "radio",
      options: ["pie", "donut"],
      table: {
        defaultValue: { summary: "pie" },
        category: "Appearance",
      },
    },
    format: {
      description:
        "The format of the data. 'percentage' shows the data as a percentage, while 'number' shows the data as a number.",
      control: "radio",
      options: ["percentage", "number"],
      table: {
        defaultValue: { summary: "percentage" },
        category: "Display",
      },
    },
    legend: {
      description: "Whether to display the legend",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    label: {
      description: "Whether to display the data point labels above each point on the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    isAnimationActive: {
      description: "Whether to animate the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
  },
} satisfies Meta<typeof PieChart>;

export default meta;
type Story = StoryObj<typeof meta>;

export const PieChartStory: Story = {
  name: "Pie Chart",
  args: {
    data: pieChartData,
    categoryKey: "month",
    dataKey: "value",
    theme: "ocean",
    variant: "pie",
    format: "number",
    legend: true,
    label: true,
    isAnimationActive: true,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <PieChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
        const pieChartData = [
  { month: "January", value: 400 },
  { month: "February", value: 300 },
  { month: "March", value: 300 },
  { month: "April", value: 400 },
  { month: "May", value: 300 },
  { month: "June", value: 300 },
  { month: "July", value: 300 },
];

<Card
  style={{
    width: '500px'
  }}
>
  <PieChart
    categoryKey="month"
    data={pieChartData}
    dataKey="value"
    format="percentage"
    label
    legend
    theme="ocean"
    variant="donut"
    isAnimationActive
  />
</Card>
        `,
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/RadarChart/index.ts
================================================
export * from "./RadarChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/RadarChart/RadarChart.tsx
================================================
import React from "react";
import { PolarAngleAxis, PolarGrid, Radar, RadarChart as RechartsRadarChart } from "recharts";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
  keyTransform,
} from "../Charts";
import { getDistributedColors, getPalette } from "../utils/PalletUtils";

export type RadarChartData = Array<Record<string, string | number>>;

export interface RadarChartProps<T extends RadarChartData> {
  data: T;
  categoryKey: keyof T[number];
  theme?: "ocean" | "orchid" | "emerald" | "sunset" | "spectrum" | "vivid";
  variant?: "line" | "area";
  grid?: boolean;
  legend?: boolean;
  strokeWidth?: number;
  areaOpacity?: number;
  icons?: Partial<Record<keyof T[number], React.ComponentType>>;
  isAnimationActive?: boolean;
}

export const RadarChart = <T extends RadarChartData>({
  data,
  categoryKey,
  theme = "ocean",
  variant = "line",
  grid = true,
  legend = true,
  strokeWidth = 2,
  areaOpacity = 0.5,
  icons = {},
  isAnimationActive = true,
}: RadarChartProps<T>) => {
  // excluding the categoryKey
  const dataKeys = Object.keys(data[0] || {}).filter((key) => key !== categoryKey);

  const palette = getPalette(theme);
  const colors = getDistributedColors(palette, dataKeys.length);

  // Create Config
  const chartConfig: ChartConfig = dataKeys.reduce(
    (config, key, index) => ({
      ...config,
      [key]: {
        label: key,
        icon: icons[key],
        color: colors[index],
      },
    }),
    {},
  );

  return (
    <ChartContainer config={chartConfig}>
      <RechartsRadarChart data={data} margin={{ top: 10, right: 10, bottom: 10, left: 10 }}>
        {grid && <PolarGrid className="crayon-chart-polar-grid" stroke="currentColor" />}
        <PolarAngleAxis dataKey={categoryKey as string} />

        <ChartTooltip cursor={false} content={<ChartTooltipContent indicator="dot" />} />
        {dataKeys.map((key) => {
          const transformedKey = keyTransform(key);
          const color = `var(--color-${transformedKey})`;
          if (variant === "line") {
            return (
              <Radar
                key={key}
                dataKey={key}
                fill={color}
                fillOpacity={0}
                stroke={color}
                strokeWidth={strokeWidth}
                isAnimationActive={isAnimationActive}
              />
            );
          } else {
            return (
              <Radar
                key={key}
                dataKey={key}
                fill={color}
                fillOpacity={areaOpacity}
                isAnimationActive={isAnimationActive}
              />
            );
          }
        })}

        {legend && (
          <ChartLegend
            content={
              <ChartLegendContent className="-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/4 [&>*]:justify-center" />
            }
          />
        )}
      </RechartsRadarChart>
    </ChartContainer>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Charts/RadarChart/stories/raderChart.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Monitor, TabletSmartphone } from "lucide-react";
import { Card } from "../../../Card";
import { RadarChart, RadarChartProps } from "../RadarChart";

const radarChartData = [
  { month: "January", desktop: 250, mobile: 150 },
  { month: "February", desktop: 280, mobile: 180 },
  { month: "March", desktop: 220, mobile: 140 },
  { month: "April", desktop: 180, mobile: 160 },
  { month: "May", desktop: 250, mobile: 120 },
  { month: "June", desktop: 300, mobile: 180 },
];

const icons = {
  desktop: Monitor,
  mobile: TabletSmartphone,
} as const;

const meta: Meta<RadarChartProps<typeof radarChartData>> = {
  title: "Components/Charts/RadarChart",
  component: RadarChart,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "```tsx\nimport { RadarChart } from '@crayon-ui/react-ui/Charts/RadarChart';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],

  argTypes: {
    data: {
      description:
        "An array of data objects where each object represents a data point. Each object should have a category field (e.g., month) and one or more numeric values for the areas to be plotted.",
      control: false,
      table: {
        type: { summary: "Array<Record<string, string | number>>" },
        defaultValue: { summary: "[]" },
        category: "Data",
      },
    },
    categoryKey: {
      description:
        "The key from your data object to be used as the x-axis categories (e.g., 'month', 'year', 'date')",
      control: false,
      table: {
        type: { summary: "string" },
        category: "Data",
      },
    },
    theme: {
      description:
        "The color palette theme for the chart. Each theme provides a different set of colors for the areas.",
      control: "select",
      options: ["ocean", "orchid", "emerald", "sunset", "spectrum", "vivid"],
      table: {
        defaultValue: { summary: "ocean" },
        category: "Appearance",
      },
    },
    icons: {
      description:
        "An object that maps data keys to icon components. These icons will appear in the legend next to their corresponding data series.",
      control: false,
      table: {
        type: { summary: "Record<string, React.ComponentType>" },
        defaultValue: { summary: "{}" },
        category: "Appearance",
      },
    },
    variant: {
      description:
        "The style of the radar chart. 'line' shows only the connecting lines between data points, while 'area' fills the shape created by the data points.",
      control: "radio",
      options: ["line", "area"],
      table: {
        defaultValue: { summary: "area" },
        category: "Appearance",
      },
    },
    strokeWidth: {
      description: "The width of the line stroke",
      control: false,
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "2" },
        category: "Appearance",
      },
    },
    grid: {
      description: "Whether to display the background grid lines in the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    areaOpacity: {
      description: "The opacity of the area fill",
      control: false,
      table: {
        type: { summary: "number" },
        defaultValue: { summary: "0.7" },
        category: "Appearance",
      },
    },
    legend: {
      description:
        "Whether to display the chart legend showing the data series names and their corresponding colors/icons",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    isAnimationActive: {
      description: "Whether to animate the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
  },
} satisfies Meta<typeof RadarChart>;

export default meta;
type Story = StoryObj<typeof meta>;

export const RadarChartStory: Story = {
  name: "Radar Chart",
  args: {
    data: radarChartData,
    categoryKey: "month",
    theme: "ocean",
    variant: "area",
    strokeWidth: 2,
    areaOpacity: 0.5,
    legend: true,
    grid: true,
    isAnimationActive: true,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <RadarChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
        const radarChartData = [
    { month: "January", desktop: 250, mobile: 150 },
    { month: "February", desktop: 280, mobile: 180 },
    { month: "March", desktop: 220, mobile: 140 },
    { month: "April", desktop: 180, mobile: 160 },
    { month: "May", desktop: 250, mobile: 120 },
    { month: "June", desktop: 300, mobile: 180 },
];

<Card
  style={{
    width: '500px'
  }}
>
  <RadarChart
    areaOpacity={0.5}
    categoryKey="month"
    data={radarChartData}
    grid
    legend
    strokeWidth={2}
    theme="sunset"
    variant="area"
    isAnimationActive
  />
</Card>
        `,
      },
    },
  },
};

export const RadarChartStoryWithIcons: Story = {
  name: "Radar Chart with Icons",
  args: {
    ...RadarChartStory.args,
    icons: icons,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <RadarChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      source: {
        code: `
import { Monitor, TabletSmartphone } from "lucide-react";

const radarChartData = [
    { month: "January", desktop: 250, mobile: 150 },
    { month: "February", desktop: 280, mobile: 180 },
    { month: "March", desktop: 220, mobile: 140 },
    { month: "April", desktop: 180, mobile: 160 },
    { month: "May", desktop: 250, mobile: 120 },
    { month: "June", desktop: 300, mobile: 180 },
];

const icons = {
  desktop: Monitor,
  mobile: TabletSmartphone,
} as const;

<Card
  style={{
    width: '500px'
  }}
>
  <RadarChart
    areaOpacity={0.5}
    categoryKey="month"
    data={radarChartData}
    grid
    legend
    strokeWidth={2}
    theme="sunset"
    variant="area"
    icons={icons}
    isAnimationActive
  />
</Card>
        `,
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/RadialChart/index.ts
================================================
export * from "./RadialChart";



================================================
FILE: js/packages/react-ui/src/components/Charts/RadialChart/RadialChart.tsx
================================================
import clsx from "clsx";
import { debounce } from "lodash-es";
import { useEffect, useRef, useState } from "react";
import { Cell, LabelList, PolarGrid, RadialBar, RadialBarChart } from "recharts";
import { useLayoutContext } from "../../../context/LayoutContext";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
} from "../Charts";
import { getDistributedColors, getPalette } from "../utils/PalletUtils";

export type RadialChartData = Array<Record<string, string | number>>;

export interface RadialChartProps<T extends RadialChartData> {
  data: T;
  categoryKey: keyof T[number];
  dataKey: keyof T[number];
  theme?: "ocean" | "orchid" | "emerald" | "sunset" | "spectrum" | "vivid";
  variant?: "semicircle" | "circular";
  format?: "percentage" | "number";
  legend?: boolean;
  label?: boolean;
  grid?: boolean;
  isAnimationActive?: boolean;
}

const layoutMap: Record<string, string> = {
  mobile: "crayon-pie-chart-container-mobile",
  fullscreen: "crayon-pie-chart-container-fullscreen",
  tray: "crayon-pie-chart-container-tray",
  copilot: "crayon-pie-chart-container-copilot",
};

// Helper function to calculate percentage
const calculatePercentage = (value: number, total: number): number => {
  if (total === 0) return 0;
  return Number(((value / total) * 100).toFixed(2));
};

export const RadialChart = <T extends RadialChartData>({
  data,
  categoryKey,
  dataKey,
  theme = "ocean",
  variant = "semicircle",
  format = "number",
  legend = true,
  label = true,
  grid = true,
  isAnimationActive = true,
}: RadialChartProps<T>) => {
  const { layout } = useLayoutContext();
  const [calculatedOuterRadius, setCalculatedOuterRadius] = useState(110);
  const [calculatedInnerRadius, setCalculatedInnerRadius] = useState(30);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!containerRef.current) return;

    const resizeObserver = new ResizeObserver(
      debounce((entries: any) => {
        const { width } = entries[0].contentRect;

        // Calculate outer radius
        let newOuterRadius = 110; // default
        if (layout === "mobile") {
          newOuterRadius = label ? (width > 300 ? 110 : 90) : width > 300 ? 95 : 80;
        } else if (layout === "fullscreen") {
          newOuterRadius = 160;
        } else if (layout === "tray" || layout === "copilot") {
          newOuterRadius = 130;
        } else {
          newOuterRadius = 100;
        }

        // Calculate inner radius
        let newInnerRadius = 30; // default
        if (layout === "mobile") {
          newInnerRadius = 30;
        } else if (layout === "fullscreen") {
          newInnerRadius = 50;
        } else {
          newInnerRadius = 30;
        }

        setCalculatedOuterRadius(newOuterRadius);
        setCalculatedInnerRadius(newInnerRadius);
      }, 100),
    );

    resizeObserver.observe(containerRef.current);
    return () => resizeObserver.disconnect();
  }, [layout, label]);

  // Calculate total for percentage calculations
  const total = data.reduce((sum, item) => sum + Number(item[dataKey]), 0);

  // Get color palette and distribute colors
  const palette = getPalette(theme);
  const colors = getDistributedColors(palette, data.length);

  // Transform data with percentages
  const transformedData = data.map((item, index) => ({
    ...item,
    percentage: calculatePercentage(Number(item[dataKey as string]), total),
    originalValue: item[dataKey as string],
    fill: colors[index],
  }));

  // Create chart configuration
  const chartConfig = data.reduce<ChartConfig>(
    (config, item, index) => ({
      ...config,
      [String(item[categoryKey])]: {
        label: String(item[categoryKey as string]),
        color: colors[index],
      },
    }),
    {},
  );

  const getFontSize = (dataLength: number) => {
    return dataLength <= 5 ? 12 : 7;
  };

  const formatLabel = (value: string | number) => {
    if (format === "percentage") {
      const item = transformedData.find((d) => String(d.originalValue) === String(value));
      return item ? `${item.percentage}%` : value;
    }
    // For number format, just truncate if too long
    const stringValue = String(value);
    return stringValue.length > 8 ? `${stringValue.slice(0, 8)}...` : stringValue;
  };

  return (
    <ChartContainer
      ref={containerRef}
      config={chartConfig}
      className={clsx("crayon-radial-chart-container", layoutMap[layout], "aspect-square")}
    >
      <RadialBarChart
        data={transformedData}
        startAngle={variant === "circular" ? -90 : 0}
        endAngle={variant === "circular" ? 270 : 180}
        innerRadius={calculatedInnerRadius}
        outerRadius={calculatedOuterRadius}
      >
        {grid && <PolarGrid gridType="circle" />}
        <ChartTooltip
          cursor={false}
          content={
            <ChartTooltipContent
              showPercentage={format === "percentage"}
              nameKey={String(categoryKey)}
            />
          }
        />
        {legend && (
          <ChartLegend
            content={
              <ChartLegendContent nameKey={String(categoryKey)} className="flex-wrap gap-2" />
            }
          />
        )}
        <RadialBar
          dataKey={format === "percentage" ? "percentage" : String(dataKey)}
          background={!grid}
          cornerRadius={10}
          isAnimationActive={isAnimationActive}
        >
          {Object.entries(chartConfig).map(([key, config]) => (
            <Cell key={key} fill={config.color} />
          ))}
          {label && (
            <LabelList
              dataKey={String(dataKey)}
              position="insideStart"
              offset={12}
              fill="currentColor"
              className="capitalize mix-blend-luminosity"
              fontSize={getFontSize(data.length)}
              formatter={formatLabel}
            />
          )}
        </RadialBar>
      </RadialBarChart>
    </ChartContainer>
  );
};



================================================
FILE: js/packages/react-ui/src/components/Charts/RadialChart/stories/radialChart.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Card } from "../../../Card";
import { RadialChart, RadialChartProps } from "../RadialChart";

const radialChartData = [
  { month: "January", value: 400 },
  { month: "February", value: 300 },
  { month: "March", value: 300 },
  { month: "April", value: 400 },
  { month: "May", value: 300 },
  { month: "June", value: 300 },
  { month: "July", value: 300 },
];

const meta: Meta<RadialChartProps<typeof radialChartData>> = {
  title: "Components/Charts/RadialChart",
  component: RadialChart,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "```tsx\nimport { RadialChart } from '@crayon-ui/react-ui/Charts/RadialChart';\n```",
      },
    },
  },
  tags: ["!dev", "autodocs"],

  argTypes: {
    data: {
      description:
        "An array of data objects where each object represents a data point. Each object should have a category field (e.g., month) and one or more numeric values for the areas to be plotted.",
      control: false,
      table: {
        type: { summary: "Array<Record<string, string | number>>" },
        defaultValue: { summary: "[]" },
        category: "Data",
      },
    },
    categoryKey: {
      description:
        "The key from your data object to be used as the category labels for each segment (e.g., 'month', 'year', 'category')",
      control: false,
      table: {
        type: { summary: "string" },
        category: "Data",
      },
    },
    dataKey: {
      description:
        "The key from your data object to be used as the values that determine the segment sizes (e.g., 'value', 'count', 'amount')",
      control: false,
      table: {
        type: { summary: "string" },
        category: "Data",
      },
    },
    theme: {
      description:
        "The color palette theme for the chart. Each theme provides a different set of colors for the areas.",
      control: "select",
      options: ["ocean", "orchid", "emerald", "sunset", "spectrum", "vivid"],
      table: {
        defaultValue: { summary: "ocean" },
        category: "Appearance",
      },
    },
    variant: {
      description:
        "The style of the pie chart. 'circular' shows a circular chart, while 'semicircle' shows a semicircle chart.",
      control: "radio",
      options: ["circular", "semicircle"],
      table: {
        defaultValue: { summary: "circular" },
        category: "Appearance",
      },
    },
    format: {
      description:
        "The format of the data. 'percentage' shows the data as a percentage, while 'number' shows the data as a number.",
      control: "radio",
      options: ["percentage", "number"],
      table: {
        defaultValue: { summary: "percentage" },
        category: "Display",
      },
    },
    legend: {
      description: "Whether to display the legend",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    label: {
      description: "Whether to display the data point labels above each point on the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    grid: {
      description: "Whether to display the grid lines",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
    isAnimationActive: {
      description: "Whether to animate the chart",
      control: "boolean",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "true" },
        category: "Display",
      },
    },
  },
} satisfies Meta<typeof RadialChart>;

export default meta;
type Story = StoryObj<typeof meta>;

export const RadialChartStory: Story = {
  name: "Radial Chart",
  args: {
    data: radialChartData,
    categoryKey: "month",
    dataKey: "value",
    theme: "ocean",
    variant: "circular",
    format: "number",
    legend: true,
    label: true,
    grid: true,
    isAnimationActive: true,
  },
  render: (args) => (
    <Card style={{ width: "500px" }}>
      <RadialChart {...args} />
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story:
          "A radial chart that displays data in a circular or semicircular format, with customizable themes, labels, and grid options.",
      },
      source: {
        code: `
const radialChartData = [
    { month: "January", value: 400 },
    { month: "February", value: 300 },
    { month: "March", value: 300 },
    { month: "April", value: 400 },
    { month: "May", value: 300 },
    { month: "June", value: 300 },
    { month: "July", value: 300 },
];

<Card
  style={{
    width: '500px'
  }}
>
  <RadialChart
    categoryKey="month"
    data={radialChartData}
    dataKey="value"
    format="number"
    grid
    label
    legend
    isAnimationActive
    theme="ocean"
    variant="circular"
  />
</Card>
        `,
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/Charts/utils/PalletUtils.ts
================================================
import invariant from "tiny-invariant";

export type ColorPalette = {
  name: string;
  // colors are used to display the palette
  colors: string[];
};

type PaletteMap = Record<string, ColorPalette>;

const colorPalettes: PaletteMap = {
  ocean: {
    name: "Ocean",
    colors: [
      "#0D47A1",
      "#1565C0",
      "#1976D2",
      "#1E88E5",
      "#2196F3",
      "#42A5F5",
      "#64B5F6",
      "#90CAF9",
      "#BBDEFB",
      "#E3F2FD",
      "#EFF8FF",
    ],
  },
  orchid: {
    name: "Orchid",
    colors: [
      "#3A365B",
      "#482E77",
      "#552594",
      "#631DB0",
      "#7014CC",
      "#883BD5",
      "#A062DD",
      "#B88AE6",
      "#CFB1EE",
      "#E7D8F7",
      "#F7EFFF",
    ],
  },
  emerald: {
    name: "Emerald",
    colors: [
      "#10451D",
      "#155D27",
      "#1A7431",
      "#208B3A",
      "#25A244",
      "#2DC653",
      "#4AD66D",
      "#6EDE8A",
      "#92E6A7",
      "#B7EFC5",
      "#DCFFE5",
    ],
  },
  spectrum: {
    name: "Spectrum",
    colors: [
      "#2171BC",
      "#2681D7",
      "#72A4EB",
      "#A0C0F7",
      "#C2D4F7",
      "#EADDE8",
      "#EEB3B1",
      "#E99492",
      "#E17475",
      "#D75259",
      "#CB253E",
    ],
  },
  sunset: {
    name: "Sunset",
    colors: [
      "#0D0887",
      "#42049E",
      "#6A00A8",
      "#900DA4",
      "#B12A90",
      "#CC4678",
      "#E16462",
      "#F1844B",
      "#FCA636",
      "#FCCE25",
      "#FFE06E",
    ],
  },
  vivid: {
    name: "Vivid",
    colors: [
      "#FF595E",
      "#FF924C",
      "#FFCA3A",
      "#C5CA30",
      "#8AC926",
      "#36949D",
      "#1982C4",
      "#4267AC",
      "#565AA0",
      "#6A4C93",
      "#63438F",
    ],
  },
};

export type PaletteKey = keyof typeof colorPalettes;

export const getPalette = (key: PaletteKey): ColorPalette => {
  const palette = colorPalettes[key];
  invariant(palette, `Palette ${key} not found`);
  return palette;
};

export const getAllPalettes = (): ColorPalette[] => {
  return Object.values(colorPalettes);
};

export const getPaletteKeys = (): PaletteKey[] => {
  return Object.keys(colorPalettes) as PaletteKey[];
};

export const getPaletteKey = (palette: ColorPalette): PaletteKey => {
  return Object.keys(colorPalettes).find((key) => colorPalettes[key] === palette) as PaletteKey;
};

export const getPaletteMap = (): PaletteMap => {
  return colorPalettes;
};

export const getDistributedColors = (palette: ColorPalette, dataLength: number): string[] => {
  const colors = palette.colors;
  const midIndex = Math.floor(colors.length / 2);

  if (dataLength === 1) {
    // For single item, return the middle color
    return [colors[midIndex]!];
  }

  if (dataLength === 2) {
    // For two items, return colors equally spaced around the middle
    return [colors[midIndex - 1]!, colors[midIndex + 1]!];
  }

  // For 3 or more items, distribute colors evenly around the middle
  const result: string[] = [];
  const offset = Math.floor((dataLength - 1) / 2);

  for (let i = 0; i < dataLength; i++) {
    const index = midIndex + (i - offset);
    result.push(colors[index] ?? colors[midIndex]!); // Fallback to middle color if index out of bounds
  }

  return result;
};



================================================
FILE: js/packages/react-ui/src/components/CheckBoxGroup/checkBoxGroup.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-checkbox-group {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: cssUtils.$spacing-3xs;
  border: 1px solid;
  border-radius: cssUtils.$rounded-m;

  &-clear {
    border-color: transparent;
    background-color: transparent;
    padding: cssUtils.$spacing-0;
  }

  &-card {
    border-color: cssUtils.$stroke-default;
    padding: cssUtils.$spacing-l;
  }

  &-sunk {
    border-color: cssUtils.$stroke-default;
    background-color: cssUtils.$bg-sunk;
    padding: cssUtils.$spacing-l;
  }
}



================================================
FILE: js/packages/react-ui/src/components/CheckBoxGroup/CheckBoxGroup.tsx
================================================
import clsx from "clsx";
import React from "react";
import { CheckBoxItemProps } from "../CheckBoxItem";

type CheckBoxGroupVariant = "clear" | "card" | "sunk";

interface CheckBoxGroupProps {
  children: React.ReactElement<CheckBoxItemProps> | React.ReactElement<CheckBoxItemProps>[];
  className?: string;
  style?: React.CSSProperties;
  variant?: CheckBoxGroupVariant;
}

const variantMap: Record<CheckBoxGroupVariant, string> = {
  clear: "crayon-checkbox-group-clear",
  card: "crayon-checkbox-group-card",
  sunk: "crayon-checkbox-group-sunk",
};

const CheckBoxGroup = React.forwardRef<HTMLDivElement, CheckBoxGroupProps>((props, ref) => {
  const { children, className, style, variant = "clear" } = props;
  return (
    <div
      ref={ref}
      className={clsx("crayon-checkbox-group", variantMap[variant], className)}
      style={style}
    >
      {children}
    </div>
  );
});

CheckBoxGroup.displayName = "CheckBoxGroup";

export { CheckBoxGroup, type CheckBoxGroupProps };



================================================
FILE: js/packages/react-ui/src/components/CheckBoxGroup/dependencies.ts
================================================
const dependencies = ["CheckBoxGroup"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/CheckBoxGroup/index.ts
================================================
export * from "./CheckBoxGroup";



================================================
FILE: js/packages/react-ui/src/components/CheckBoxGroup/stories/CheckBoxGroup.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { CheckBoxItem } from "../../CheckBoxItem";
import { CheckBoxGroup } from "../CheckBoxGroup";

const meta = {
  title: "Components/CheckBoxGroup",
  component: CheckBoxGroup,
  subcomponents: { CheckBoxItem } as any,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "```tsx\nimport { CheckBoxGroup, CheckBoxItem } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    variant: {
      control: "radio",
      options: ["clear", "card", "sunk"],
      description: "The visual style variant of the checkbox group",
      table: {
        category: "Appearance",
        type: {
          summary: "'clear' | 'card' | 'sunk'",
        },
        defaultValue: { summary: "clear" },
      },
    },
    children: {
      control: false,
      description: "The child elements of the checkbox group that accept CheckBoxItem components",
      table: {
        category: "Content",
        type: {
          summary: "ReactNode[] | ReactNode",
        },
        expanded: false,
      },
    },
    className: {
      control: false,
      description: "Additional CSS class name for custom styling",
      table: {
        category: "Styling",
        type: {
          summary: "string",
        },
        expanded: false,
      },
    },
    style: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: {
          summary: "CSSProperties",
        },
        expanded: false,
      },
    },
  },
  tags: ["!dev", "autodocs"],
} satisfies Meta<typeof CheckBoxGroup>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ClearVariant: Story = {
  args: {
    variant: "card",
    children: [
      <CheckBoxItem key="1" label="Option 1" />,
      <CheckBoxItem key="2" label="Option 2" />,
      <CheckBoxItem key="3" label="Option 3" />,
    ],
  },
};



================================================
FILE: js/packages/react-ui/src/components/CheckBoxItem/checkBoxItem.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-checkbox-item-container {
  display: flex;
  align-items: center;
  gap: cssUtils.$spacing-xs;
  width: 100%;
  max-width: 100%;
  overflow: hidden;
  padding-top: cssUtils.$spacing-3xs;
  padding-bottom: cssUtils.$spacing-3xs;
  padding-left: cssUtils.$spacing-0;
  padding-right: cssUtils.$spacing-2xs;
}

.crayon-checkbox-item-root {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 14px;
  height: 14px;
  border-radius: 2px;
  border: 1px solid cssUtils.$stroke-interactive-el;
  background-color: cssUtils.$bg-container;
  cursor: pointer;

  &[data-state="checked"] {
    background-color: cssUtils.$bg-brand-el;
    color: cssUtils.$primary-text;
  }

  &:not(:disabled):hover {
    border-color: cssUtils.$stroke-interactive-el-hover;
  }

  &:disabled {
    cursor: not-allowed;
    color: cssUtils.$disabled-text;
  }
}

.crayon-checkbox-item-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  color: cssUtils.$brand-text;
}

.crayon-checkbox-item-label {
  flex: 1;
  @include cssUtils.typography(primary, default);
  color: cssUtils.$primary-text;
  &:disabled {
    color: cssUtils.$disabled-text;
  }
}



================================================
FILE: js/packages/react-ui/src/components/CheckBoxItem/CheckBoxItem.tsx
================================================
import * as Checkbox from "@radix-ui/react-checkbox";
import clsx from "clsx";
import { Check } from "lucide-react";
import { CSSProperties, forwardRef, ReactNode, useId } from "react";

export interface CheckBoxItemProps {
  label?: ReactNode;
  className?: string;
  style?: CSSProperties;
  checked?: boolean;
  defaultChecked?: boolean;
  disabled?: boolean;
  required?: boolean;
  name?: string;
  value?: string;
  onChange?: (checked: boolean) => void;
}

const CheckBoxItem = forwardRef<HTMLButtonElement, CheckBoxItemProps>((props, ref) => {
  const { label, onChange, className, disabled, required, ...rest } = props;
  const id = useId();
  return (
    <div className="crayon-checkbox-item-container">
      <Checkbox.Root
        ref={ref}
        onCheckedChange={onChange}
        {...rest}
        id={id}
        className={clsx("crayon-checkbox-item-root", className)}
        disabled={disabled}
        required={required}
      >
        <Checkbox.Indicator className="crayon-checkbox-item-indicator">
          <Check size={11} />
        </Checkbox.Indicator>
      </Checkbox.Root>
      {label && (
        <label htmlFor={id} className="crayon-checkbox-item-label">
          {label}
        </label>
      )}
    </div>
  );
});

CheckBoxItem.displayName = "CheckBoxItem";

export { CheckBoxItem };



================================================
FILE: js/packages/react-ui/src/components/CheckBoxItem/dependencies.ts
================================================
const dependencies = ["CheckBoxItem"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/CheckBoxItem/index.ts
================================================
export * from "./CheckBoxItem";



================================================
FILE: js/packages/react-ui/src/components/CheckBoxItem/stories/CheckBoxItem.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { CheckBoxItem } from "../CheckBoxItem";

const meta: Meta<typeof CheckBoxItem> = {
  title: "Components/CheckBoxItem",
  component: CheckBoxItem,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { CheckBoxItem } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    label: {
      control: "text",
      defaultValue: "Default Checkbox",
      description: "The label of the checkbox",
      table: {
        type: {
          summary: "string",
        },
      },
    },
    checked: {
      control: "boolean",
      description: "State of the checkbox, used for controlled mode",
      table: {
        type: {
          summary: "boolean",
        },
        defaultValue: { summary: "false" },
      },
    },
    defaultChecked: {
      control: false,
      description:
        "The checked state of the checkbox when it is initially rendered. Use when you do not need to control its checked state.",
      table: {
        type: {
          summary: "boolean",
        },
        defaultValue: { summary: "false" },
      },
    },
    disabled: {
      control: "boolean",
      description: "Whether the checkbox is disabled or not",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
      },
    },
    required: {
      control: "boolean",
      description:
        "When true, indicates that the user must check the checkbox before the owning form can be submitted.",
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
      },
    },
    name: {
      control: false,
      description:
        "The name of the checkbox. Submitted with its owning form as part of a name/value pair.",
      table: {
        type: { summary: "string" },
      },
    },
    value: {
      control: false,
      description: "The value given as data when submitted with a `name`/`value` pair.",
      table: {
        type: { summary: "string" },
      },
    },
    onChange: {
      control: false,
      description: "The function to call when the checkbox is changed",
      table: {
        type: {
          summary: "(checked: boolean) => void",
        },
      },
    },
    className: {
      control: false,
      description: "The class name of the checkbox",
      table: {
        category: "Appearance",
        type: {
          summary: "string",
        },
      },
    },
    style: {
      control: false,
      description: "The style of the checkbox",
      table: {
        category: "Appearance",
        type: {
          summary: "CSSProperties",
        },
      },
    },
  },
  tags: ["!dev", "!autodocs"],
};

export default meta;
type Story = StoryObj<typeof CheckBoxItem>;

export const Default: Story = {
  args: {
    label: "Default Checkbox",
    onChange: (checked) => console.log("Checkbox changed:", checked),
  },
};

export const Checked: Story = {
  args: {
    label: "Checked Checkbox",
    checked: true,
    onChange: (checked) => console.log("Checkbox changed:", checked),
  },
};

export const Disabled: Story = {
  args: {
    label: "Disabled Checkbox",
    disabled: true,
    onChange: (checked) => console.log("Checkbox changed:", checked),
  },
};

export const DisabledChecked: Story = {
  args: {
    label: "Disabled Checked Checkbox",
    disabled: true,
    checked: true,
    onChange: (checked) => console.log("Checkbox changed:", checked),
  },
};



================================================
FILE: js/packages/react-ui/src/components/CodeBlock/codeBlock.scss
================================================
@use "../../cssUtils" as cssUtils;

/* Code Block Styles */
.crayon-code-block-wrapper {
  position: relative;

  &:hover {
    .crayon-code-block-copy-button {
      opacity: 1;
    }
  }

  .crayon-code-block-copy-button {
    position: absolute;
    right: 0.5rem;
    top: 0.5rem;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    &.crayon-code-block-copy-button-copied {
      color: cssUtils.$success-text;
      background-color: cssUtils.$bg-success;
    }
  }

  .crayon-code-block-syntax-highlighter {
    margin: 0 !important;
    border-radius: 0.5rem;
  }
}



================================================
FILE: js/packages/react-ui/src/components/CodeBlock/CodeBlock.tsx
================================================
import clsx from "clsx";
import { CheckCheck, Copy } from "lucide-react";
import { useState } from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { vscDarkPlus } from "react-syntax-highlighter/dist/esm/styles/prism";
import { IconButton } from "../IconButton";

export interface CodeBlockProps {
  language: string;
  codeString: string;
  theme?: {
    [key: string]: React.CSSProperties;
  };
}

export const CodeBlock = ({ language, codeString, theme }: CodeBlockProps) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(codeString);
    setCopied(true);
    setTimeout(() => setCopied(false), 1000);
  };

  return (
    <div className="crayon-code-block-wrapper">
      <IconButton
        onClick={handleCopy}
        variant="secondary"
        size={"small"}
        className={clsx("crayon-code-block-copy-button", {
          "crayon-code-block-copy-button-copied": copied,
        })}
        icon={copied ? <CheckCheck /> : <Copy />}
      />
      <SyntaxHighlighter
        style={theme ?? vscDarkPlus}
        language={language}
        PreTag="div"
        className="crayon-code-block-syntax-highlighter"
      >
        {codeString}
      </SyntaxHighlighter>
    </div>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CodeBlock/dependencies.ts
================================================
import IconButtonDeps from "../IconButton/dependencies";

const dependencies = ["CodeBlock", ...IconButtonDeps];

export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/CodeBlock/index.ts
================================================
export * from "./CodeBlock";



================================================
FILE: js/packages/react-ui/src/components/CodeBlock/stories/CodeBlock.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { CodeBlock } from "../CodeBlock";

const meta: Meta<typeof CodeBlock> = {
  title: "Components/CodeBlock",
  component: CodeBlock,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { CodeBlock } from '@crayonai/react-ui';\n```",
      },
    },
  },
  argTypes: {
    language: {
      control: false,
      description: "The language of the code block",
      table: {
        category: "Appearance",
        type: { summary: "string" },
      },
    },
    codeString: {
      control: "text",
      description: "The code to display in the block",
      table: {
        category: "Content",
        type: { summary: "string" },
      },
    },
    theme: {
      control: false,
      description:
        "The theme of the code block, see theme options [here](https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_STYLES_PRISM.MD)",
      table: {
        category: "Appearance",
        type: { summary: `{ [key: string]: CSSProperties; }` },
      },
    },
  },
  tags: ["autodocs", "!dev"],
};

export default meta;
type Story = StoryObj<typeof CodeBlock>;

export const JavaScript: Story = {
  args: {
    language: "javascript",
    codeString: `function greet(name) {
  return \`Hello, \${name}!\`;
}

console.log(greet('World'));`,
  },
};

export const Python: Story = {
  args: {
    language: "python",
    codeString: `def greet(name):
    return f"Hello, {name}!"

print(greet("World"))`,
  },
};

export const TypeScript: Story = {
  args: {
    language: "typescript",
    codeString: `interface User {
  name: string;
  age: number;
}

function greet(user: User): string {
  return \`Hello, \${user.name}!\`;
}

const user: User = { name: 'World', age: 42 };
console.log(greet(user));`,
  },
};



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/Container.tsx
================================================
import clsx from "clsx";
import { LayoutContextProvider } from "../../context/LayoutContext";
import { ShellStoreProvider } from "../Shell/store";

interface ContainerProps {
  children?: React.ReactNode;
  logoUrl: string;
  agentName: string;
  className?: string;
}

export const Container = ({ children, logoUrl, agentName, className }: ContainerProps) => {
  return (
    <ShellStoreProvider logoUrl={logoUrl} agentName={agentName}>
      <LayoutContextProvider layout="tray">
        <div className={clsx("crayon-copilot-shell-container", className)}>{children}</div>
      </LayoutContextProvider>
    </ShellStoreProvider>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/copilotShell.scss
================================================
@use "../../cssUtils" as cssUtils;
@use "./thread.scss";
@use "./header.scss";

.crayon-copilot-shell-container {
  display: flex;
  position: relative;
  height: 100dvh;
  width: 530px;
  overflow: hidden;

  border: 1px solid cssUtils.$stroke-default;
  border-width: 0 1px;

  background: cssUtils.$chat-container-bg;
  box-sizing: border-box;
  & * {
    box-sizing: border-box;
  }
}



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/dependencies.ts
================================================
import buttonDeps from "../Button/dependencies";
import iconButtonDeps from "../IconButton/dependencies";

const dependencies = ["Shell", ...iconButtonDeps, ...buttonDeps];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/header.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-copilot-shell-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: cssUtils.$spacing-m cssUtils.$spacing-l;
  border-bottom: 1px solid cssUtils.$stroke-default;
  background-color: cssUtils.$bg-container;
}

.crayon-copilot-shell-header-logo-container {
  display: flex;
  align-items: center;
  gap: cssUtils.$spacing-s;
  @include cssUtils.typography(title, medium);
}

.crayon-copilot-shell-header-logo {
  width: 32px;
  height: 32px;
  border-radius: cssUtils.$rounded-m;
}

.crayon-copilot-shell-header-agent-name {
  @include cssUtils.typography(title, medium);
  color: cssUtils.$primary-text;
}



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/Header.tsx
================================================
import clsx from "clsx";
import { useShellStore } from "../Shell/store";

export const Header = ({ className }: { className?: string }) => {
  const { logoUrl, agentName } = useShellStore((state) => ({
    logoUrl: state.logoUrl,
    agentName: state.agentName,
  }));

  return (
    <div className={clsx("crayon-copilot-shell-header", className)}>
      <div className="crayon-copilot-shell-header-logo-container">
        <img className="crayon-copilot-shell-header-logo" src={logoUrl} alt="Logo" />
        <span className="crayon-copilot-shell-header-agent-name">{agentName}</span>
      </div>
    </div>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/index.ts
================================================
export * from "./Container";
export * from "./Header";
export * from "./Thread";



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/thread.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-copilot-shell-thread-container {
  flex: 1;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.crayon-copilot-shell-thread-scroll-area {
  width: 100%;
  flex: 1;
  overflow: auto;
  padding: cssUtils.$spacing-l;
}

.crayon-copilot-shell-thread-messages {
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: cssUtils.$spacing-xl;
}

.crayon-copilot-shell-thread-message-assistant {
  width: 100%;
  overflow: hidden;

  // override theme variables so that other crayon components don't depend on chat colors
  // this solves the case where the crayon-card component is used in the thread but without card component
  --crayon-primary-text: #{cssUtils.$chat-assistant-response-text};
  --crayon-container-fills: #{cssUtils.$chat-assistant-response-bg};

  &__content {
    display: flex;
    flex-direction: column;
    gap: cssUtils.$spacing-s;
    overflow: hidden;
    overflow-wrap: break-word;
    flex-grow: 1;
  }

  &__text {
    @include cssUtils.typography(primary, default);
    color: cssUtils.$chat-assistant-response-text;
  }
}

.crayon-copilot-shell-thread-message-user {
  display: flex;
  justify-content: flex-end;

  &__content {
    @include cssUtils.typography(primary, default);
    padding: cssUtils.$spacing-m cssUtils.$spacing-l;
    background-color: cssUtils.$chat-user-response-bg;
    color: cssUtils.$chat-user-response-text;
    border-radius: cssUtils.$rounded-2xl;
    overflow-wrap: break-word;
    max-width: 100%;
  }
}

.crayon-copilot-shell-thread-composer {
  width: 100%;
  padding: cssUtils.$spacing-m cssUtils.$spacing-l cssUtils.$spacing-l;
  background-color: cssUtils.$bg-container;

  &__input-wrapper {
    border: 1.256px solid cssUtils.$stroke-default;
    display: flex;
    align-items: flex-end;
    gap: cssUtils.$spacing-s;
    padding: cssUtils.$spacing-m;
    border-radius: cssUtils.$rounded-l;
  }

  &__input {
    flex-grow: 1;
    padding: 0;
    resize: none;
    margin: auto 0px;
    max-height: 154px;
    outline: none;
    border: none;
    background: transparent;
    overflow: hidden;
    @include cssUtils.typography(primary, default);
    color: cssUtils.$primary-text;
    &::placeholder {
      color: cssUtils.$disabled-text;
    }
  }
}



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/Thread.tsx
================================================
import {
  Message,
  MessageProvider,
  useThreadActions,
  useThreadManagerSelector,
  useThreadState,
} from "@crayonai/react-core";
import clsx from "clsx";
import { ArrowRight, Square } from "lucide-react";
import React, { memo, useLayoutEffect, useRef } from "react";
import { useComposerState } from "../../hooks/useComposerState";
import { useScrollToBottom } from "../../hooks/useScrollToBottom";
import { IconButton } from "../IconButton";
import { MessageLoading as MessageLoadingComponent } from "../MessageLoading";

export const ThreadContainer = ({
  children,
  className,
}: {
  children?: React.ReactNode;
  className?: string;
}) => {
  return <div className={clsx("crayon-copilot-shell-thread-container", className)}>{children}</div>;
};

export const ScrollArea = ({
  children,
  className,
  scrollVariant = "always",
  userMessageSelector,
}: {
  children?: React.ReactNode;
  className?: string;
  /**
   * Scroll to bottom once the last message is added
   */
  scrollVariant?: "always" | "once" | "user-message-anchor";
  /**
   * Selector for the user message
   */
  userMessageSelector?: string;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const { messages, isRunning } = useThreadState();

  useScrollToBottom({
    ref,
    lastMessage: messages[messages.length - 1] || { id: "" },
    scrollVariant,
    userMessageSelector,
    isRunning,
  });

  return (
    <div ref={ref} className={clsx("crayon-copilot-shell-thread-scroll-area", className)}>
      {children}
    </div>
  );
};

const FallbackTemplate = ({ name, templateProps }: { name: string; templateProps: any }) => {
  return (
    <div>
      Unable to render template: {name} with props:
      {JSON.stringify(templateProps)}
    </div>
  );
};

const DefaultTextRenderer = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return <div className={className}>{children}</div>;
};

export const AssistantMessageContainer = ({
  children,
  className,
}: {
  children?: React.ReactNode;
  className?: string;
}) => {
  return (
    <div className={clsx("crayon-copilot-shell-thread-message-assistant", className)}>
      <div className="crayon-copilot-shell-thread-message-assistant__content">{children}</div>
    </div>
  );
};

export const UserMessageContainer = ({
  children,
  className,
}: {
  children?: React.ReactNode;
  className?: string;
}) => {
  return (
    <div className={clsx("crayon-copilot-shell-thread-message-user", className)}>
      <div className="crayon-copilot-shell-thread-message-user__content">{children}</div>
    </div>
  );
};

export const RenderMessage = memo(
  ({ message, className }: { message: Message; className?: string }) => {
    const responseTemplates = useThreadManagerSelector((store) => store.responseTemplates);
    const MessageContainer =
      message.role === "user" ? UserMessageContainer : AssistantMessageContainer;

    if (message.role === "assistant") {
      return (
        <MessageContainer className={className}>
          {message.message?.map((stringOrTemplate, i) => {
            if (stringOrTemplate.type === "text") {
              const TextRenderer = responseTemplates["text"]?.Component || DefaultTextRenderer;

              return (
                <TextRenderer
                  key={i}
                  className="crayon-copilot-shell-thread-message-assistant__text"
                >
                  {stringOrTemplate.text}
                </TextRenderer>
              );
            }

            const Template = responseTemplates[stringOrTemplate.name];
            const Fallback = responseTemplates["fallback"]?.Component || FallbackTemplate;
            return Template ? (
              <Template.Component key={i} {...stringOrTemplate.templateProps} />
            ) : (
              <Fallback
                key={i}
                name={stringOrTemplate.name}
                templateProps={stringOrTemplate.templateProps}
              />
            );
          })}
        </MessageContainer>
      );
    }

    return <MessageContainer>{message.message}</MessageContainer>;
  },
);

export const MessageLoading = () => {
  return (
    <div className="crayon-copilot-shell-thread-message-loading">
      <MessageLoadingComponent />
    </div>
  );
};

export const Messages = ({
  className,
  loader,
}: {
  className?: string;
  loader?: React.ReactNode;
}) => {
  const { messages, isRunning } = useThreadState();

  return (
    <div className={clsx("crayon-copilot-shell-thread-messages", className)}>
      {messages.map((message) => {
        if (message.isVisuallyHidden) {
          return null;
        }
        return (
          <MessageProvider key={message.id} message={message}>
            <RenderMessage message={message} />
          </MessageProvider>
        );
      })}
      {isRunning && loader}
    </div>
  );
};

export const Composer = ({ className }: { className?: string }) => {
  const { textContent, setTextContent } = useComposerState();
  const { processMessage, onCancel } = useThreadActions();
  const { isRunning } = useThreadState();
  const inputRef = useRef<HTMLTextAreaElement>(null);

  const handleSubmit = () => {
    if (!textContent.trim() || isRunning) {
      return;
    }

    processMessage({
      type: "prompt",
      role: "user",
      message: textContent,
    });

    setTextContent("");
  };

  useLayoutEffect(() => {
    const input = inputRef.current;
    if (!input) {
      return;
    }

    input.style.height = "0px";
    input.style.height = `${input.scrollHeight}px`;
  }, [textContent]);

  return (
    <div className={clsx("crayon-copilot-shell-thread-composer", className)}>
      <div className="crayon-copilot-shell-thread-composer__input-wrapper">
        <textarea
          ref={inputRef}
          value={textContent}
          onChange={(e) => setTextContent(e.target.value)}
          className="crayon-copilot-shell-thread-composer__input"
          placeholder="Type your message..."
          onKeyDown={(e) => {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault();
              handleSubmit();
            }
          }}
        />
        <IconButton
          onClick={isRunning ? onCancel : handleSubmit}
          icon={isRunning ? <Square size="1em" fill="currentColor" /> : <ArrowRight size="1em" />}
        />
      </div>
    </div>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/stories/Shell.stories.tsx
================================================
import {
  ChatProvider,
  Message,
  useThreadListManager,
  useThreadManager,
} from "@crayonai/react-core";
import {
  Composer,
  Container,
  Header,
  MessageLoading,
  Messages,
  ScrollArea,
  ThreadContainer,
} from "../../CopilotShell";
// @ts-ignore
import styles from "./style.module.scss";
import logoUrl from "./thesysdev_logo.jpeg";

export default {
  title: "Copilot Shell",
  tags: ["dev", "!autodocs"],
};

export const Default = {
  render: (args: any) => {
    const threadListManager = useThreadListManager({
      createThread: async () => {
        return {
          threadId: crypto.randomUUID(),
          title: "test",
          createdAt: new Date(),
          isRunning: false,
        };
      },
      fetchThreadList: async () => {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return [
          {
            threadId: "1",
            title: "test",
            createdAt: new Date(),
            isRunning: false,
          },
          {
            threadId: "2",
            title: "test 2",
            createdAt: new Date(),
            isRunning: false,
          },
          {
            threadId: "3",
            title: "test 3",
            createdAt: new Date(),
            isRunning: false,
          },
        ];
      },
      deleteThread: async () => {},
      updateThread: async (t) => t,
      onSwitchToNew: () => {},
      onSelectThread: () => {},
    });

    const threadManager = useThreadManager({
      threadId: threadListManager.selectedThreadId,
      loadThread: async () => {
        return [
          {
            id: crypto.randomUUID(),
            role: "user",
            type: "prompt",
            message: "Hello",
          },
          {
            id: crypto.randomUUID(),
            role: "assistant",
            type: "response",
            message: [{ type: "text", text: "Hello" }],
          },
        ];
      },
      onProcessMessage: async ({ message, threadManager, abortController }) => {
        const newMessage = Object.assign({}, message, {
          id: crypto.randomUUID(),
        }) as Message;
        threadManager.appendMessages(newMessage);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return [
          {
            id: crypto.randomUUID(),
            role: "assistant",
            type: "response",
            message: [{ type: "text", text: "sadfasdf" }],
          },
        ];
      },
      responseTemplates: [],
    });

    return (
      <div className={styles.container}>
        <div className={styles.left} />
        <ChatProvider threadListManager={threadListManager} threadManager={threadManager}>
          <Container logoUrl={logoUrl} agentName="Crayon">
            <ThreadContainer>
              <Header />
              <ScrollArea>
                <Messages loader={<MessageLoading />} />
              </ScrollArea>
              <Composer />
            </ThreadContainer>
          </Container>
        </ChatProvider>
      </div>
    );
  },
};



================================================
FILE: js/packages/react-ui/src/components/CopilotShell/stories/style.module.scss
================================================
.container {
  display: flex;
}

.left {
  flex-grow: 1;
  background: white;
}



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/ComposedCopilot.tsx
================================================
import {
  Composer,
  Container,
  Header,
  MessageLoading,
  Messages,
  ScrollArea,
  ThreadContainer,
} from "../CopilotShell";

interface ComposedCopilotProps {
  logoUrl?: string;
  agentName?: string;
  messageLoadingComponent?: () => React.ReactNode;
}

export const ComposedCopilot = ({
  logoUrl = "https://crayonai.org/img/logo.png",
  agentName = "My Agent",
  messageLoadingComponent: MessageLoadingComponent = MessageLoading,
}: ComposedCopilotProps) => {
  return (
    <Container logoUrl={logoUrl} agentName={agentName}>
      <ThreadContainer>
        <Header />
        <ScrollArea>
          <Messages loader={<MessageLoadingComponent />} />
        </ScrollArea>
        <Composer />
      </ThreadContainer>
    </Container>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/ComposedStandalone.tsx
================================================
import {
  Composer,
  Container,
  MessageLoading,
  Messages,
  MobileHeader,
  NewChatButton,
  ScrollArea,
  SidebarContainer,
  SidebarContent,
  SidebarHeader,
  SidebarSeparator,
  ThreadContainer,
  ThreadList,
} from "../Shell";

interface ComposedStandaloneProps {
  logoUrl?: string;
  agentName?: string;
  messageLoadingComponent?: () => React.ReactNode;
}

export const ComposedStandalone = ({
  logoUrl = "https://crayonai.org/img/logo.png",
  agentName = "My Agent",
  messageLoadingComponent: MessageLoadingComponent = MessageLoading,
}: ComposedStandaloneProps) => {
  return (
    <Container logoUrl={logoUrl} agentName={agentName}>
      <SidebarContainer>
        <SidebarHeader />
        <SidebarContent>
          <NewChatButton />
          <SidebarSeparator />
          <ThreadList />
        </SidebarContent>
      </SidebarContainer>
      <ThreadContainer>
        <MobileHeader />
        <ScrollArea>
          <Messages loader={<MessageLoadingComponent />} />
        </ScrollArea>
        <Composer />
      </ThreadContainer>
    </Container>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/crayonChat.scss
================================================



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/CrayonChat.tsx
================================================
import {
  ChatProvider,
  CreateMessage,
  Message,
  processStreamedMessage,
  ResponseTemplate,
  Thread,
  ThreadListManager,
  ThreadManager,
  UserMessage,
  useThreadListManager,
  useThreadManager,
} from "@crayonai/react-core";
import { useEffect, useRef } from "react";
import invariant from "tiny-invariant";
import { ThemeProps, ThemeProvider } from "../ThemeProvider";
import { ComposedCopilot } from "./ComposedCopilot";
import { ComposedStandalone } from "./ComposedStandalone";

type CrayonChatProps = {
  // options used when threadManager not provided
  processMessage?: (params: {
    threadId: string;
    messages: Message[];
    abortController: AbortController;
  }) => Promise<Response>;
  onUpdateMessage?: (props: { message: Message }) => void;
  processStreamedMessage?: typeof processStreamedMessage;
  responseTemplates?: ResponseTemplate[];

  theme?: ThemeProps;

  // options used when threadListManager is not provided
  createThread?: (message: CreateMessage) => Promise<Thread>;

  threadManager?: ThreadManager;
  threadListManager?: ThreadListManager;

  logoUrl?: string;
  agentName?: string;
  type?: "copilot" | "standalone";

  messageLoadingComponent?: () => React.ReactNode;
};

export const CrayonChat = ({
  processMessage,
  threadManager: userThreadManager,
  threadListManager: userThreadListManager,
  logoUrl = "https://crayonai.org/img/logo.png",
  agentName = "My Agent",
  responseTemplates,
  createThread,
  onUpdateMessage,
  processStreamedMessage: userProcessStreamedMessage,
  messageLoadingComponent,
  type = "standalone",
  theme,
}: CrayonChatProps) => {
  invariant(processMessage || userThreadManager, "processMessage or threadManager is required");

  const threadMessages = useRef<{ [threadId: string]: Message[] }>({});
  const defaultThreadListManager = useThreadListManager({
    fetchThreadList: () => Promise.resolve([]),
    deleteThread: () => Promise.resolve(),
    updateThread: (t) => Promise.resolve(t),
    onSwitchToNew: () => {},
    onSelectThread: () => {},
    createThread: (message) => {
      if (createThread) {
        return createThread(message);
      }
      return Promise.resolve({
        threadId: crypto.randomUUID(),
        title: message.message!,
        createdAt: new Date(),
        messages: [message],
      });
    },
  });
  const threadListManager = userThreadListManager ?? defaultThreadListManager;

  const defaultThreadManager = useThreadManager({
    threadId: threadListManager.selectedThreadId,
    shouldResetThreadState: threadListManager.shouldResetThreadState,
    loadThread: (threadId) => {
      const messages = threadMessages.current[threadId] ?? [];
      return Promise.resolve(messages);
    },
    onUpdateMessage: onUpdateMessage,
    onProcessMessage: async ({ message, abortController, threadManager }) => {
      const newMessage: UserMessage = {
        id: crypto.randomUUID(),
        role: "user",
        type: "prompt",
        message: message.message,
      };
      threadManager.appendMessages(newMessage);

      let threadId = threadListManager.selectedThreadId;
      if (!threadId) {
        const newThread = await threadListManager.createThread(message as UserMessage);
        threadId = newThread.threadId;
        threadListManager.selectThread(threadId, false);
      }

      invariant(processMessage, "processMessage is required");

      const response = await processMessage({
        threadId,
        messages: [...threadManager.messages, newMessage],
        abortController,
      });
      await (userProcessStreamedMessage || processStreamedMessage)({
        response,
        createMessage: threadManager.appendMessages,
        updateMessage: threadManager.updateMessage,
        deleteMessage: threadManager.deleteMessage,
      });

      return [];
    },
    responseTemplates: responseTemplates ?? [],
  });

  const threadManager = userThreadManager ?? defaultThreadManager;

  useEffect(() => {
    if (threadListManager.selectedThreadId) {
      threadMessages.current[threadListManager.selectedThreadId] = threadManager.messages;
    }
  }, [threadManager.messages]);

  return (
    <ThemeProvider {...theme}>
      <ChatProvider threadListManager={threadListManager} threadManager={threadManager}>
        {type === "copilot" ? (
          <ComposedCopilot
            logoUrl={logoUrl}
            agentName={agentName}
            messageLoadingComponent={messageLoadingComponent}
          />
        ) : (
          <ComposedStandalone
            logoUrl={logoUrl}
            agentName={agentName}
            messageLoadingComponent={messageLoadingComponent}
          />
        )}
      </ChatProvider>
    </ThemeProvider>
  );
};



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/dependencies.ts
================================================
import shellDeps from "../Shell/dependencies";

const dependencies = ["CrayonChat", ...shellDeps];

export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/index.ts
================================================
export { CrayonChat } from "./CrayonChat";



================================================
FILE: js/packages/react-ui/src/components/CrayonChat/stories/CrayonChat.stories.tsx
================================================
import { Message, useThreadListManager, useThreadManager } from "@crayonai/react-core";
import { CrayonChat } from "../CrayonChat";

export default {
  title: "Components/CrayonChat",
  tags: ["dev", "!autodocs"],
  argTypes: {
    type: {
      control: "select",
      options: ["standalone", "copilot"],
    },
  },
};

export const Default = {
  args: {
    type: "standalone",
  },
  render: (args: any) => {
    const threadListManager = useThreadListManager({
      createThread: async () => {
        return {
          threadId: crypto.randomUUID(),
          title: "test",
          createdAt: new Date(),
          isRunning: false,
        };
      },
      fetchThreadList: async () => {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return [
          {
            threadId: "1",
            title: "test",
            createdAt: new Date(),
            isRunning: false,
          },
          {
            threadId: "2",
            title: "test 2",
            createdAt: new Date(),
            isRunning: false,
          },
          {
            threadId: "3",
            title: "test 3",
            createdAt: new Date(),
            isRunning: false,
          },
        ];
      },
      deleteThread: async () => {},
      updateThread: async (t) => t,
      onSwitchToNew: () => {},
      onSelectThread: () => {},
    });

    const threadManager = useThreadManager({
      threadId: threadListManager.selectedThreadId,
      loadThread: async () => {
        return [
          {
            id: crypto.randomUUID(),
            role: "user",
            type: "prompt",
            message: "Hello",
          },
          {
            id: crypto.randomUUID(),
            role: "assistant",
            type: "response",
            message: [{ type: "text", text: "Hello" }],
          },
        ];
      },
      onProcessMessage: async ({ message, threadManager, abortController }) => {
        const newMessage = Object.assign({}, message, {
          id: crypto.randomUUID(),
        }) as Message;
        threadManager.appendMessages(newMessage);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return [
          {
            id: crypto.randomUUID(),
            role: "assistant",
            type: "response",
            message: [{ type: "text", text: "sadfasdf" }],
          },
        ];
      },
      responseTemplates: [],
    });

    return (
      <CrayonChat
        threadListManager={threadListManager}
        threadManager={threadManager}
        type={args.type}
      />
    );
  },
};



================================================
FILE: js/packages/react-ui/src/components/DatePicker/datePicker.scss
================================================
@forward "./helpers/components/helperComponents";
@forward "./helpers/components/datePickerRenderer";
@forward "./helpers/components/floatingDatePickerRenderer";
@forward "./helpers/utils/datePickerBaseStyle";



================================================
FILE: js/packages/react-ui/src/components/DatePicker/DatePicker.tsx
================================================
import { useState } from "react";
import { DateRange } from "react-day-picker";
import { useLayoutContext } from "../../context/LayoutContext";
import { FloatingDatePickerRenderer } from "./helpers/components/FloatingDatePickerRenderer";
import { DatePickerProvider } from "./helpers/context/DatePickerContext";

export interface DatePickerProps {
  mode?: "single" | "range";
  selectedSingleDate?: Date;
  selectedRangeDates?: DateRange;
  setSelectedSingleDate?: (date?: Date) => void;
  setSelectedRangeDates?: (range?: DateRange) => void;
  className?: string;
  style?: React.CSSProperties;
}

const DatePicker = (props: DatePickerProps) => {
  const { layout } = useLayoutContext();

  const {
    mode = "single",
    selectedSingleDate,
    selectedRangeDates,
    setSelectedSingleDate,
    setSelectedRangeDates,
    className,
    style,
  } = props;

  const [internalSelectedDate, setInternalSelectedDate] = useState<Date | undefined>(
    selectedSingleDate,
  );
  const [internalSelectedRange, setInternalSelectedRange] = useState<DateRange | undefined>(
    selectedRangeDates,
  );

  // this derived setter state is used to make this component more flexible
  // it allows the user to pass in a setter function from the parent component
  // if the parent component does not pass in a setter function, the internal setter state is used
  // this allows the user to pass in a setter function from the parent component, but still have the internal state be set

  // this design decision closely follow

  const selectedDateHandler = (selectedDate?: Date) => {
    if (selectedSingleDate) {
      setSelectedSingleDate?.(selectedDate);
      return;
    }

    setSelectedSingleDate?.(selectedDate);
    setInternalSelectedDate(selectedDate);
  };

  const selectedRangeHandler = (selectedRange?: DateRange) => {
    if (selectedRangeDates) {
      setSelectedRangeDates?.(selectedRange);
      return;
    }

    setSelectedRangeDates?.(selectedRange);
    setInternalSelectedRange(selectedRange);
  };

  return (
    <DatePickerProvider
      mode={mode}
      botType={layout}
      selectedDateFromParent={selectedSingleDate ?? internalSelectedDate}
      selectedRangeFromParent={selectedRangeDates ?? internalSelectedRange}
      setSelectedDateFromParent={selectedDateHandler}
      setSelectedRangeFromParent={selectedRangeHandler}
    >
      <FloatingDatePickerRenderer className={className} style={style} />
    </DatePickerProvider>
  );
};

export { DatePicker };



================================================
FILE: js/packages/react-ui/src/components/DatePicker/dependencies.ts
================================================
import IconButtonDeps from "../IconButton/dependencies";
import SelectDeps from "../Select/dependencies";

const dependencies = ["DatePicker", ...IconButtonDeps, ...SelectDeps];

export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/DatePicker/index.ts
================================================
export * from "./DatePicker";



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/components/datePickerRenderer.scss
================================================
.crayon-date-picker-renderer-single-mode {
  width: 100%;
  height: 100%;
}

.crayon-date-picker-renderer-range-mode {
  width: 100%;
  height: 100%;
}



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/components/DatePickerRenderer.tsx
================================================
import clsx from "clsx";
import { forwardRef, useRef } from "react";
import { DayPicker } from "react-day-picker";
import { useMultipleRefs } from "../../../../hooks/useMultipleRefs";
import { useDatePicker } from "../context/DatePickerContext";
import { getDayPickerStyles } from "../utils/styles";
import {
  MonthsDropdown,
  NextMonthButton,
  PreviousMonthButton,
  YearsDropdown,
} from "./HelperComponents";

const DatepickerRenderer = forwardRef<
  HTMLDivElement,
  { className?: string; style?: React.CSSProperties }
>(({ className, style }, ref) => {
  const { selectedDate, selectedRange, mode, botType, setSelectedDate, setSelectedRange } =
    useDatePicker();

  const { DateSingleClasses, DateRangeClasses } = getDayPickerStyles(botType);

  const containerRef = useRef<HTMLDivElement>(null);

  const assignRef = useMultipleRefs(ref, containerRef);

  const commonProps = {
    captionLayout: "dropdown" as const,
    startMonth: new Date(1900, 0),
    endMonth: new Date(2100, 11),
    components: {
      NextMonthButton,
      PreviousMonthButton,
      MonthsDropdown: (props: any) => (
        <MonthsDropdown {...props} container={containerRef.current} />
      ),
      YearsDropdown: (props: any) => <YearsDropdown {...props} container={containerRef.current} />,
    },
  };

  if (mode === "single") {
    return (
      <div
        ref={assignRef}
        className={clsx("crayon-date-picker-renderer-single-mode", className)}
        style={style}
      >
        <DayPicker
          mode="single"
          selected={selectedDate}
          onSelect={setSelectedDate}
          classNames={DateSingleClasses}
          {...commonProps}
        />
      </div>
    );
  }

  return (
    <div
      ref={assignRef}
      className={clsx("crayon-date-picker-renderer-range-mode", className)}
      style={style}
    >
      <DayPicker
        mode="range"
        selected={selectedRange}
        onSelect={setSelectedRange}
        classNames={DateRangeClasses}
        {...commonProps}
      />
    </div>
  );
});

export { DatepickerRenderer };



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/components/floatingDatePickerRenderer.scss
================================================
@use "../../../../cssUtils" as cssUtils;

/*
    Floating Date Picker Renderer Container Styles
*/
/*------------------------------------------------------------------------------------------------*/

.crayon-date-picker-renderer-floating-container {
  position: relative;
}

/*
    Floating Date Picker Renderer Input Styles
*/
/*------------------------------------------------------------------------------------------------*/

.crayon-date-picker-renderer-floating-input-container {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border: 1px solid cssUtils.$stroke-default;
  border-radius: cssUtils.$rounded-xs;
  background: cssUtils.$bg-container;
  padding: cssUtils.$spacing-xs cssUtils.$spacing-s;
  @include cssUtils.typography(primary, default);
  color: cssUtils.$primary-text;
  cursor: pointer;
  box-shadow: cssUtils.$shadow-s;
  width: 100%;

  &:disabled {
    color: cssUtils.$disabled-text;
    cursor: not-allowed;
  }

  &-open {
    border-color: cssUtils.$stroke-interactive-el-selected;
    background-color: cssUtils.$bg-container-hover;
  }

  &-not-open {
    &:hover {
      border-color: cssUtils.$stroke-default;
      background-color: cssUtils.$bg-container-hover;
    }
  }

  &-has-no-selected-date {
    color: cssUtils.$secondary-text;
  }
}

.crayon-date-picker-renderer-floating-input-container-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.crayon-date-picker-renderer-floating-input-container-icon {
  transform: rotate(180deg);
}

/*
    Floating Date Picker Renderer Menu Styles
*/
/*------------------------------------------------------------------------------------------------*/

.crayon-date-picker-renderer-floating-reference {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.crayon-date-picker-renderer-floating-content {
  z-index: 50;
}

.crayon-date-picker-renderer-floating-menu {
  background: cssUtils.$bg-container;
  border-radius: cssUtils.$rounded-m;
  box-shadow: cssUtils.$shadow-s;
}



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/components/FloatingDatePickerRenderer.tsx
================================================
import { autoUpdate, flip, offset, useFloating } from "@floating-ui/react-dom";
import clsx from "clsx";
import { ChevronDown } from "lucide-react";
import { forwardRef, useEffect, useRef } from "react";
import { createPortal } from "react-dom";
import { useMultipleRefs } from "../../../../hooks/useMultipleRefs";
import { useDatePicker } from "../context/DatePickerContext";
import { formatDateRange, formatSingleDate } from "../utils/helperFn";
import { DatepickerRenderer } from "./DatePickerRenderer";

const FloatingDateInput = () => {
  const { mode, selectedDate, selectedRange, isOpen, setIsOpen } = useDatePicker();
  const hasSelectedDate =
    mode === "single"
      ? !!selectedDate
      : !!(selectedRange && selectedRange.from && selectedRange.to);

  return (
    <div
      className={clsx("crayon-date-picker-renderer-floating-input-container", {
        "crayon-date-picker-renderer-floating-input-container-open": isOpen,
        "crayon-date-picker-renderer-floating-input-container-not-open": !isOpen,
        "crayon-date-picker-renderer-floating-input-container-has-no-selected-date":
          !hasSelectedDate,
      })}
      onClick={(e) => {
        e.stopPropagation();
        setIsOpen(!isOpen);
      }}
    >
      <span className="crayon-date-picker-renderer-floating-input-container-text">
        {mode === "single" ? formatSingleDate(selectedDate) : formatDateRange(selectedRange)}
      </span>
      <ChevronDown
        size={16}
        className={clsx({ "crayon-date-picker-renderer-floating-input-container-icon": isOpen })}
      />
    </div>
  );
};

const FloatingDatePicker = forwardRef<HTMLDivElement>((_, ref) => {
  const { isOpen } = useDatePicker();
  const menuPositionDivRef = useRef<HTMLDivElement>(null);

  const {
    refs: { setFloating, setReference },
    floatingStyles,
  } = useFloating({
    strategy: "absolute",
    placement: "bottom-start",
    whileElementsMounted: autoUpdate,
    middleware: [offset(5), flip()],
  });

  const menuPositionDivRefs = useMultipleRefs(setReference, menuPositionDivRef);
  const floatingRef = useMultipleRefs(setFloating, ref);

  if (!isOpen) {
    return null;
  }

  return (
    <>
      <div ref={menuPositionDivRefs} className="crayon-date-picker-renderer-floating-reference" />
      {createPortal(
        <div
          ref={floatingRef}
          style={{ ...floatingStyles, width: "fit-content" }}
          className="crayon-date-picker-renderer-floating-content"
        >
          <div className="crayon-date-picker-renderer-floating-menu">
            <DatepickerRenderer />
          </div>
        </div>,
        document.body,
      )}
    </>
  );
});

export const FloatingDatePickerRenderer = ({
  className,
  style,
}: {
  className?: string;
  style?: React.CSSProperties;
}) => {
  const { isOpen, setIsOpen } = useDatePicker();
  const menuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isOpen) return;

    const handleClick = (e: MouseEvent) => {
      if (menuRef.current?.contains(e.target as Node)) {
        return;
      }
      setIsOpen(false);
    };

    document.body.addEventListener("click", handleClick);

    return () => {
      document.body.removeEventListener("click", handleClick);
    };
  }, [isOpen, setIsOpen]);

  return (
    <div
      className={clsx("crayon-date-picker-renderer-floating-container", className)}
      style={style}
    >
      <FloatingDateInput />
      <FloatingDatePicker ref={menuRef} />
    </div>
  );
};



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/components/helperComponents.scss
================================================
@use "../../../../cssUtils" as cssUtils;

.crayon-date-picker-select-content-months {
  padding: cssUtils.$spacing-2xs 0;
  background-color: cssUtils.$bg-container;
  box-shadow: none;
}

.crayon-date-picker-select-content-years {
  max-height: 295px;
  min-width: 362px;
  padding: cssUtils.$spacing-2xs 0;
  background-color: cssUtils.$bg-container;
  box-shadow: none;
  .crayon-date-picker-select-viewport {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 4px;

    &-mobile {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .crayon-date-picker-select-item {
    display: flex;
    align-items: center;
    justify-content: center;
    align-self: center;
    justify-self: center;
    border-radius: cssUtils.$rounded-s;
    padding: cssUtils.$spacing-s;

    &:hover {
      background-color: cssUtils.$bg-container-hover;
    }
  }
}



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/components/HelperComponents.tsx
================================================
import * as SelectPrimitive from "@radix-ui/react-select";
import clsx from "clsx";
import debounce from "lodash-es/debounce";
import { ChevronLeft, ChevronRight } from "lucide-react";
import {
  ButtonHTMLAttributes,
  DetailedHTMLProps,
  forwardRef,
  SelectHTMLAttributes,
  useEffect,
  useState,
} from "react";
import { ClassNames, CustomComponents, DropdownOption } from "react-day-picker";
import "react-day-picker/style.css";
import { IconButton } from "../../../IconButton";
import { Select, SelectItem, SelectTrigger, SelectValue } from "../../../Select";
import { getMonthName, getMonthNumber } from "../utils/helperFn";

export const PreviousMonthButton = (
  props: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>,
) => {
  const { onClick, disabled, className, ...rest } = props;
  return (
    <IconButton
      icon={<ChevronLeft size={18} />}
      variant="secondary"
      size="medium"
      onClick={onClick}
      disabled={disabled}
      className={className}
      {...rest}
    />
  );
};

export const NextMonthButton = (
  props: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>,
) => {
  const { onClick, disabled, className, ...rest } = props;
  return (
    <IconButton
      icon={<ChevronRight size={18} />}
      variant="secondary"
      size="medium"
      onClick={onClick}
      disabled={disabled}
      className={className}
      {...rest}
    />
  );
};

// this component is overriding the default SelectContent component to allow for a container prop we do not wish to give to the user
const SelectContent = forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> & {
    container?: HTMLDivElement | null;
    viewportClassName?: string;
  }
>(({ className, children, position = "popper", viewportClassName, container, ...props }, ref) => (
  <SelectPrimitive.Portal container={container || document.body}>
    <SelectPrimitive.Content
      ref={ref}
      className={clsx("crayon-select-content", className)}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={clsx("crayon-select-viewport", viewportClassName)}
        data-position={position}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));

export const MonthsDropdown = (
  props: {
    classNames: ClassNames;
    components: CustomComponents;
    options?: DropdownOption[];
  } & Omit<
    DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>,
    "children"
  > & {
      container?: HTMLDivElement | null;
    },
) => {
  const {
    className,
    disabled,
    onChange,
    options,
    value,
    key,
    "aria-label": ariaLabel,
    container,
  } = props;

  const [containerWidth, setContainerWidth] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);

  useEffect(() => {
    if (!container) return;

    const targetElement = container.children[0]?.children[0];
    if (!targetElement) return;

    const resizeObserver = new ResizeObserver(
      debounce((entries) => {
        const { width, height } = entries[0]?.contentRect || {};
        setContainerWidth(width || 0);
        setContainerHeight(height || 0);
      }, 100),
    );

    resizeObserver.observe(targetElement);

    return () => {
      resizeObserver.disconnect();
    };
  }, [container]);

  return (
    <Select
      onValueChange={(value) =>
        onChange?.({
          target: { value: getMonthNumber(value) },
        } as any)
      }
      value={getMonthName(Number(value))}
      disabled={disabled}
      key={key}
      aria-label={ariaLabel}
    >
      <SelectTrigger className={className}>
        <SelectValue placeholder={"Select a month"} />
      </SelectTrigger>
      <SelectContent
        container={container}
        className="crayon-date-picker-select-content-months"
        sideOffset={12}
        alignOffset={0}
        style={{
          maxHeight: `${containerHeight - 45}px`,
          minWidth: `${containerWidth}px`,
        }}
      >
        {options?.map((option) => (
          <SelectItem
            key={option.value}
            value={getMonthName(option.value)}
            disabled={option.disabled}
          >
            {option.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};

export const YearsDropdown = (
  props: {
    classNames: ClassNames;
    components: CustomComponents;
    options?: DropdownOption[];
  } & Omit<
    DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>,
    "children"
  > & {
      container?: HTMLDivElement | null;
      botType: "mobile" | "fullscreen" | "tray" | "copilot";
    },
) => {
  const {
    className,
    disabled,
    onChange,
    options,
    value,
    key,
    "aria-label": ariaLabel,
    container,
    botType,
  } = props;

  const [containerWidth, setContainerWidth] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);

  useEffect(() => {
    if (!container) return;

    const targetElement = container.children[0]?.children[0];
    if (!targetElement) return;

    const resizeObserver = new ResizeObserver(
      debounce((entries) => {
        const { width, height } = entries[0]?.contentRect || {};
        setContainerWidth(width || 0);
        setContainerHeight(height || 0);
      }, 100),
    );

    resizeObserver.observe(targetElement);

    return () => {
      resizeObserver.disconnect();
    };
  }, [container]);

  return (
    <Select
      onValueChange={(value) =>
        onChange?.({
          target: { value: Number(value) },
        } as any)
      }
      value={String(value)}
      disabled={disabled}
      key={key}
      aria-label={ariaLabel}
    >
      <SelectTrigger className={className}>
        <SelectValue placeholder={"Select a month"} />
      </SelectTrigger>
      <SelectContent
        container={container}
        className="crayon-date-picker-select-content-years"
        viewportClassName={clsx(
          "crayon-date-picker-select-viewport",
          botType === "mobile" && "crayon-date-picker-select-viewport-mobile",
        )}
        sideOffset={12}
        alignOffset={-95}
        style={{
          minHeight: `${containerHeight - 45}px`,
          maxHeight: `${containerHeight - 45}px`,
          minWidth: `${containerWidth + 10}px`,
          maxWidth: `${containerWidth + 10}px`,
        }}
      >
        {options?.map((option) => (
          <SelectItem
            key={option.value}
            value={String(option.value)}
            disabled={option.disabled}
            showTick={false}
            className="crayon-date-picker-select-item"
          >
            {option.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/context/DatePickerContext.tsx
================================================
import React, { createContext, useContext, useState } from "react";
import { DateRange } from "react-day-picker";

interface DatePickerContextType {
  selectedDate: Date | undefined;
  selectedRange: DateRange | undefined;
  isOpen: boolean;
  mode: "single" | "range";
  botType: "mobile" | "fullscreen" | "tray" | "copilot";

  setSelectedDate: (date: Date | undefined) => void;
  setSelectedRange: (range: DateRange | undefined) => void;
  setIsOpen: (isOpen: boolean) => void;
}

const defaultContext: DatePickerContextType = {
  selectedDate: undefined,
  selectedRange: { from: undefined, to: undefined },
  isOpen: false,
  mode: "single",
  botType: "fullscreen",

  setSelectedDate: (_date: Date | undefined) => {},
  setSelectedRange: (_range: DateRange | undefined) => {},
  setIsOpen: (_isOpen: boolean) => {},
};

const DatePickerContext = createContext<DatePickerContextType>(defaultContext);

export const useDatePicker = () => {
  const context = useContext(DatePickerContext);
  if (!context) {
    throw new Error("useDatePicker must be used within a DatePickerProvider");
  }
  return context;
};

interface DatePickerProviderProps {
  children: React.ReactNode;
  // DatePicker State needed from parent
  selectedDateFromParent: Date | undefined;
  selectedRangeFromParent: DateRange | undefined;
  mode: "single" | "range";
  botType: "mobile" | "fullscreen" | "tray" | "copilot";

  setSelectedDateFromParent: (date: Date | undefined) => void;
  setSelectedRangeFromParent: (range: DateRange | undefined) => void;
}

export const DatePickerProvider: React.FC<DatePickerProviderProps> = ({
  children,

  selectedDateFromParent,
  selectedRangeFromParent,
  setSelectedDateFromParent,
  setSelectedRangeFromParent,

  mode,
  botType,
}) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <DatePickerContext.Provider
      value={{
        // DatePicker State needed from parent
        selectedDate: selectedDateFromParent,
        selectedRange: selectedRangeFromParent,
        setSelectedDate: setSelectedDateFromParent,
        setSelectedRange: setSelectedRangeFromParent,

        mode,

        isOpen,
        setIsOpen,

        botType,
      }}
    >
      {children}
    </DatePickerContext.Provider>
  );
};

export default DatePickerContext;



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/utils/datePickerBaseStyle.scss
================================================
@use "../../../../cssUtils" as cssUtils;
/* Base styles for all date picker components range or single */
/* ------------------------------------------------------------ */

.crayon-date-picker-root {
  @include cssUtils.typography(primary, default);
  background-color: cssUtils.$bg-container;
  padding: cssUtils.$spacing-l;
  width: fit-content;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-radius: cssUtils.$rounded-xl;
}

.crayon-date-picker-nav {
  &-mobile {
    gap: cssUtils.$spacing-s;
  }
  &-fullscreen {
    gap: cssUtils.$spacing-m;
  }
  &-tray {
    gap: cssUtils.$spacing-m;
  }
  &-copilot {
    gap: cssUtils.$spacing-m;
  }
}

.crayon-date-picker-dropdowns {
  &-mobile {
    gap: cssUtils.$spacing-2xs;
  }
  &-fullscreen {
    gap: cssUtils.$spacing-s;
  }
  &-tray {
    gap: cssUtils.$spacing-s;
  }
  &-copilot {
    gap: cssUtils.$spacing-s;
  }
  &-copilot {
    gap: cssUtils.$spacing-s;
  }
}

.crayon-date-picker-month-grid {
  table-layout: fixed;
  width: 100%;
  border-collapse: collapse;
  max-width: 308px;
}

.crayon-date-picker-button-next {
  display: none !important;
}

.crayon-date-picker-button-previous {
  display: none !important;
}

.crayon-date-picker-today {
  &[data-today]:not([aria-selected]) {
    background-color: cssUtils.$bg-sunk;
    border-radius: cssUtils.$rounded-m;
  }
}

.crayon-date-picker-disabled {
  cursor: not-allowed;
  color: cssUtils.$disabled-text;
}

.crayon-date-picker-weekdays {
  color: cssUtils.$primary-text;
}

.crayon-date-picker-chevron {
  fill: cssUtils.$bg-brand-el;
}

.crayon-date-picker-month {
  color: cssUtils.$primary-text;
}

.crayon-date-picker-month-dropdown {
  cursor: pointer;
}

.crayon-date-picker-year-dropdown {
  cursor: pointer;
}

/* Base styles for all date picker components single */
/* ------------------------------------------------------------ */

.crayon-date-picker-single-day-button {
  cursor: pointer;
  background: transparent;
  border: 1px solid transparent;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  aspect-ratio: 1/1;
}

.crayon-date-picker-single-day {
  width: 100%;
  height: 100%;
  aspect-ratio: 1/1;
}

.crayon-date-picker-single-day-selected {
  background: cssUtils.$bg-brand-el;
  color: cssUtils.$brand-text;
  border-radius: cssUtils.$rounded-m;
}

/* Base styles for all date picker components range */
/* ------------------------------------------------------------ */

.crayon-date-picker-range-start {
  color: cssUtils.$brand-text;
  background: cssUtils.$bg-brand-el;
  border-top-left-radius: cssUtils.$rounded-m;
  border-bottom-left-radius: cssUtils.$rounded-m;
}

.crayon-date-picker-range-middle {
  background: cssUtils.$bg-sunk;
}

.crayon-date-picker-range-end {
  color: cssUtils.$brand-text;
  background: cssUtils.$bg-brand-el;
  border-top-right-radius: cssUtils.$rounded-m;
  border-bottom-right-radius: cssUtils.$rounded-m;
}

.crayon-date-picker-range-day-button {
  cursor: pointer;
  background: transparent;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid transparent;
  width: 100%;
  height: 100%;
  aspect-ratio: 1/1;
}

.crayon-date-picker-range-day {
  width: 100%;
  height: 100%;
  min-height: 100%;
  min-width: 100%;
  aspect-ratio: 1/1;
}



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/utils/helperFn.tsx
================================================
import { format } from "date-fns";
import { DateRange } from "react-day-picker";

export const getMonthName = (monthNumber: number): string => {
  switch (monthNumber) {
    case 0:
      return "January";
    case 1:
      return "February";
    case 2:
      return "March";
    case 3:
      return "April";
    case 4:
      return "May";
    case 5:
      return "June";
    case 6:
      return "July";
    case 7:
      return "August";
    case 8:
      return "September";
    case 9:
      return "October";
    case 10:
      return "November";
    case 11:
      return "December";
    default:
      return "Invalid Month";
  }
};

export const getMonthNumber = (monthName: string): number => {
  switch (monthName) {
    case "January":
      return 0;
    case "February":
      return 1;
    case "March":
      return 2;
    case "April":
      return 3;
    case "May":
      return 4;
    case "June":
      return 5;
    case "July":
      return 6;
    case "August":
      return 7;
    case "September":
      return 8;
    case "October":
      return 9;
    case "November":
      return 10;
    case "December":
      return 11;
    default:
      return -1;
  }
};

export const formatDateRange = (range: DateRange | undefined): string => {
  if (!range) return "Select a range";

  const { from, to } = range;

  if (!from) return "Select a range";

  if (!to) {
    return format(from, "MMM d, yyyy");
  }

  if (from.toDateString() === to.toDateString()) {
    return format(from, "MMM d, yyyy");
  }

  return `${format(from, "MMM d, yyyy")} - ${format(to, "MMM d, yyyy")}`;
};

export const formatSingleDate = (date: Date | undefined): string => {
  if (!date) return "Select a date";
  return format(date, "MMM d, yyyy");
};



================================================
FILE: js/packages/react-ui/src/components/DatePicker/helpers/utils/styles.tsx
================================================
import { ClassNames, getDefaultClassNames } from "react-day-picker";

type BotType = "mobile" | "fullscreen" | "tray" | "copilot";
export const getDayPickerStyles = (botType: BotType) => {
  const defaultClassNames = getDefaultClassNames();

  const botTypeMapNav: Record<BotType, string> = {
    mobile: "crayon-date-picker-nav-mobile",
    fullscreen: "crayon-date-picker-nav-fullscreen",
    tray: "crayon-date-picker-nav-tray",
    copilot: "crayon-date-picker-nav-copilot",
  };

  const botTypeMapDropdowns: Record<BotType, string> = {
    mobile: "crayon-date-picker-dropdowns-mobile",
    fullscreen: "crayon-date-picker-dropdowns-fullscreen",
    tray: "crayon-date-picker-dropdowns-tray",
    copilot: "crayon-date-picker-dropdowns-copilot",
  };

  const commonClassNames: Partial<ClassNames> = {
    root: `${defaultClassNames.root} crayon-date-picker-root`,
    nav: `${defaultClassNames.nav} ${botTypeMapNav[botType]}`,
    dropdowns: `${defaultClassNames.dropdowns} ${botTypeMapDropdowns[botType]}`,
    month_grid: `crayon-date-picker-month-grid`,
    button_next: `crayon-date-picker-button-next`,
    button_previous: `crayon-date-picker-button-previous`,
    today: `crayon-date-picker-today`,
    disabled: `crayon-date-picker-disabled`,
    weekdays: `crayon-date-picker-weekdays`,
    chevron: `crayon-date-picker-chevron`,
    month: `crayon-date-picker-month`,
    months_dropdown: `crayon-date-picker-months-dropdown`,
    years_dropdown: `crayon-date-picker-years-dropdown`,
  };

  const DateSingleClasses: Partial<ClassNames> = {
    ...commonClassNames,
    day_button: "crayon-date-picker-single-day-button",
    day: "crayon-date-picker-single-day",
    selected: "crayon-date-picker-single-day-selected",
  };

  const DateRangeClasses: Partial<ClassNames> = {
    ...commonClassNames,
    selected: "",
    range_start: "crayon-date-picker-range-start",
    range_middle: "crayon-date-picker-range-middle",
    range_end: "crayon-date-picker-range-end",
    day_button: "crayon-date-picker-range-day-button",
    day: "crayon-date-picker-range-day",
  };

  return {
    DateSingleClasses,
    DateRangeClasses,
  };
};



================================================
FILE: js/packages/react-ui/src/components/DatePicker/stories/DatePicker.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { useState } from "react";
import { DateRange } from "react-day-picker";
import { DatePicker } from "../DatePicker";

const meta: Meta<typeof DatePicker> = {
  title: "Components/DatePicker",
  component: DatePicker,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { DatePicker } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  decorators: [
    (Story) => (
      <div
        style={{
          width: "400px",
        }}
      >
        <Story />
      </div>
    ),
  ],
  argTypes: {
    mode: {
      control: "radio",
      options: ["single", "range"],
      description: "The mode of date selection - either single date or date range",
      table: {
        category: "Behavior",
        type: {
          summary: "'single' | 'range'",
        },
        defaultValue: { summary: "single" },
      },
    },
    selectedSingleDate: {
      control: false,
      description: "The currently selected date (for single mode)",
      table: {
        category: "State",
        type: {
          summary: "Date | undefined",
        },
      },
    },
    setSelectedSingleDate: {
      control: false,
      description: "Callback function to update the selected date (for single mode)",
      table: {
        category: "Callbacks",
        type: {
          summary: "(date: Date | undefined) => void",
        },
      },
    },
    selectedRangeDates: {
      control: false,
      description:
        "The currently selected date range (for range mode), use type DateRange from react-day-picker",
      table: {
        category: "State",
        type: {
          summary: "DateRange | undefined",
        },
      },
    },
    setSelectedRangeDates: {
      control: false,
      description:
        "Callback function to update the selected date range (for range mode), use type DateRange from react-day-picker",
      table: {
        category: "Callbacks",
        type: {
          summary: "(range: DateRange | undefined) => void",
        },
      },
    },
    className: {
      control: false,
      description: "Additional CSS class name for custom styling",
      table: {
        category: "Styling",
        type: {
          summary: "string",
        },
      },
    },
    style: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: {
          summary: "CSSProperties",
        },
      },
    },
  },
  tags: ["!dev", "autodocs"],
} satisfies Meta<typeof DatePicker>;

export default meta;
type Story = StoryObj<typeof meta>;

// Basic single date picker with docked variant
export const SinglePicker: Story = {
  render: (args) => <DatePicker {...args} style={{ width: "400px" }} />,
  args: {
    mode: "single",
  },
};

// Range date picker with docked variant
export const RangePicker: Story = {
  args: {
    mode: "range",
  },
  parameters: {
    docs: {
      description: {
        story: "Range picker with docked variant. Select dates by dragging across the calendar",
      },
    },
  },
};

// Single date picker with floating variant
export const FloatingPicker: Story = {
  render: (args) => <DatePicker {...args} style={{ width: "350px" }} />,
  args: {
    mode: "single",
  },
};

export const ControlledSingle: Story = {
  render: (args) => {
    const [selectedDate, setSelectedDate] = useState<Date>();
    return (
      <div>
        <DatePicker
          mode={args.mode}
          selectedSingleDate={selectedDate}
          setSelectedSingleDate={setSelectedDate}
        />
        <div style={{ marginTop: "1rem" }}>Selected date: {selectedDate?.toLocaleDateString()}</div>
      </div>
    );
  },
  args: {
    mode: "single",
  },
  parameters: {
    docs: {
      source: {
        code: `
const ControlledDatePickerExample = () => {
  const [selectedDate, setSelectedDate] = useState<Date>();
  
  return (
    <div>
      <DatePicker
        mode="single"
        selectedSingleDate={selectedDate}
        setSelectedSingleDate={setSelectedDate}
      />
      <div style={{ marginTop: "1rem" }}>
        Selected date: {selectedDate?.toLocaleDateString()}
      </div>
    </div>
  );
};`,
        language: "tsx",
        type: "code",
      },
    },
  },
};

// Controlled range date picker
const ControlledRangePicker = () => {
  const [dateRange, setDateRange] = useState<DateRange>();

  return (
    <div>
      <DatePicker
        mode="range"
        selectedRangeDates={dateRange}
        setSelectedRangeDates={setDateRange}
      />
      <div style={{ marginTop: "1rem" }}>
        Selected range: {dateRange?.from?.toLocaleDateString()} -{" "}
        {dateRange?.to?.toLocaleDateString()}
      </div>
    </div>
  );
};

export const ControlledRange: Story = {
  render: () => <ControlledRangePicker />,
  parameters: {
    docs: {
      source: {
        code: `
import { DateRange } from "react-day-picker";

const ControlledRangePicker = () => {
  const [dateRange, setDateRange] = useState<DateRange>();

  return (
    <div>
      <DatePicker
        mode="range"
        selectedRangeDates={dateRange}
        setSelectedRangeDates={setDateRange}
      />
      <div style={{ marginTop: "1rem" }}>
        Selected range: {dateRange?.from?.toLocaleDateString()} - {dateRange?.to?.toLocaleDateString()}
      </div>
    </div>
  );
};`,
        language: "tsx",
        type: "code",
      },
    },
  },
};



================================================
FILE: js/packages/react-ui/src/components/FollowUpBlock/dependencies.ts
================================================
const dependencies = ["FollowUpBlock"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/FollowUpBlock/followUpBlock.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-follow-up-block {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: cssUtils.$spacing-3xs;
}



================================================
FILE: js/packages/react-ui/src/components/FollowUpBlock/FollowUpBlock.tsx
================================================
import clsx from "clsx";
import { CSSProperties, forwardRef, ReactElement } from "react";
import { FollowUpItemProps } from "../FollowUpItem";

export interface FollowUpBlockProps {
  children: ReactElement<FollowUpItemProps> | ReactElement<FollowUpItemProps>[];
  className?: string;
  style?: CSSProperties;
}

const FollowUpBlock = forwardRef<HTMLDivElement, FollowUpBlockProps>((props, ref) => {
  const { children, className, style } = props;
  return (
    <div ref={ref} className={clsx("crayon-follow-up-block", className)} style={style}>
      {children}
    </div>
  );
});

FollowUpBlock.displayName = "FollowUpBlock";

export { FollowUpBlock };



================================================
FILE: js/packages/react-ui/src/components/FollowUpBlock/index.ts
================================================
export * from "./FollowUpBlock";



================================================
FILE: js/packages/react-ui/src/components/FollowUpBlock/stories/FollowUpBlock.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { Plus } from "lucide-react";
import { FollowUpItem } from "../../FollowUpItem";
import { FollowUpBlock } from "../FollowUpBlock";

const meta: Meta<typeof FollowUpBlock> = {
  title: "Components/FollowUpBlock",
  component: FollowUpBlock,
  subcomponents: { FollowUpItem } as any,
  tags: ["!dev", "autodocs"],
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "```tsx\nimport { FollowUpBlock, FollowUpItem } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    children: {
      control: false,
      description: "The child elements of the follow up block that accept FollowUpItem components",
      table: {
        category: "Content",
        type: { summary: "ReactNode[] | ReactNode" },
        expanded: false,
      },
    },
    className: {
      control: false,
      description: "Additional CSS class name for custom styling",
      table: {
        category: "Styling",
        type: { summary: "string" },
        expanded: false,
      },
    },
    style: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: { summary: "CSSProperties" },
        expanded: false,
      },
    },
  },
};

export default meta;
type Story = StoryObj<typeof FollowUpBlock>;

export const FollowUpBlockWithItems: Story = {
  render: (args) => (
    <FollowUpBlock>
      <FollowUpItem text="What is machine learning?" icon={<Plus size={16} />} />
      <FollowUpItem text="what is the weather in tokyo?" icon={<Plus size={16} />} />
      <FollowUpItem
        text="How to leverage AI to improve customer service?"
        icon={<Plus size={16} />}
      />
    </FollowUpBlock>
  ),
};



================================================
FILE: js/packages/react-ui/src/components/FollowUpItem/dependencies.ts
================================================
const dependencies = ["FollowUpItem"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/FollowUpItem/followUpItem.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-follow-up-item {
  @include cssUtils.button-reset;
  @include cssUtils.typography(primary, default);
  box-sizing: border-box;
  padding: cssUtils.$spacing-xs cssUtils.$spacing-0;
  border-bottom: 1px solid cssUtils.$stroke-default;
  background-color: transparent;
  gap: cssUtils.$spacing-xs;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  color: cssUtils.$primary-text;
  cursor: pointer;
}



================================================
FILE: js/packages/react-ui/src/components/FollowUpItem/FollowUpItem.tsx
================================================
import clsx from "clsx";
import { ButtonHTMLAttributes, forwardRef, ReactNode } from "react";

export interface FollowUpItemProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  text: ReactNode;
  icon?: ReactNode;
  className?: string;
}

const FollowUpItem = forwardRef<HTMLButtonElement, FollowUpItemProps>((props, ref) => {
  const { className, text, icon, ...rest } = props;
  return (
    <button ref={ref} className={clsx("crayon-follow-up-item", className)} {...rest}>
      {text}
      {icon}
    </button>
  );
});

FollowUpItem.displayName = "FollowUpItem";

export { FollowUpItem };



================================================
FILE: js/packages/react-ui/src/components/FollowUpItem/index.ts
================================================
export * from "./FollowUpItem";



================================================
FILE: js/packages/react-ui/src/components/FollowUpItem/stories/FollowUpItem.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { ArrowRight } from "lucide-react";
import { FollowUpItem } from "../FollowUpItem";

const meta: Meta<typeof FollowUpItem> = {
  title: "Components/FollowUpItem",
  component: FollowUpItem,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { FollowUpItem } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  tags: ["!dev", "!autodocs"],
  argTypes: {
    text: {
      control: "text",
      description: "The text content of the follow-up item",
      table: {
        category: "Content",
        type: { summary: "string" },
      },
    },
    icon: {
      control: false,
      description: "",
      table: {
        category: "Content",
        type: { summary: "ReactNode" },
      },
    },
    className: {
      control: false,
      description: "Additional CSS class names",
      table: {
        category: "Styling",
        type: { summary: "string" },
      },
    },
  },
};

export default meta;
type Story = StoryObj<typeof FollowUpItem>;

export const Default: Story = {
  args: {
    text: "Continue with this topic",
    icon: <ArrowRight size={16} />,
  },
};



================================================
FILE: js/packages/react-ui/src/components/FormControl/dependencies.ts
================================================
const dependencies = ["FormControl"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/FormControl/formControl.scss
================================================
@forward "./Hint/hint";
@use "../../cssUtils.scss" as cssUtils;

.crayon-form-control {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: cssUtils.$spacing-s;
}



================================================
FILE: js/packages/react-ui/src/components/FormControl/FormControl.tsx
================================================
import clsx from "clsx";
import React, { forwardRef } from "react";

export interface FormControlProps {
  children: React.ReactNode;
  className?: string;
  style?: React.CSSProperties;
}

const FormControl = forwardRef<HTMLDivElement, FormControlProps>((props, ref) => {
  return (
    <div ref={ref} className={clsx("crayon-form-control", props.className)} style={props.style}>
      {props.children}
    </div>
  );
});

FormControl.displayName = "FormControl";

export { FormControl };



================================================
FILE: js/packages/react-ui/src/components/FormControl/index.ts
================================================
export * from "./FormControl";
export * from "./Hint";



================================================
FILE: js/packages/react-ui/src/components/FormControl/Hint/hint.scss
================================================
@use "../../../cssUtils.scss" as cssUtils;

.crayon-hint {
  box-sizing: border-box;
  @include cssUtils.typography(label, default);
  color: cssUtils.$secondary-text;
  display: flex;
  align-items: center;
  gap: cssUtils.$spacing-2xs;
}



================================================
FILE: js/packages/react-ui/src/components/FormControl/Hint/Hint.tsx
================================================
import clsx from "clsx";
import React, { forwardRef } from "react";

export interface HintProps extends React.ComponentPropsWithoutRef<"div"> {
  children: React.ReactNode;
  className?: string;
  style?: React.CSSProperties;
}

const Hint = forwardRef<HTMLDivElement, HintProps>(
  ({ children, className, style, ...props }, ref) => {
    return (
      <div ref={ref} className={clsx("crayon-hint", className)} style={style} {...props}>
        {children}
      </div>
    );
  },
);

Hint.displayName = "Hint";

export { Hint };



================================================
FILE: js/packages/react-ui/src/components/FormControl/Hint/index.ts
================================================
export * from "./Hint";



================================================
FILE: js/packages/react-ui/src/components/FormControl/stories/FormControl.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Info } from "lucide-react";
import { Input } from "../../Input";
import { Label } from "../../Label";
import { FormControl } from "../FormControl";
import { Hint } from "../Hint";

const meta: Meta<typeof FormControl> = {
  title: "Components/FormControl",
  component: FormControl,
  tags: ["!dev", "autodocs"],
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { FormControl, Hint } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    children: {
      control: false,
      description:
        "The child elements of the form control that accept Label, Input, and Hint components",
      table: {
        category: "Content",
        type: { summary: "ReactNode[] | ReactNode" },
      },
    },
    className: {
      control: false,
      description: "Additional CSS class name for custom styling",
      table: {
        category: "Styling",
        type: { summary: "string" },
      },
    },
    style: {
      control: false,
      description: "Inline CSS styles for custom styling",
      table: {
        category: "Styling",
        type: { summary: "CSSProperties" },
      },
    },
  },
};

export default meta;
type Story = StoryObj<typeof FormControl>;

export const WithLabelAndHint: Story = {
  render: (args) => (
    <FormControl>
      <Label htmlFor="username">Username</Label>
      <Input placeholder="Enter username" id="username" />
      <Hint>
        <Info size={14} />
        <span>Must be at least 4 characters long</span>
      </Hint>
    </FormControl>
  ),
};

export const WithMultipleChildren: Story = {
  render: (args) => (
    <FormControl>
      <Label htmlFor="profile-information">Profile Information</Label>
      <Input placeholder="Full name" id="profile-information" />
      <Input placeholder="Bio" />
      <Hint>This information will be displayed on your public profile</Hint>
    </FormControl>
  ),
};



================================================
FILE: js/packages/react-ui/src/components/IconButton/dependencies.ts
================================================
const dependencies = ["IconButton"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/IconButton/iconButton.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-icon-button {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid transparent;
  gap: cssUtils.$spacing-xs;
  cursor: pointer;
  transition: all 0.2s ease;
  padding: 0;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  //icon
  &-icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  // variants
  &-primary {
    background-color: cssUtils.$bg-brand-el;
    border-color: cssUtils.$stroke-default;
    color: cssUtils.$brand-text;
  }

  &-secondary {
    background-color: cssUtils.$bg-container;
    border-color: cssUtils.$stroke-default;
    color: cssUtils.$primary-text;
  }

  &-tertiary {
    background-color: transparent;
    border-color: transparent;
    color: cssUtils.$primary-text;
  }

  // sizes
  &-extra-small {
    width: 20px;
    height: 20px;
    box-shadow: cssUtils.$shadow-s;
    & .crayon-icon-button-icon {
      height: 14px;
      width: 14px;
    }
  }

  &-small {
    width: 28px;
    height: 28px;
    box-shadow: cssUtils.$shadow-s;
    & .crayon-icon-button-icon {
      height: 14px;
      width: 14px;
    }
  }

  &-medium {
    width: 32px;
    height: 32px;
    box-shadow: cssUtils.$shadow-m;
    & .crayon-icon-button-icon {
      height: 16px;
      width: 16px;
    }
  }

  &-large {
    width: 36px;
    height: 36px;
    min-width: 36px;
    min-height: 36px;
    font-size: 16px;
    box-shadow: cssUtils.$shadow-l;
    & .crayon-icon-button-icon {
      height: 16px;
      width: 16px;
    }
  }

  // shapes
  &-square {
    border-radius: cssUtils.$rounded-s;
  }

  &-circle {
    border-radius: cssUtils.$rounded-full;
  }
}



================================================
FILE: js/packages/react-ui/src/components/IconButton/IconButton.tsx
================================================
import clsx from "clsx";
import { ButtonHTMLAttributes, forwardRef, ReactNode } from "react";

type IconButtonVariant = "primary" | "secondary" | "tertiary";
type IconButtonSize = "extra-small" | "small" | "medium" | "large";
type IconButtonShape = "square" | "circle";

export interface IconButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  icon: ReactNode;
  variant?: IconButtonVariant;
  size?: IconButtonSize;
  shape?: IconButtonShape;
  className?: string;
}

const iconButtonVariants = {
  primary: "crayon-icon-button-primary",
  secondary: "crayon-icon-button-secondary",
  tertiary: "crayon-icon-button-tertiary",
} as const;

const iconButtonSizes = {
  "extra-small": "crayon-icon-button-extra-small",
  small: "crayon-icon-button-small",
  medium: "crayon-icon-button-medium",
  large: "crayon-icon-button-large",
} as const;

const iconButtonShapes = {
  square: "crayon-icon-button-square",
  circle: "crayon-icon-button-circle",
} as const;

export const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {
  const {
    className,
    icon,
    variant = "primary",
    size = "medium",
    shape = "square",
    ...rest
  } = props;

  return (
    <button
      ref={ref}
      className={clsx(
        "crayon-icon-button",
        iconButtonVariants[variant],
        iconButtonSizes[size],
        iconButtonShapes[shape],
        className,
      )}
      {...rest}
    >
      {icon && <span className="crayon-icon-button-icon">{icon}</span>}
    </button>
  );
});

IconButton.displayName = "IconButton";



================================================
FILE: js/packages/react-ui/src/components/IconButton/index.ts
================================================
export * from "./IconButton";



================================================
FILE: js/packages/react-ui/src/components/IconButton/stories/iconButton.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { Download } from "lucide-react";
import { IconButton } from "../IconButton";

const meta: Meta<typeof IconButton> = {
  title: "Components/IconButton",
  component: IconButton,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "```tsx\nimport { IconButton } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    icon: {
      control: false,
      description: "The icon to display in the button",
      table: {
        category: "Content",
        type: { summary: "ReactNode" },
      },
    },
    variant: {
      control: "radio",
      options: ["primary", "secondary", "tertiary"],
      description: "The variant of the button",
      table: {
        category: "Appearance",
        type: { summary: "string" },
        defaultValue: { summary: "primary" },
      },
    },
    size: {
      control: "radio",
      options: ["extra-small", "small", "medium", "large"],
      description: "The size of the button",
      table: {
        category: "Appearance",
        type: { summary: "string" },
        defaultValue: { summary: "medium" },
      },
    },
    shape: {
      control: "radio",
      options: ["square", "circle"],
      description: "The shape of the button",
      table: {
        category: "Appearance",
        type: { summary: "string" },
        defaultValue: { summary: "square" },
      },
    },
    disabled: {
      control: "boolean",
      description: "Whether the button is disabled",
      table: {
        category: "Behavior",
        type: { summary: "boolean" },
        defaultValue: { summary: "false" },
      },
    },
    className: {
      control: false,
      description: "Additional CSS classes to apply to the button",
      table: {
        category: "Styling",
        type: { summary: "string" },
      },
    },
  },
  tags: ["!dev", "autodocs"],
};

export default meta;
type Story = StoryObj<typeof IconButton>;

// Basic button stories
export const PrimaryButton: Story = {
  args: {
    icon: <Download />,
    disabled: false,
    variant: "primary",
    shape: "square",
    size: "medium",
  },
  render: (args) => <IconButton {...args} />,
};

// Secondary button stories
export const SecondaryButton: Story = {
  args: {
    ...PrimaryButton.args,
    variant: "secondary",
  },
};

// Tertiary button stories
export const TertiaryButton: Story = {
  name: "Tertiary (Ghost)",
  args: {
    ...PrimaryButton.args,
    variant: "tertiary",
  },
};



================================================
FILE: js/packages/react-ui/src/components/Image/dependencies.ts
================================================
const dependencies = ["Image"];
export default dependencies;



================================================
FILE: js/packages/react-ui/src/components/Image/image.scss
================================================
@use "../../cssUtils.scss" as cssUtils;

.crayon-image {
  display: flex;
  box-sizing: border-box;
  max-width: 100%;
  height: auto;
  overflow: clip;
  border-radius: cssUtils.$rounded-m;
  border: 1px solid cssUtils.$stroke-default;
  background-color: cssUtils.$bg-container;

  &-fit {
    object-fit: contain;
    width: 100%;
    height: 100%;
  }

  &-fill {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
}



================================================
FILE: js/packages/react-ui/src/components/Image/Image.tsx
================================================
import * as AspectRatio from "@radix-ui/react-aspect-ratio";
import clsx from "clsx";
import React, { forwardRef } from "react";

type AspectRatioType = "1:1" | "3:2" | "3:4" | "4:3" | "16:9";
type ScaleType = "fit" | "fill";

export interface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {
  src: string;
  alt?: string;
  styles?: React.CSSProperties;
  className?: string;
  aspectRatio?: AspectRatioType;
  scale?: ScaleType;
}

const aspectRatioMap: Record<AspectRatioType, number> = {
  "1:1": 1,
  "3:2": 3 / 2,
  "3:4": 3 / 4,
  "4:3": 4 / 3,
  "16:9": 16 / 9,
};

const scaleMap: Record<ScaleType, string> = {
  fit: "crayon-image-fit",
  fill: "crayon-image-fill",
};

export const Image = forwardRef<HTMLImageElement, ImageProps>((props, ref) => {
  const { src, alt, styles, className, aspectRatio = "3:2", scale = "fill", ...rest } = props;

  const imageClasses = clsx(
    "crayon-image",
    {
      [`${scaleMap[scale]}`]: scale,
    },
    className,
  );

  const image = (
    <img
      ref={ref}
      src={src}
      alt={alt}
      className={imageClasses}
      style={styles}
      onError={(e) => {
        e.currentTarget.style.display = "none";
        console.error(`Failed to load image: ${src}`);
      }}
      {...rest}
    />
  );

  return <AspectRatio.Root ratio={aspectRatioMap[aspectRatio]}>{image}</AspectRatio.Root>;
});

Image.displayName = "Image";



================================================
FILE: js/packages/react-ui/src/components/Image/index.ts
================================================
export * from "./Image";



================================================
FILE: js/packages/react-ui/src/components/Image/stories/Image.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { Image } from "../Image";

const meta: Meta<typeof Image> = {
  title: "Components/Image",
  component: Image,
  tags: ["!dev", "autodocs"],
  decorators: [
    (Story) => (
      <div
        style={{
          maxWidth: 400,
          margin: "auto",
        }}
      >
        <Story />
      </div>
    ),
  ],
  parameters: {
    docs: {
      description: {
        component: "```tsx\nimport { Image } from '@crayon-ui/react-ui';\n```",
      },
    },
  },
  argTypes: {
    className: {
      control: false,
      description: "Additional CSS classes to apply to the image",
      table: {
        category: "Styling",
      },
    },
    styles: {
      control: false,
      description: "Additional CSS styles to apply to the image",
      table: {
        category: "Styling",
      },
    },
    aspectRatio: {
      control: "select",
      options: ["1:1", "3:2", "3:4", "4:3", "16:9"],
      description: "Uses Radix UI AspectRatio component",
      table: {
        category: "Appearance",
        type: { summary: "string" },
        defaultValue: { summary: "3:2" },
      },
    },
    scale: {
      control: "radio",
      options: ["fit", "fill"],
      description: "The scaling behavior of the image",
      table: {
        category: "Appearance",
        type: { summary: "string" },
        defaultValue: { summary: "fit" },
      },
    },
    src: {
      control: "text",
      description: "The source URL of the image",
      table: {
        category: "Content",
      },
    },
    alt: {
      control: "text",
      description: "The alternative text for the image",
      table: {
        category: "Content",
      },
    },
  },
};

export default meta;
type Story = StoryObj<typeof Image>;

const randomImage = [
  "https://images.unsplash.com/photo-1738168246881-40f35f8aba0a?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwyNnx8fGVufDB8fHx8fA%3D%3D",
  "https://images.unsplash.com/photo-1736354485341-d165463e0133?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwyMnx8fGVufDB8fHx8fA%3D%3D",
  "https://images.unsplash.com/photo-1738522477288-82f5db85cfc3?q=80&w=2973&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  "https://images.unsplash.com/photo-1736794781970-ae55b6e3a13e?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHw3MHx8fGVufDB8fHx8fA%3D%3D",
];

export const Default: Story = {
  args: {
    src: randomImage[Math.floor(Math.random() * randomImage.length)],
    alt: "Sample image",
    aspectRatio: "3:2",
    scale: "fill",
  },
};



================================================
FILE: js/packages/react-ui/src/components/ImageGallery/GalleryModal.tsx
================================================
import clsx from "clsx";
import { ChevronLeft, ChevronRight, X } from "lucide-react";
import React, { useCallback, useEffect, useRef, useState } from "react";
import { IconButton } from "../IconButton";
import { ImageItem } from "./ImageGallery";

export interface GalleryModalProps {
  images: ImageItem[];
  selectedImageIndex: number;
  setSelectedImageIndex: (index: number) => void;
  onClose: () => void;
}

export const GalleryModal: React.FC<GalleryModalProps> = ({
  images,
  selectedImageIndex,
  setSelectedImageIndex,
  onClose,
}) => {
  const [scrollButtons, setScrollButtons] = useState({ showLeft: false, showRight: false });
  const carouselRef = useRef<HTMLDivElement>(null);

  // Check if scrolling is needed
  const checkScroll = useCallback(() => {
    if (!carouselRef.current) return;

    const container = carouselRef.current;
    setScrollButtons({
      showLeft: container.scrollLeft > 0,
      showRight: container.scrollLeft + container.offsetWidth < container.scrollWidth,
    });
  }, []);

  useEffect(() => {
    if (!carouselRef.current) {
      return;
    }

    const container = carouselRef.current;
    // Initial check
    checkScroll();

    const resizeObserver = new ResizeObserver(checkScroll);
    resizeObserver.observe(container);

    container.addEventListener("scroll", checkScroll);

    return () => {
      container.removeEventListener("scroll", checkScroll);
      resizeObserver.disconnect();
    };
  }, [checkScroll]);

  const scroll = (direction: "left" | "right") => {
    if (carouselRef.current) {
      const container = carouselRef.current;
      const containerRect = container.getBoundingClientRect();
      const scrollAmount = containerRect.width * 0.28;

      if (direction === "left") {
        container.scrollBy({
          left: -scrollAmount,
          behavior: "smooth",
        });
      } else {
        container.scrollBy({
          left: scrollAmount,
          behavior: "smooth",
        });
      }
    }
  };

  // Memoize thumbnail click handler
  const handleThumbnailClick = useCallback(
    (index: number) => () => setSelectedImageIndex(index),
    [setSelectedImageIndex],
  );

  return (
    <div className="crayon-gallery__modal">
      <div className="crayon-gallery__modal-content">
        <div className="crayon-gallery__modal-header">
          <span className="crayon-gallery__modal-heading">All Photos</span>
          <IconButton size="small" variant="secondary" icon={<X />} onClick={onClose} />
        </div>
        <div className="crayon-gallery__modal-main">
          <img
            src={images[selectedImageIndex]?.src}
            alt={images[selectedImageIndex]?.alt || `Gallery image ${selectedImageIndex + 1}`}
          />
        </div>
        <div className="crayon-gallery__modal-carousel-container">
          {scrollButtons.showLeft && (
            <IconButton
              className={clsx(
                "crayon-gallery__carousel-button",
                "crayon-gallery__carousel-button--left",
              )}
              onClick={() => scroll("left")}
              aria-label="Scroll images left"
              icon={<ChevronLeft />}
              variant="secondary"
              size="extra-small"
            />
          )}

          <div className="crayon-gallery__modal-carousel" ref={carouselRef}>
            {images.map((image, index) => (
              <div
                key={index}
                className={clsx(
                  "crayon-gallery__modal-thumbnail",
                  index === selectedImageIndex && "crayon-gallery__modal-thumbnail--active",
                )}
                onClick={handleThumbnailClick(index)}
              >
                <img src={image.src} alt={image.alt || `Gallery thumbnail ${index + 1}`} />
              </div>
            ))}
          </div>

          {scrollButtons.showRight && (
            <IconButton
              className={clsx(
                "crayon-gallery__carousel-button",
                "crayon-gallery__carousel-button--right",
              )}
              onClick={() => scroll("right")}
              aria-label="Scroll images right"
              icon={<ChevronRight />}
              variant="secondary"
              size="extra-small"
            />
          )}
        </div>
      </div>
    </div>
  );
};



================================================
FILE: js/packages/react-ui/src/components/ImageGallery/imageGallery.scss
================================================
@use "../../cssUtils" as cssUtils;

.crayon-gallery {
  display: flex;
  flex-direction: column;
  width: 100%;
  overflow: hidden;
  position: relative;
  border-radius: cssUtils.$rounded-m;

  &__grid {
    display: grid;
    width: 100%;
    max-height: 376px;
    grid-gap: cssUtils.$spacing-s;
  }

  // Layout variations
  &--single &__grid {
    grid-template-columns: 1fr;
  }

  &--double &__grid {
    grid-template-columns: repeat(2, 1fr);
  }

  &--triple &__grid {
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;

    .crayon-gallery__image:first-child {
      grid-row: 1 / -1;
    }
  }

  &--quad &__grid {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(2, 1fr);
    grid-template-areas:
      "img1 img1 img2 img2 "
      "img1 img1 img3 img4";
    .crayon-gallery__image {
      &:nth-child(1) {
        grid-area: img1;
      }
      &:nth-child(2) {
        grid-area: img2;
      }
      &:nth-child(3) {
        grid-area: img3;
      }
      &:nth-child(4) {
        grid-area: img4;
      }
    }
  }

  &--default &__grid {
    grid-template-columns: 2fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;

    .crayon-gallery__image:first-child {
      grid-row: 1 / -1;
    }
  }

  &__image {
    position: relative;
    overflow: hidden;

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;

      &:hover {
        transform: scale(1.05);
      }
    }

    &--main {
      img {
        height: 100%;
      }
    }
  }

  &__show-all-button {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    bottom: 5px;
    right: 5px;
  }

  // Modal styles
  &__modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    animation: fadeIn 0.3s ease;
    backdrop-filter: blur(3px);
    background-color: cssUtils.$bg-overlay;
  }

  &__modal-content {
    width: 100%;
    max-width: 720px;
    max-height: 640px;
    // position: relative;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    border: 1px solid cssUtils.$stroke-default;
    background-color: cssUtils.$bg-container;
    border-radius: cssUtils.$rounded-xl;
    gap: cssUtils.$spacing-xl;
    padding-top: cssUtils.$spacing-xl;
    padding-bottom: cssUtils.$spacing-xl;
  }
  &__modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-left: cssUtils.$spacing-xl;
    padding-right: cssUtils.$spacing-xl;
  }

  &__modal-main {
    height: 390px;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-left: cssUtils.$spacing-xl;
    padding-right: cssUtils.$spacing-xl;

    img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: cssUtils.$rounded-s;
    }
    &:hover {
      .crayon-gallery__modal-details {
        display: flex;
      }
    }
  }

  &__modal-carousel-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  &__modal-carousel {
    display: flex;
    gap: cssUtils.$spacing-s;
    overflow-x: auto;
    scroll-behavior: smooth;
    scrollbar-width: none;
    padding-left: cssUtils.$spacing-xl;
    padding-right: cssUtils.$spacing-xl;

    &::-webkit-scrollbar {
      display: none;
    }
  }

  &__carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1;

    &--left {
      left: 24px;
    }

    &--right {
      right: 24px;
    }
  }

  &__modal-thumbnail {
    flex: 1;
    height: 116px;
    min-width: 174px;
    cursor: pointer;
    opacity: 0.6;
    border-radius: cssUtils.$rounded-s;
    border: 1px solid transparent;
    overflow: hidden;
    transition: opacity 0.2s ease;
    box-sizing: border-box;

    &:hover {
      opacity: 0.8;
    }

    &--active {
      opacity: 1;
      border-color: cssUtils.$stroke-interactive-el-selected;
      border-radius: cssUtils.$rounded-s;
    }

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  // Responsive adju